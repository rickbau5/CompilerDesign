Var gromit of type int [line: 6]
Sibling: 0  Var shaun is array of type int [line: 6]
Sibling: 1  Func wallace returns type void [line: 8]
!   Child: 0  Param wrong of type int [line: 8]
!   Sibling: 0  Param trousers of type int [line: 8]
!   Sibling: 1  Param sheep of type int [line: 8]
!   Child: 1  Compound [line: 9]
!   !   Child: 0  Var close of type bool [line: 10]
!   !   !   Child: 0  Const: true [line: 10]
!   !   Sibling: 0  Var shave of type bool [line: 10]
!   !   !   Child: 0  Const: false [line: 10]
!   !   Child: 1  Const: 1729 [line: 12]
!   !   Sibling: 0  Id: close [line: 13]
!   !   Sibling: 1  Op: + [line: 14]
!   !   !   Child: 0  Op: * [line: 14]
!   !   !   !   Child: 0  Const: 11 [line: 14]
!   !   !   !   Child: 1  Const: 22 [line: 14]
!   !   !   Child: 1  Op: * [line: 14]
!   !   !   !   Child: 0  Const: 33 [line: 14]
!   !   !   !   Child: 1  Const: 44 [line: 14]
!   !   Sibling: 2  Assign: = [line: 15]
!   !   !   Child: 0  Id: close [line: 15]
!   !   !   Child: 1  Id: shave [line: 15]
!   !   Sibling: 3  Assign: = [line: 16]
!   !   !   Child: 0  Id: wrong [line: 16]
!   !   !   Child: 1  Op: % [line: 16]
!   !   !   !   Child: 0  Id: trousers [line: 16]
!   !   !   !   Child: 1  Op: / [line: 16]
!   !   !   !   !   Child: 0  Const: 666 [line: 16]
!   !   !   !   !   Child: 1  Id: wrong [line: 16]
!   !   Sibling: 4  Assign: = [line: 17]
!   !   !   Child: 0  Id: wrong [line: 17]
!   !   !   Child: 1  Op: / [line: 17]
!   !   !   !   Child: 0  Op: % [line: 17]
!   !   !   !   !   Child: 0  Id: trousers [line: 17]
!   !   !   !   !   Child: 1  Const: 666 [line: 17]
!   !   !   !   Child: 1  Id: wrong [line: 17]
!   !   Sibling: 5  Assign: = [line: 18]
!   !   !   Child: 0  Id: gromit [line: 18]
!   !   !   Child: 1  Op: + [line: 18]
!   !   !   !   Child: 0  Op: - [line: 18]
!   !   !   !   !   Child: 0  Op: * [line: 18]
!   !   !   !   !   !   Child: 0  Id: wrong [line: 18]
!   !   !   !   !   !   Child: 1  Id: trousers [line: 18]
!   !   !   !   !   Child: 1  Id: gromit [line: 18]
!   !   !   !   Child: 1  Op: - [line: 18]
!   !   !   !   !   Child: 0  Const: 42 [line: 18]
!   !   Sibling: 6  Assign: += [line: 19]
!   !   !   Child: 0  Id: gromit [line: 19]
!   !   !   Child: 1  Const: 27182818 [line: 19]
!   !   Sibling: 7  Assign: -= [line: 20]
!   !   !   Child: 0  Id: gromit [line: 20]
!   !   !   Child: 1  Op: - [line: 20]
!   !   !   !   Child: 0  Const: 31415927 [line: 20]
!   !   Sibling: 8  Assign: /= [line: 21]
!   !   !   Child: 0  Id: gromit [line: 21]
!   !   !   Child: 1  Assign: *= [line: 21]
!   !   !   !   Child: 0  Id: wrong [line: 21]
!   !   !   !   Child: 1  Const: 42 [line: 21]
!   !   Sibling: 9  Assign: = [line: 22]
!   !   !   Child: 0  Id: close [line: 22]
!   !   !   Child: 1  Op: and [line: 22]
!   !   !   !   Child: 0  Op: < [line: 22]
!   !   !   !   !   Child: 0  Id: wrong [line: 22]
!   !   !   !   !   Child: 1  Id: trousers [line: 22]
!   !   !   !   Child: 1  Op: <= [line: 22]
!   !   !   !   !   Child: 0  Id: trousers [line: 22]
!   !   !   !   !   Child: 1  Id: gromit [line: 22]
!   !   Sibling: 10  Assign: = [line: 23]
!   !   !   Child: 0  Id: shave [line: 23]
!   !   !   Child: 1  Op: and [line: 23]
!   !   !   !   Child: 0  Op: > [line: 23]
!   !   !   !   !   Child: 0  Id: wrong [line: 23]
!   !   !   !   !   Child: 1  Id: trousers [line: 23]
!   !   !   !   Child: 1  Op: >= [line: 23]
!   !   !   !   !   Child: 0  Id: trousers [line: 23]
!   !   !   !   !   Child: 1  Id: gromit [line: 23]
!   !   Sibling: 11  Assign: = [line: 24]
!   !   !   Child: 0  Op: [ [line: 24]
!   !   !   !   Child: 0  Id: shaun [line: 24]
!   !   !   !   Child: 1  Const: 66 [line: 24]
!   !   !   Child: 1  Id: sheep [line: 24]
!   !   Sibling: 12  Compound [line: 25]
!   !   !   Child: 0  Var a of type int [line: 26]
!   !   !   Sibling: 0  Var grand of type int [line: 26]
!   !   !   !   Child: 0  Op: / [line: 26]
!   !   !   !   !   Child: 0  Const: 1 [line: 26]
!   !   !   !   !   Child: 1  Const: 2 [line: 26]
!   !   !   Sibling: 1  Var day of type int [line: 26]
!   !   !   !   Child: 0  Op: * [line: 26]
!   !   !   !   !   Child: 0  Const: 3 [line: 26]
!   !   !   !   !   Child: 1  Const: 4 [line: 26]
!   !   !   Sibling: 2  Var out of type int [line: 26]
!   !   !   !   Child: 0  Op: - [line: 26]
!   !   !   !   !   Child: 0  Const: 9 [line: 26]
!   !   !   Child: 1  Assign: = [line: 28]
!   !   !   !   Child: 0  Id: a [line: 28]
!   !   !   !   Child: 1  Assign: += [line: 28]
!   !   !   !   !   Child: 0  Id: grand [line: 28]
!   !   !   !   !   Child: 1  Assign: -= [line: 28]
!   !   !   !   !   !   Child: 0  Id: day [line: 28]
!   !   !   !   !   !   Child: 1  Id: out [line: 28]
!   !   Sibling: 13  Assign: = [line: 31]
!   !   !   Child: 0  Id: close [line: 31]
!   !   !   Child: 1  Op: and [line: 31]
!   !   !   !   Child: 0  Op: < [line: 31]
!   !   !   !   !   Child: 0  Op: + [line: 31]
!   !   !   !   !   !   Child: 0  Op: * [line: 31]
!   !   !   !   !   !   !   Child: 0  Op: - [line: 31]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [line: 31]
!   !   !   !   !   !   !   Child: 1  Const: 2 [line: 31]
!   !   !   !   !   !   Child: 1  Const: 3 [line: 31]
!   !   !   !   !   Child: 1  Op: * [line: 31]
!   !   !   !   !   !   Child: 0  Const: 4 [line: 31]
!   !   !   !   !   !   Child: 1  Const: 5 [line: 31]
!   !   !   !   Child: 1  Op: > [line: 31]
!   !   !   !   !   Child: 0  Op: + [line: 31]
!   !   !   !   !   !   Child: 0  Const: 6 [line: 31]
!   !   !   !   !   !   Child: 1  Const: 7 [line: 31]
!   !   !   !   !   Child: 1  Op: - [line: 31]
!   !   !   !   !   !   Child: 0  Const: 3 [line: 31]
!   !   Sibling: 14  Assign: = [line: 32]
!   !   !   Child: 0  Id: shave [line: 32]
!   !   !   Child: 1  Op: or [line: 32]
!   !   !   !   Child: 0  Const: true [line: 32]
!   !   !   !   Child: 1  Op: and [line: 32]
!   !   !   !   !   Child: 0  Op: < [line: 32]
!   !   !   !   !   !   Child: 0  Op: - [line: 32]
!   !   !   !   !   !   !   Child: 0  Op: * [line: 32]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [line: 32]
!   !   !   !   !   !   !   !   Child: 1  Op: + [line: 32]
!   !   !   !   !   !   !   !   !   Child: 0  Const: 2 [line: 32]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 3 [line: 32]
!   !   !   !   !   !   Child: 1  Op: * [line: 32]
!   !   !   !   !   !   !   Child: 0  Const: 4 [line: 32]
!   !   !   !   !   !   !   Child: 1  Const: 5 [line: 32]
!   !   !   !   !   Child: 1  Op: > [line: 32]
!   !   !   !   !   !   Child: 0  Op: + [line: 32]
!   !   !   !   !   !   !   Child: 0  Const: 6 [line: 32]
!   !   !   !   !   !   !   Child: 1  Const: 7 [line: 32]
!   !   !   !   !   !   Child: 1  Op: - [line: 32]
!   !   !   !   !   !   !   Child: 0  Const: 3 [line: 32]
!   !   Sibling: 15  If [line: 33]
!   !   !   Child: 0  Op: != [line: 33]
!   !   !   !   Child: 0  Id: shave [line: 33]
!   !   !   !   Child: 1  Id: close [line: 33]
!   !   !   Child: 1  Assign: = [line: 33]
!   !   !   !   Child: 0  Id: shave [line: 33]
!   !   !   !   Child: 1  Op: not [line: 33]
!   !   !   !   !   Child: 0  Id: close [line: 33]
!   !   Sibling: 16  If [line: 34]
!   !   !   Child: 0  Op: or [line: 34]
!   !   !   !   Child: 0  Op: not [line: 34]
!   !   !   !   !   Child: 0  Op: == [line: 34]
!   !   !   !   !   !   Child: 0  Id: shave [line: 34]
!   !   !   !   !   !   Child: 1  Id: close [line: 34]
!   !   !   !   Child: 1  Op: not [line: 34]
!   !   !   !   !   Child: 0  Id: close [line: 34]
!   !   !   Child: 1  Assign: = [line: 34]
!   !   !   !   Child: 0  Id: shave [line: 34]
!   !   !   !   Child: 1  Const: true [line: 34]
!   !   !   Child: 2  Assign: = [line: 35]
!   !   !   !   Child: 0  Id: close [line: 35]
!   !   !   !   Child: 1  Const: false [line: 35]
!   !   Sibling: 17  While [line: 36]
!   !   !   Child: 0  Id: shave [line: 36]
!   !   !   Child: 1  Compound [line: 36]
!   !   !   !   Child: 0  Var were of type int [line: 37]
!   !   !   !   Sibling: 0  Var rabbit of type int [line: 37]
!   !   !   !   Sibling: 1  Var sheep is array of type int [line: 38]
!   !   !   !   Child: 1  Assign: = [line: 40]
!   !   !   !   !   Child: 0  Op: [ [line: 40]
!   !   !   !   !   !   Child: 0  Id: sheep [line: 40]
!   !   !   !   !   !   Child: 1  Const: 2 [line: 40]
!   !   !   !   !   Child: 1  Const: 1618 [line: 40]
!   !   !   !   Sibling: 0  If [line: 41]
!   !   !   !   !   Child: 0  Op: < [line: 41]
!   !   !   !   !   !   Child: 0  Op: [ [line: 41]
!   !   !   !   !   !   !   Child: 0  Id: sheep [line: 41]
!   !   !   !   !   !   !   Child: 1  Const: 2 [line: 41]
!   !   !   !   !   !   Child: 1  Const: 496 [line: 41]
!   !   !   !   !   Child: 1  Break [line: 41]
!   !   !   !   Sibling: 1  Call: wallace [line: 42]
!   !   !   !   !   Child: 0  Assign: -- [line: 42]
!   !   !   !   !   !   Child: 0  Id: gromit [line: 42]
!   !   !   !   !   Sibling: 0  Op: - [line: 42]
!   !   !   !   !   !   Child: 0  Id: were [line: 42]
!   !   !   !   !   !   Child: 1  Id: rabbit [line: 42]
!   !   !   !   Sibling: 2  Compound [line: 43]
!   !   !   !   !   Child: 0  Var the of type int [line: 44]
!   !   !   !   !   Sibling: 0  Var wrong of type int [line: 44]
!   !   !   !   !   Sibling: 1  Var trousers of type int [line: 44]
!   !   !   !   !   Child: 1  Assign: = [line: 46]
!   !   !   !   !   !   Child: 0  Id: the [line: 46]
!   !   !   !   !   !   Child: 1  Assign: += [line: 46]
!   !   !   !   !   !   !   Child: 0  Id: wrong [line: 46]
!   !   !   !   !   !   !   Child: 1  Assign: ++ [line: 46]
!   !   !   !   !   !   !   !   Child: 0  Id: trousers [line: 46]
!   !   !   !   !   Sibling: 0  If [line: 47]
!   !   !   !   !   !   Child: 0  Op: == [line: 47]
!   !   !   !   !   !   !   Child: 0  Id: were [line: 47]
!   !   !   !   !   !   !   Child: 1  Id: rabbit [line: 47]
!   !   !   !   !   !   Child: 1  Assign: = [line: 47]
!   !   !   !   !   !   !   Child: 0  Id: were [line: 47]
!   !   !   !   !   !   !   Child: 1  Assign: -- [line: 47]
!   !   !   !   !   !   !   !   Child: 0  Id: wrong [line: 47]
!   !   Sibling: 18  Return [line: 51]
Sibling: 2  Func penguin returns type bool [line: 55]
!   Child: 0  Param Feathers of type char [line: 55]
!   Sibling: 0  Param McGraw is array of type char [line: 55]
!   Sibling: 1  Param moon of type bool [line: 55]
!   Sibling: 2  Param cheese of type bool [line: 55]
!   Sibling: 3  Param launch of type int [line: 55]
!   Child: 1  Compound [line: 56]
!   !   Child: 0  Var tottington of type char [line: 57]
!   !   !   Child: 0  Const: 'x' [line: 57]
!   !   Sibling: 0  Var Wensleydale is array of type char [line: 58]
!   !   Sibling: 1  Var c of type char [line: 59]
!   !   Sibling: 2  Var i of type int [line: 60]
!   !   Child: 1  Assign: = [line: 62]
!   !   !   Child: 0  Id: tottington [line: 62]
!   !   !   Child: 1  Id: Feathers [line: 62]
!   !   Sibling: 0  Assign: = [line: 63]
!   !   !   Child: 0  Op: [ [line: 63]
!   !   !   !   Child: 0  Id: Wensleydale [line: 63]
!   !   !   !   Child: 1  Op: * [line: 63]
!   !   !   !   !   Child: 0  Id: McGraw [line: 63]
!   !   !   Child: 1  Const: '*' [line: 63]
!   !   Sibling: 1  Assign: = [line: 64]
!   !   !   Child: 0  Op: [ [line: 64]
!   !   !   !   Child: 0  Id: McGraw [line: 64]
!   !   !   !   Child: 1  Const: 0 [line: 64]
!   !   !   Child: 1  Const: 'A' [line: 64]
!   !   Sibling: 2  Assign: = [line: 65]
!   !   !   Child: 0  Op: [ [line: 65]
!   !   !   !   Child: 0  Id: McGraw [line: 65]
!   !   !   !   Child: 1  Const: 1 [line: 65]
!   !   !   Child: 1  Id: Feathers [line: 65]
!   !   Sibling: 3  Compound [line: 67]
!   !   !   Child: 0  Var c of type char [line: 67]
!   !   !   Sibling: 0  Var in of type int [line: 68]
!   !   !   !   Child: 0  Const: 666 [line: 68]
!   !   !   Child: 1  If [line: 70]
!   !   !   !   Child: 0  Op: == [line: 70]
!   !   !   !   !   Child: 0  Op: [ [line: 70]
!   !   !   !   !   !   Child: 0  Id: McGraw [line: 70]
!   !   !   !   !   !   Child: 1  Id: in [line: 70]
!   !   !   !   !   Child: 1  Const: 'f' [line: 70]
!   !   !   !   Child: 1  Return [line: 70]
!   !   !   !   !   Child: 0  Const: true [line: 70]
Sibling: 3  Func Wendolene returns type int [line: 75]
!   Child: 0  Param wool of type int [line: 75]
!   Sibling: 0  Param shaun of type bool [line: 75]
!   Sibling: 1  Param yarn is array of type int [line: 75]
!   Sibling: 2  Param preston is array of type bool [line: 75]
!   Child: 1  Compound [line: 76]
!   !   Child: 0  Var void of type int [line: 77]
!   !   Child: 1  Return [line: 79]
!   !   !   Child: 0  Op: + [line: 79]
!   !   !   !   Child: 0  Op: + [line: 79]
!   !   !   !   !   Child: 0  Op: + [line: 79]
!   !   !   !   !   !   Child: 0  Id: wool [line: 79]
!   !   !   !   !   !   Child: 1  Op: [ [line: 79]
!   !   !   !   !   !   !   Child: 0  Id: yarn [line: 79]
!   !   !   !   !   !   !   Child: 1  Const: 0 [line: 79]
!   !   !   !   !   Child: 1  Op: * [line: 79]
!   !   !   !   !   !   Child: 0  Id: yarn [line: 79]
!   !   !   !   Child: 1  Op: [ [line: 79]
!   !   !   !   !   Child: 0  Id: yarn [line: 79]
!   !   !   !   !   Child: 1  Op: * [line: 79]
!   !   !   !   !   !   Child: 0  Const: 7 [line: 79]
!   !   !   !   !   !   Child: 1  Id: wool [line: 79]
Sibling: 4  Func ramsBottom returns type bool [line: 83]
!   Child: 1  Compound [line: 84]
!   !   Child: 0  Var chicken is array of type int [line: 85]
!   !   Sibling: 0  Var run is array of type bool [line: 86]
!   !   Sibling: 1  Var wallace is array of type int [line: 87]
!   !   Sibling: 2  Var gromit is array of type int [line: 87]
!   !   Child: 1  Op: * [line: 89]
!   !   !   Child: 0  Const: 42 [line: 89]
!   !   !   Child: 1  Call: Wendolene [line: 89]
!   !   !   !   Child: 0  Op: + [line: 89]
!   !   !   !   !   Child: 0  Op: + [line: 89]
!   !   !   !   !   !   Child: 0  Const: 1 [line: 89]
!   !   !   !   !   !   Child: 1  Const: 2 [line: 89]
!   !   !   !   !   Child: 1  Const: 3 [line: 89]
!   !   !   !   Sibling: 0  Op: or [line: 89]
!   !   !   !   !   Child: 0  Op: not [line: 89]
!   !   !   !   !   !   Child: 0  Const: true [line: 89]
!   !   !   !   !   Child: 1  Op: and [line: 89]
!   !   !   !   !   !   Child: 0  Const: true [line: 89]
!   !   !   !   !   !   Child: 1  Const: false [line: 89]
!   !   !   !   Sibling: 1  Id: chicken [line: 89]
!   !   !   !   Sibling: 2  Id: run [line: 89]
!   !   Sibling: 0  Op: [ [line: 90]
!   !   !   Child: 0  Id: run [line: 90]
!   !   !   Child: 1  Op: - [line: 90]
!   !   !   !   Child: 0  Op: * [line: 90]
!   !   !   !   !   Child: 0  Id: run [line: 90]
!   !   !   !   Child: 1  Const: 1 [line: 90]
!   !   Sibling: 1  Return [line: 92]
!   !   !   Child: 0  Op: not [line: 92]
!   !   !   !   Child: 0  Op: >= [line: 92]
!   !   !   !   !   Child: 0  Op: [ [line: 92]
!   !   !   !   !   !   Child: 0  Id: wallace [line: 92]
!   !   !   !   !   !   Child: 1  Const: 1 [line: 92]
!   !   !   !   !   Child: 1  Op: * [line: 92]
!   !   !   !   !   !   Child: 0  Op: - [line: 92]
!   !   !   !   !   !   !   Child: 0  Op: [ [line: 92]
!   !   !   !   !   !   !   !   Child: 0  Id: gromit [line: 92]
!   !   !   !   !   !   !   !   Child: 1  Const: 2 [line: 92]
!   !   !   !   !   !   Child: 1  Const: 3 [line: 92]
Sibling: 5  Func cheese returns type int [line: 95]
!   Child: 0  Param x of type int [line: 95]
!   Sibling: 0  Param y of type int [line: 95]
!   Child: 1  While [line: 95]
!   !   Child: 0  Op: > [line: 95]
!   !   !   Child: 0  Id: x [line: 95]
!   !   !   Child: 1  Const: 0 [line: 95]
!   !   Child: 1  If [line: 95]
!   !   !   Child: 0  Op: > [line: 95]
!   !   !   !   Child: 0  Id: y [line: 95]
!   !   !   !   Child: 1  Const: 3 [line: 95]
!   !   !   Child: 1  Assign: -- [line: 95]
!   !   !   !   Child: 0  Id: x [line: 95]
!   !   !   Child: 2  Return [line: 95]
!   !   !   !   Child: 0  Op: % [line: 95]
!   !   !   !   !   Child: 0  Op: * [line: 95]
!   !   !   !   !   !   Child: 0  Id: x [line: 95]
!   !   !   !   !   !   Child: 1  Id: x [line: 95]
!   !   !   !   !   Child: 1  Id: y [line: 95]
Sibling: 6  Func Wensleydale returns type int [line: 97]
!   Child: 0  Param x of type int [line: 97]
!   Sibling: 0  Param y of type int [line: 97]
!   Child: 1  Return [line: 97]
!   !   Child: 0  Call: cheese [line: 97]
!   !   !   Child: 0  Id: x [line: 97]
!   !   !   Sibling: 0  Id: gromit [line: 97]
Sibling: 7  Func main returns type int [line: 99]
!   Child: 1  Compound [line: 100]
!   !   Child: 0  Var wool of type int [line: 101]
!   !   Sibling: 0  Var yarn is array of type int [line: 101]
!   !   Sibling: 1  Var shaun of type bool [line: 102]
!   !   Sibling: 2  Var preston is array of type bool [line: 102]
!   !   Child: 1  Call: wallace [line: 104]
!   !   !   Child: 0  Call: cheese [line: 104]
!   !   !   !   Child: 0  Const: 62 [line: 104]
!   !   !   !   Sibling: 0  Op: - [line: 104]
!   !   !   !   !   Child: 0  Const: 311 [line: 104]
!   !   !   Sibling: 0  Id: gromit [line: 104]
!   !   Sibling: 0  Op: [ [line: 105]
!   !   !   Child: 0  Id: yarn [line: 105]
!   !   !   Child: 1  Op: ? [line: 105]
!   !   !   !   Child: 0  Op: * [line: 105]
!   !   !   !   !   Child: 0  Id: yarn [line: 105]
!   !   Sibling: 1  Return [line: 106]
!   !   !   Child: 0  Call: Wendolene [line: 106]
!   !   !   !   Child: 0  Op: * [line: 106]
!   !   !   !   !   Child: 0  Op: * [line: 106]
!   !   !   !   !   !   Child: 0  Id: preston [line: 106]
!   !   !   !   !   Child: 1  Op: * [line: 106]
!   !   !   !   !   !   Child: 0  Id: yarn [line: 106]
!   !   !   !   Sibling: 0  Id: shaun [line: 106]
!   !   !   !   Sibling: 1  Id: yarn [line: 106]
!   !   !   !   Sibling: 2  Id: preston [line: 106]
Sibling: 8  Var aBigLongVariableName6 of type bool [line: 109]
Sibling: 9  Var ca9s of type bool [line: 109]
Sibling: 10  Var h8en of type bool [line: 109]
Sibling: 11  Var bay1t of type bool [line: 109]
Sibling: 12  Var drif2od of type bool [line: 109]
Sibling: 13  Var l00ps of type bool [line: 109]
Sibling: 14  Var odd of type int [line: 110]
Sibling: 15  Var separation of type int [line: 110]
Sibling: 16  Var of of type int [line: 110]
Sibling: 17  Var stuff of type int [line: 111]
Sibling: 18  Var dog of type char [line: 113]
!   Child: 0  Const: 't' [line: 113]
Sibling: 19  Record Point  [line: 115]
!   Child: 0  Var defined of type bool [line: 116]
!   Sibling: 0  Var x of type int [line: 117]
!   Sibling: 1  Var y of type int [line: 117]
Sibling: 20  Record Line  [line: 120]
!   Child: 0  Var x of type record [line: 121]
!   Sibling: 0  Var y of type record [line: 121]
Sibling: 21  Var p of type record [line: 124]
Sibling: 22  Var q of type record [line: 124]
Sibling: 23  Var l of type record [line: 125]
Sibling: 24  Func setp returns type void [line: 127]
!   Child: 0  Param p of type record [line: 127]
!   Sibling: 0  Param x is array of type int [line: 127]
!   Sibling: 1  Param y of type int [line: 127]
!   Sibling: 2  Param P is array of type record [line: 127]
!   Sibling: 3  Param l of type record [line: 127]
!   Child: 1  Compound [line: 127]
!   !   Child: 1  Op: [ [line: 128]
!   !   !   Child: 0  Id: x [line: 128]
!   !   !   Child: 1  Const: 666 [line: 128]
!   !   Sibling: 0  Op: . [line: 129]
!   !   !   Child: 0  Id: p [line: 129]
!   !   !   Child: 1  Id: x [line: 129]
!   !   Sibling: 1  Op: . [line: 130]
!   !   !   Child: 0  Op: . [line: 130]
!   !   !   !   Child: 0  Id: p [line: 130]
!   !   !   !   Child: 1  Id: x [line: 130]
!   !   !   Child: 1  Id: y [line: 130]
!   !   Sibling: 2  Op: . [line: 131]
!   !   !   Child: 0  Op: [ [line: 131]
!   !   !   !   Child: 0  Id: P [line: 131]
!   !   !   !   Child: 1  Const: 666 [line: 131]
!   !   !   Child: 1  Id: y [line: 131]
!   !   Sibling: 3  Op: [ [line: 132]
!   !   !   Child: 0  Op: . [line: 132]
!   !   !   !   Child: 0  Id: p [line: 132]
!   !   !   !   Child: 1  Id: x [line: 132]
!   !   !   Child: 1  Const: 666 [line: 132]
!   !   Sibling: 4  Assign: = [line: 133]
!   !   !   Child: 0  Op: . [line: 133]
!   !   !   !   Child: 0  Op: . [line: 133]
!   !   !   !   !   Child: 0  Id: l [line: 133]
!   !   !   !   !   Child: 1  Id: x [line: 133]
!   !   !   !   Child: 1  Id: x [line: 133]
!   !   !   Child: 1  Const: 42 [line: 133]
!   !   Sibling: 5  Assign: = [line: 134]
!   !   !   Child: 0  Op: [ [line: 134]
!   !   !   !   Child: 0  Op: [ [line: 134]
!   !   !   !   !   Child: 0  Id: x [line: 134]
!   !   !   !   !   Child: 1  Const: 3 [line: 134]
!   !   !   !   Child: 1  Const: 3 [line: 134]
!   !   !   Child: 1  Op: . [line: 134]
!   !   !   !   Child: 0  Id: x [line: 134]
!   !   !   !   Child: 1  Id: notvalid [line: 134]
Number of warnings: 0
Number of errors: 0
