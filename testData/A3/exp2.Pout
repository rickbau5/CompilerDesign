ERROR(11): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(12): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(13): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(15): '*' requires operands of type int but rhs is of type bool.
ERROR(15): '*' requires operands of type int but lhs is of type bool.
ERROR(15): '+' requires operands of type int but lhs is of type bool.
ERROR(15): '+' requires operands of type int but rhs is of type bool.
ERROR(15): '*' requires operands of type int but lhs is of type bool.
ERROR(15): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(16): '/' requires operands of type int but rhs is of type bool.
ERROR(16): '/' requires operands of type int but lhs is of type bool.
ERROR(16): '-' requires operands of type int but lhs is of type bool.
ERROR(16): '-' requires operands of type int but rhs is of type bool.
ERROR(16): '/' requires operands of type int but lhs is of type bool.
ERROR(16): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(17): '/' requires operands of type int but rhs is of type bool.
ERROR(17): '/' requires operands of type int but lhs is of type bool.
ERROR(17): '%' requires operands of type int but rhs is of type bool.
ERROR(17): '%' requires operands of type int but lhs is of type bool.
ERROR(17): '%' requires operands of type int but rhs is of type bool.
ERROR(17): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(22): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(23): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(25): 'and' requires operands of type bool but rhs is of type int.
ERROR(25): 'and' requires operands of type bool but lhs is of type int.
ERROR(25): 'and' requires operands of type bool but rhs is of type int.
ERROR(25): 'or' requires operands of type bool but lhs is of type int.
ERROR(25): 'and' requires operands of type bool but lhs is of type int.
ERROR(25): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(26): Unary 'not' requires an operand of type type bool but was given type int.
ERROR(26): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(36): Symbol 'x' is not defined.
ERROR(37): Symbol 'x' is not defined.
ERROR(39): '+' requires operands of type int but lhs is of type bool.
ERROR(39): '+' requires operands of type int but rhs is of type bool.
ERROR(39): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(40): Symbol 'x' is not defined.
ERROR(40): '*' requires operands of type int but lhs is of type bool.
ERROR(40): '*' requires operands of type int but rhs is of type bool.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '*' requires operands of type int but lhs is of type bool.
ERROR(40): Symbol 'x' is not defined.
ERROR(40): '+' requires operands of type int but lhs is of type bool.
ERROR(40): '+' requires operands of type int but rhs is of type bool.
ERROR(43): '=' requires operands of the same type but lhs is type bool and rhs is type int.
Var g of type bool [type bool] [line: 3]
Sibling: 0  Func main returns type void [type void] [line: 5]
!   Child: 1  Compound [type void] [line: 6]
!   !   Child: 1  Compound [type void] [line: 7]
!   !   !   Child: 0  Var x of type bool [type bool] [line: 8]
!   !   !   Sibling: 0  Var y of type bool [type bool] [line: 9]
!   !   !   Child: 1  Assign: = [type bool] [line: 11]
!   !   !   !   Child: 0  Id: x [type bool] [line: 11]
!   !   !   !   Child: 1  Const: 11 [type int] [line: 11]
!   !   !   Sibling: 0  Assign: = [type bool] [line: 12]
!   !   !   !   Child: 0  Id: y [type bool] [line: 12]
!   !   !   !   Child: 1  Const: 12 [type int] [line: 12]
!   !   !   Sibling: 1  Assign: = [type bool] [line: 13]
!   !   !   !   Child: 0  Id: g [type bool] [line: 13]
!   !   !   !   Child: 1  Const: 13 [type int] [line: 13]
!   !   !   Sibling: 2  Assign: = [type bool] [line: 15]
!   !   !   !   Child: 0  Id: x [type bool] [line: 15]
!   !   !   !   Child: 1  Op: + [type int] [line: 15]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 15]
!   !   !   !   !   !   Child: 0  Op: + [type int] [line: 15]
!   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 15]
!   !   !   !   !   !   !   Child: 1  Op: * [type int] [line: 15]
!   !   !   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 15]
!   !   !   !   !   !   !   !   Child: 1  Id: x [type bool] [line: 15]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 15]
!   !   !   !   !   !   !   Child: 0  Id: y [type bool] [line: 15]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 15]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 15]
!   !   !   !   !   !   Child: 0  Id: x [type bool] [line: 15]
!   !   !   !   !   !   Child: 1  Op: + [type int] [line: 15]
!   !   !   !   !   !   !   Child: 0  Id: y [type bool] [line: 15]
!   !   !   !   !   !   !   Child: 1  Id: g [type bool] [line: 15]
!   !   !   Sibling: 3  Assign: = [type bool] [line: 16]
!   !   !   !   Child: 0  Id: x [type bool] [line: 16]
!   !   !   !   Child: 1  Op: - [type int] [line: 16]
!   !   !   !   !   Child: 0  Op: - [type int] [line: 16]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 16]
!   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 16]
!   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 16]
!   !   !   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 16]
!   !   !   !   !   !   !   !   Child: 1  Id: x [type bool] [line: 16]
!   !   !   !   !   !   Child: 1  Op: / [type int] [line: 16]
!   !   !   !   !   !   !   Child: 0  Id: y [type bool] [line: 16]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 16]
!   !   !   !   !   Child: 1  Op: / [type int] [line: 16]
!   !   !   !   !   !   Child: 0  Id: x [type bool] [line: 16]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 16]
!   !   !   !   !   !   !   Child: 0  Id: y [type bool] [line: 16]
!   !   !   !   !   !   !   Child: 1  Id: g [type bool] [line: 16]
!   !   !   Sibling: 4  Assign: = [type bool] [line: 17]
!   !   !   !   Child: 0  Id: x [type bool] [line: 17]
!   !   !   !   Child: 1  Op: / [type int] [line: 17]
!   !   !   !   !   Child: 0  Op: % [type int] [line: 17]
!   !   !   !   !   !   Child: 0  Op: / [type int] [line: 17]
!   !   !   !   !   !   !   Child: 0  Op: % [type int] [line: 17]
!   !   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 17]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 17]
!   !   !   !   !   !   !   Child: 1  Id: x [type bool] [line: 17]
!   !   !   !   !   !   Child: 1  Op: % [type int] [line: 17]
!   !   !   !   !   !   !   Child: 0  Op: / [type int] [line: 17]
!   !   !   !   !   !   !   !   Child: 0  Id: y [type bool] [line: 17]
!   !   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 17]
!   !   !   !   !   !   !   Child: 1  Id: x [type bool] [line: 17]
!   !   !   !   !   Child: 1  Op: % [type int] [line: 17]
!   !   !   !   !   !   Child: 0  Id: y [type bool] [line: 17]
!   !   !   !   !   !   Child: 1  Id: g [type bool] [line: 17]
!   !   Sibling: 0  Compound [type void] [line: 19]
!   !   !   Child: 0  Var x of type int [type int] [line: 20]
!   !   !   Sibling: 0  Var y of type int [type int] [line: 20]
!   !   !   Sibling: 1  Var z is array of type int [type int] [line: 20]
!   !   !   Child: 1  Assign: = [type int] [line: 22]
!   !   !   !   Child: 0  Id: x [type int] [line: 22]
!   !   !   !   Child: 1  Const: true [type bool] [line: 22]
!   !   !   Sibling: 0  Assign: = [type int] [line: 23]
!   !   !   !   Child: 0  Id: y [type int] [line: 23]
!   !   !   !   Child: 1  Const: false [type bool] [line: 23]
!   !   !   Sibling: 1  Assign: = [type int] [line: 25]
!   !   !   !   Child: 0  Id: x [type int] [line: 25]
!   !   !   !   Child: 1  Op: or [type bool] [line: 25]
!   !   !   !   !   Child: 0  Op: or [type bool] [line: 25]
!   !   !   !   !   !   Child: 0  Op: or [type bool] [line: 25]
!   !   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 25]
!   !   !   !   !   !   !   Child: 1  Op: and [type bool] [line: 25]
!   !   !   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 25]
!   !   !   !   !   !   !   !   Child: 1  Id: x [type int] [line: 25]
!   !   !   !   !   !   Child: 1  Op: and [type bool] [line: 25]
!   !   !   !   !   !   !   Child: 0  Id: y [type int] [line: 25]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 25]
!   !   !   !   !   Child: 1  Op: and [type bool] [line: 25]
!   !   !   !   !   !   Child: 0  Id: x [type int] [line: 25]
!   !   !   !   !   !   Child: 1  Op: or [type bool] [line: 25]
!   !   !   !   !   !   !   Child: 0  Id: y [type int] [line: 25]
!   !   !   !   !   !   !   Child: 1  Id: g [type bool] [line: 25]
!   !   !   Sibling: 2  Assign: = [type int] [line: 26]
!   !   !   !   Child: 0  Id: x [type int] [line: 26]
!   !   !   !   Child: 1  Op: or [type bool] [line: 26]
!   !   !   !   !   Child: 0  Op: not [type bool] [line: 26]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 26]
!   !   !   !   !   Child: 1  Op: not [type bool] [line: 26]
!   !   !   !   !   !   Child: 0  Op: not [type bool] [line: 26]
!   !   !   !   !   !   !   Child: 0  Id: x [type int] [line: 26]
!   !   !   Sibling: 3  Assign: = [type int] [line: 28]
!   !   !   !   Child: 0  Id: x [type int] [line: 28]
!   !   !   !   Child: 1  Op: [ [type int] [line: 28]
!   !   !   !   !   Child: 0  Id: z [type int] [line: 28]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 28]
!   !   !   Sibling: 4  Assign: = [type int] [line: 29]
!   !   !   !   Child: 0  Op: [ [type int] [line: 29]
!   !   !   !   !   Child: 0  Id: z [type int] [line: 29]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 29]
!   !   !   !   Child: 1  Id: x [type int] [line: 29]
!   !   !   Sibling: 5  Assign: = [type int] [line: 30]
!   !   !   !   Child: 0  Op: [ [type int] [line: 30]
!   !   !   !   !   Child: 0  Id: z [type int] [line: 30]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 30]
!   !   !   !   Child: 1  Op: [ [type int] [line: 30]
!   !   !   !   !   Child: 0  Id: z [type int] [line: 30]
!   !   !   !   !   Child: 1  Const: 2 [type int] [line: 30]
!   !   !   Sibling: 6  Assign: = [type int] [line: 31]
!   !   !   !   Child: 0  Op: [ [type int] [line: 31]
!   !   !   !   !   Child: 0  Id: z [type int] [line: 31]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 31]
!   !   !   !   Child: 1  Op: + [type int] [line: 31]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 31]
!   !   !   !   !   !   Child: 0  Id: z [type int] [line: 31]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 31]
!   !   !   !   !   Child: 1  Op: [ [type int] [line: 31]
!   !   !   !   !   !   Child: 0  Id: z [type int] [line: 31]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 31]
!   !   Sibling: 1  Compound [type void] [line: 33]
!   !   !   Child: 0  Var z is array of type bool [type bool] [line: 34]
!   !   !   Child: 1  Assign: = [undefined type] [line: 36]
!   !   !   !   Child: 0  Id: x [undefined type] [line: 36]
!   !   !   !   Child: 1  Op: [ [type bool] [line: 36]
!   !   !   !   !   Child: 0  Id: z [type bool] [line: 36]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 36]
!   !   !   Sibling: 0  Assign: = [type bool] [line: 37]
!   !   !   !   Child: 0  Op: [ [type bool] [line: 37]
!   !   !   !   !   Child: 0  Id: z [type bool] [line: 37]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 37]
!   !   !   !   Child: 1  Id: x [undefined type] [line: 37]
!   !   !   Sibling: 1  Assign: = [type bool] [line: 38]
!   !   !   !   Child: 0  Op: [ [type bool] [line: 38]
!   !   !   !   !   Child: 0  Id: z [type bool] [line: 38]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 38]
!   !   !   !   Child: 1  Op: [ [type bool] [line: 38]
!   !   !   !   !   Child: 0  Id: z [type bool] [line: 38]
!   !   !   !   !   Child: 1  Const: 2 [type int] [line: 38]
!   !   !   Sibling: 2  Assign: = [type bool] [line: 39]
!   !   !   !   Child: 0  Op: [ [type bool] [line: 39]
!   !   !   !   !   Child: 0  Id: z [type bool] [line: 39]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 39]
!   !   !   !   Child: 1  Op: + [type int] [line: 39]
!   !   !   !   !   Child: 0  Op: [ [type bool] [line: 39]
!   !   !   !   !   !   Child: 0  Id: z [type bool] [line: 39]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 39]
!   !   !   !   !   Child: 1  Op: [ [type bool] [line: 39]
!   !   !   !   !   !   Child: 0  Id: z [type bool] [line: 39]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 39]
!   !   !   Sibling: 3  Assign: = [undefined type] [line: 40]
!   !   !   !   Child: 0  Id: x [undefined type] [line: 40]
!   !   !   !   Child: 1  Op: + [type int] [line: 40]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 40]
!   !   !   !   !   !   Child: 0  Op: + [type int] [line: 40]
!   !   !   !   !   !   !   Child: 0  Op: [ [type bool] [line: 40]
!   !   !   !   !   !   !   !   Child: 0  Id: z [type bool] [line: 40]
!   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 40]
!   !   !   !   !   !   !   Child: 1  Op: * [type int] [line: 40]
!   !   !   !   !   !   !   !   Child: 0  Op: [ [type bool] [line: 40]
!   !   !   !   !   !   !   !   !   Child: 0  Id: z [type bool] [line: 40]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 40]
!   !   !   !   !   !   !   !   Child: 1  Op: [ [type bool] [line: 40]
!   !   !   !   !   !   !   !   !   Child: 0  Id: z [type bool] [line: 40]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 40]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 40]
!   !   !   !   !   !   !   Child: 0  Op: [ [type bool] [line: 40]
!   !   !   !   !   !   !   !   Child: 0  Id: z [type bool] [line: 40]
!   !   !   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 40]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 40]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 40]
!   !   !   !   !   !   Child: 0  Id: x [undefined type] [line: 40]
!   !   !   !   !   !   Child: 1  Op: + [type int] [line: 40]
!   !   !   !   !   !   !   Child: 0  Op: [ [type bool] [line: 40]
!   !   !   !   !   !   !   !   Child: 0  Id: z [type bool] [line: 40]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 40]
!   !   !   !   !   !   !   Child: 1  Id: g [type bool] [line: 40]
!   !   Sibling: 2  Assign: = [type bool] [line: 43]
!   !   !   Child: 0  Id: g [type bool] [line: 43]
!   !   !   Child: 1  Assign: = [type bool] [line: 43]
!   !   !   !   Child: 0  Id: g [type bool] [line: 43]
!   !   !   !   Child: 1  Assign: = [type bool] [line: 43]
!   !   !   !   !   Child: 0  Id: g [type bool] [line: 43]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 43]
Number of warnings: 0
Number of errors: 45
