Var gromit of type int [type int] [line: 6]
Sibling: 0  Func wallace returns type void [type void] [line: 8]
!   Child: 0  Param wrong of type int [type int] [line: 8]
!   Sibling: 0  Param trousers of type int [type int] [line: 8]
!   Child: 1  Compound [type void] [line: 9]
!   !   Child: 0  Var close of type bool [type bool] [line: 10]
!   !   !   Child: 0  Const: true [type bool] [line: 10]
!   !   Sibling: 0  Var shave of type bool [type bool] [line: 10]
!   !   !   Child: 0  Const: false [type bool] [line: 10]
!   !   Child: 1  Const: 1729 [type int] [line: 12]
!   !   Sibling: 0  Id: close [type bool] [line: 13]
!   !   Sibling: 1  Op: + [type int] [line: 14]
!   !   !   Child: 0  Op: * [type int] [line: 14]
!   !   !   !   Child: 0  Const: 11 [type int] [line: 14]
!   !   !   !   Child: 1  Const: 22 [type int] [line: 14]
!   !   !   Child: 1  Op: * [type int] [line: 14]
!   !   !   !   Child: 0  Const: 33 [type int] [line: 14]
!   !   !   !   Child: 1  Const: 44 [type int] [line: 14]
!   !   Sibling: 2  Assign: = [type bool] [line: 15]
!   !   !   Child: 0  Id: close [type bool] [line: 15]
!   !   !   Child: 1  Id: shave [type bool] [line: 15]
!   !   Sibling: 3  Assign: = [type int] [line: 16]
!   !   !   Child: 0  Id: wrong [type int] [line: 16]
!   !   !   Child: 1  Op: % [type int] [line: 16]
!   !   !   !   Child: 0  Id: trousers [type int] [line: 16]
!   !   !   !   Child: 1  Op: / [type int] [line: 16]
!   !   !   !   !   Child: 0  Const: 666 [type int] [line: 16]
!   !   !   !   !   Child: 1  Id: wrong [type int] [line: 16]
!   !   Sibling: 4  Assign: = [type int] [line: 17]
!   !   !   Child: 0  Id: gromit [type int] [line: 17]
!   !   !   Child: 1  Op: + [type int] [line: 17]
!   !   !   !   Child: 0  Op: - [type int] [line: 17]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 17]
!   !   !   !   !   !   Child: 0  Id: wrong [type int] [line: 17]
!   !   !   !   !   !   Child: 1  Id: trousers [type int] [line: 17]
!   !   !   !   !   Child: 1  Id: gromit [type int] [line: 17]
!   !   !   !   Child: 1  Op: - [type int] [line: 17]
!   !   !   !   !   Child: 0  Const: 42 [type int] [line: 17]
!   !   Sibling: 5  Assign: += [type int] [line: 18]
!   !   !   Child: 0  Id: gromit [type int] [line: 18]
!   !   !   Child: 1  Const: 27182818 [type int] [line: 18]
!   !   Sibling: 6  Assign: -= [type int] [line: 19]
!   !   !   Child: 0  Id: gromit [type int] [line: 19]
!   !   !   Child: 1  Op: - [type int] [line: 19]
!   !   !   !   Child: 0  Const: 31415927 [type int] [line: 19]
!   !   Sibling: 7  Assign: /= [type int] [line: 20]
!   !   !   Child: 0  Id: gromit [type int] [line: 20]
!   !   !   Child: 1  Assign: *= [type int] [line: 20]
!   !   !   !   Child: 0  Id: wrong [type int] [line: 20]
!   !   !   !   Child: 1  Const: 42 [type int] [line: 20]
!   !   Sibling: 8  Assign: = [type bool] [line: 21]
!   !   !   Child: 0  Id: close [type bool] [line: 21]
!   !   !   Child: 1  Op: and [type bool] [line: 21]
!   !   !   !   Child: 0  Op: < [type bool] [line: 21]
!   !   !   !   !   Child: 0  Id: wrong [type int] [line: 21]
!   !   !   !   !   Child: 1  Id: trousers [type int] [line: 21]
!   !   !   !   Child: 1  Op: <= [type bool] [line: 21]
!   !   !   !   !   Child: 0  Id: trousers [type int] [line: 21]
!   !   !   !   !   Child: 1  Id: gromit [type int] [line: 21]
!   !   Sibling: 9  Assign: = [type bool] [line: 22]
!   !   !   Child: 0  Id: shave [type bool] [line: 22]
!   !   !   Child: 1  Op: and [type bool] [line: 22]
!   !   !   !   Child: 0  Op: > [type bool] [line: 22]
!   !   !   !   !   Child: 0  Id: wrong [type int] [line: 22]
!   !   !   !   !   Child: 1  Id: trousers [type int] [line: 22]
!   !   !   !   Child: 1  Op: >= [type bool] [line: 22]
!   !   !   !   !   Child: 0  Id: trousers [type int] [line: 22]
!   !   !   !   !   Child: 1  Id: gromit [type int] [line: 22]
!   !   Sibling: 10  Compound [type void] [line: 23]
!   !   !   Child: 0  Var a of type int [type int] [line: 24]
!   !   !   Sibling: 0  Var grand of type int [type int] [line: 24]
!   !   !   !   Child: 0  Op: / [type int] [line: 24]
!   !   !   !   !   Child: 0  Const: 1 [type int] [line: 24]
!   !   !   !   !   Child: 1  Const: 2 [type int] [line: 24]
!   !   !   Sibling: 1  Var day of type int [type int] [line: 24]
!   !   !   !   Child: 0  Op: * [type int] [line: 24]
!   !   !   !   !   Child: 0  Const: 3 [type int] [line: 24]
!   !   !   !   !   Child: 1  Const: 4 [type int] [line: 24]
!   !   !   Sibling: 2  Var out of type int [type int] [line: 24]
!   !   !   !   Child: 0  Op: - [type int] [line: 24]
!   !   !   !   !   Child: 0  Const: 9 [type int] [line: 24]
!   !   !   Child: 1  Assign: = [type int] [line: 25]
!   !   !   !   Child: 0  Id: a [type int] [line: 25]
!   !   !   !   Child: 1  Assign: += [type int] [line: 25]
!   !   !   !   !   Child: 0  Id: grand [type int] [line: 25]
!   !   !   !   !   Child: 1  Assign: -= [type int] [line: 25]
!   !   !   !   !   !   Child: 0  Id: day [type int] [line: 25]
!   !   !   !   !   !   Child: 1  Id: out [type int] [line: 25]
!   !   Sibling: 11  Assign: = [type bool] [line: 27]
!   !   !   Child: 0  Id: close [type bool] [line: 27]
!   !   !   Child: 1  Op: and [type bool] [line: 27]
!   !   !   !   Child: 0  Op: < [type bool] [line: 27]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Op: * [type int] [line: 27]
!   !   !   !   !   !   !   Child: 0  Op: - [type int] [line: 27]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 27]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 27]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 27]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 27]
!   !   !   !   !   !   Child: 1  Const: 5 [type int] [line: 27]
!   !   !   !   Child: 1  Op: > [type bool] [line: 27]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Const: 6 [type int] [line: 27]
!   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 27]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 27]
!   !   Sibling: 12  Assign: = [type bool] [line: 28]
!   !   !   Child: 0  Id: shave [type bool] [line: 28]
!   !   !   Child: 1  Op: or [type bool] [line: 28]
!   !   !   !   Child: 0  Const: true [type bool] [line: 28]
!   !   !   !   Child: 1  Op: and [type bool] [line: 28]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 28]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 28]
!   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 28]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 28]
!   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 28]
!   !   !   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 28]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 28]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 28]
!   !   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 28]
!   !   !   !   !   !   !   Child: 1  Const: 5 [type int] [line: 28]
!   !   !   !   !   Child: 1  Op: > [type bool] [line: 28]
!   !   !   !   !   !   Child: 0  Op: + [type int] [line: 28]
!   !   !   !   !   !   !   Child: 0  Const: 6 [type int] [line: 28]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 28]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 28]
!   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 28]
!   !   Sibling: 13  If [type void] [line: 29]
!   !   !   Child: 0  Op: != [type bool] [line: 29]
!   !   !   !   Child: 0  Id: shave [type bool] [line: 29]
!   !   !   !   Child: 1  Id: close [type bool] [line: 29]
!   !   !   Child: 1  Assign: = [type bool] [line: 29]
!   !   !   !   Child: 0  Id: shave [type bool] [line: 29]
!   !   !   !   Child: 1  Op: not [type bool] [line: 29]
!   !   !   !   !   Child: 0  Id: close [type bool] [line: 29]
!   !   Sibling: 14  If [type void] [line: 30]
!   !   !   Child: 0  Op: or [type bool] [line: 30]
!   !   !   !   Child: 0  Op: not [type bool] [line: 30]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 30]
!   !   !   !   !   !   Child: 0  Id: shave [type bool] [line: 30]
!   !   !   !   !   !   Child: 1  Id: close [type bool] [line: 30]
!   !   !   !   Child: 1  Op: not [type bool] [line: 30]
!   !   !   !   !   Child: 0  Id: close [type bool] [line: 30]
!   !   !   Child: 1  Assign: = [type bool] [line: 30]
!   !   !   !   Child: 0  Id: shave [type bool] [line: 30]
!   !   !   !   Child: 1  Const: true [type bool] [line: 30]
!   !   !   Child: 2  Assign: = [type bool] [line: 31]
!   !   !   !   Child: 0  Id: close [type bool] [line: 31]
!   !   !   !   Child: 1  Const: false [type bool] [line: 31]
!   !   Sibling: 15  While [type void] [line: 32]
!   !   !   Child: 0  Id: shave [type bool] [line: 32]
!   !   !   Child: 1  Compound [type void] [line: 32]
!   !   !   !   Child: 0  Var were of type int [type int] [line: 33]
!   !   !   !   Sibling: 0  Var rabbit of type int [type int] [line: 33]
!   !   !   !   Sibling: 1  Var sheep is array of type int [type int] [line: 34]
!   !   !   !   Child: 1  Assign: = [type int] [line: 36]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 36]
!   !   !   !   !   !   Child: 0  Id: sheep [type int] [line: 36]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 36]
!   !   !   !   !   Child: 1  Const: 1618 [type int] [line: 36]
!   !   !   !   Sibling: 0  If [type void] [line: 37]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 37]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 37]
!   !   !   !   !   !   !   Child: 0  Id: sheep [type int] [line: 37]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 37]
!   !   !   !   !   !   Child: 1  Const: 496 [type int] [line: 37]
!   !   !   !   !   Child: 1  Break [type void] [line: 37]
!   !   !   !   Sibling: 1  Call: wallace [type void] [line: 38]
!   !   !   !   !   Child: 0  Assign: -- [undefined type] [line: 38]
!   !   !   !   !   !   Child: 0  Id: gromit [undefined type] [line: 38]
!   !   !   !   !   Sibling: 0  Op: - [undefined type] [line: 38]
!   !   !   !   !   !   Child: 0  Id: were [undefined type] [line: 38]
!   !   !   !   !   !   Child: 1  Id: rabbit [undefined type] [line: 38]
!   !   !   !   Sibling: 2  Compound [type void] [line: 39]
!   !   !   !   !   Child: 0  Var the of type int [type int] [line: 40]
!   !   !   !   !   Sibling: 0  Var wrong of type int [type int] [line: 40]
!   !   !   !   !   Sibling: 1  Var trousers of type int [type int] [line: 40]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 42]
!   !   !   !   !   !   Child: 0  Id: the [type int] [line: 42]
!   !   !   !   !   !   Child: 1  Assign: += [type int] [line: 42]
!   !   !   !   !   !   !   Child: 0  Id: wrong [type int] [line: 42]
!   !   !   !   !   !   !   Child: 1  Assign: ++ [type int] [line: 42]
!   !   !   !   !   !   !   !   Child: 0  Id: trousers [type int] [line: 42]
!   !   !   !   !   Sibling: 0  If [type void] [line: 43]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 43]
!   !   !   !   !   !   !   Child: 0  Id: were [type int] [line: 43]
!   !   !   !   !   !   !   Child: 1  Id: rabbit [type int] [line: 43]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 43]
!   !   !   !   !   !   !   Child: 0  Id: were [type int] [line: 43]
!   !   !   !   !   !   !   Child: 1  Assign: -- [type int] [line: 43]
!   !   !   !   !   !   !   !   Child: 0  Id: wrong [type int] [line: 43]
!   !   Sibling: 16  Return [type void] [line: 46]
Sibling: 1  Func penguin returns type bool [type bool] [line: 50]
!   Child: 0  Param Feathers of type char [type char] [line: 50]
!   Sibling: 0  Param McGraw is array of type char [type char] [line: 50]
!   Sibling: 1  Param moon of type bool [type bool] [line: 50]
!   Sibling: 2  Param cheese of type bool [type bool] [line: 50]
!   Sibling: 3  Param launch of type int [type int] [line: 50]
!   Child: 1  Compound [type void] [line: 51]
!   !   Child: 0  Var tottington of type char [type char] [line: 52]
!   !   !   Child: 0  Const: 'x' [type char] [line: 52]
!   !   Sibling: 0  Var Wensleydale is array of type char [type char] [line: 53]
!   !   Sibling: 1  Var c of type char [type char] [line: 54]
!   !   Sibling: 2  Var i of type int [type int] [line: 55]
!   !   Child: 1  Assign: = [type char] [line: 57]
!   !   !   Child: 0  Id: tottington [type char] [line: 57]
!   !   !   Child: 1  Id: Feathers [type char] [line: 57]
!   !   Sibling: 0  Assign: = [type char] [line: 58]
!   !   !   Child: 0  Op: [ [type char] [line: 58]
!   !   !   !   Child: 0  Id: McGraw [type char] [line: 58]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 58]
!   !   !   Child: 1  Id: Feathers [type char] [line: 58]
!   !   Sibling: 1  Assign: = [type char] [line: 59]
!   !   !   Child: 0  Id: Wensleydale [type char] [line: 59]
!   !   !   Child: 1  Id: McGraw [type char] [line: 59]
!   !   Sibling: 2  Assign: = [type char] [line: 60]
!   !   !   Child: 0  Op: [ [type char] [line: 60]
!   !   !   !   Child: 0  Id: Wensleydale [type char] [line: 60]
!   !   !   !   Child: 1  Op: * [type int] [line: 60]
!   !   !   !   !   Child: 0  Id: McGraw [type char] [line: 60]
!   !   !   Child: 1  Const: '*' [type char] [line: 60]
Sibling: 2  Func Wendolene returns type int [type int] [line: 63]
!   Child: 0  Param wool of type int [type int] [line: 63]
!   Sibling: 0  Param shaun of type bool [type bool] [line: 63]
!   Sibling: 1  Param yarn is array of type int [type int] [line: 63]
!   Sibling: 2  Param preston is array of type bool [type bool] [line: 63]
!   Child: 1  Compound [type void] [line: 64]
!   !   Child: 0  Var void of type int [type int] [line: 65]
!   !   Child: 1  Return [type void] [line: 66]
!   !   !   Child: 0  Op: + [type int] [line: 66]
!   !   !   !   Child: 0  Op: + [type int] [line: 66]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 66]
!   !   !   !   !   !   Child: 0  Id: wool [type int] [line: 66]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 66]
!   !   !   !   !   !   !   Child: 0  Id: yarn [type int] [line: 66]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 66]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 66]
!   !   !   !   !   !   Child: 0  Id: yarn [type int] [line: 66]
!   !   !   !   Child: 1  Op: [ [type int] [line: 66]
!   !   !   !   !   Child: 0  Id: yarn [type int] [line: 66]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 66]
!   !   !   !   !   !   Child: 0  Const: 7 [type int] [line: 66]
!   !   !   !   !   !   Child: 1  Id: wool [type int] [line: 66]
Sibling: 3  Func ramsBottom returns type bool [type bool] [line: 70]
!   Child: 1  Compound [type void] [line: 71]
!   !   Child: 0  Var chicken is array of type int [type int] [line: 72]
!   !   Sibling: 0  Var run is array of type bool [type bool] [line: 73]
!   !   Sibling: 1  Var wallace is array of type int [type int] [line: 74]
!   !   Sibling: 2  Var gromit is array of type int [type int] [line: 74]
!   !   Child: 1  Op: * [type int] [line: 76]
!   !   !   Child: 0  Const: 42 [type int] [line: 76]
!   !   !   Child: 1  Call: Wendolene [type int] [line: 76]
!   !   !   !   Child: 0  Op: + [undefined type] [line: 76]
!   !   !   !   !   Child: 0  Op: + [undefined type] [line: 76]
!   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 76]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 76]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 76]
!   !   !   !   Sibling: 0  Op: or [undefined type] [line: 76]
!   !   !   !   !   Child: 0  Op: not [undefined type] [line: 76]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 76]
!   !   !   !   !   Child: 1  Op: and [undefined type] [line: 76]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 76]
!   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 76]
!   !   !   !   Sibling: 1  Id: chicken [undefined type] [line: 76]
!   !   !   !   Sibling: 2  Id: run [undefined type] [line: 76]
!   !   Sibling: 0  Op: [ [type bool] [line: 77]
!   !   !   Child: 0  Id: run [type bool] [line: 77]
!   !   !   Child: 1  Op: - [type int] [line: 77]
!   !   !   !   Child: 0  Op: * [type int] [line: 77]
!   !   !   !   !   Child: 0  Id: run [type bool] [line: 77]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 77]
!   !   Sibling: 1  Return [type void] [line: 79]
!   !   !   Child: 0  Op: not [type bool] [line: 79]
!   !   !   !   Child: 0  Op: >= [type bool] [line: 79]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 79]
!   !   !   !   !   !   Child: 0  Id: wallace [type int] [line: 79]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 79]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 79]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 79]
!   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 79]
!   !   !   !   !   !   !   !   Child: 0  Id: gromit [type int] [line: 79]
!   !   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 79]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 79]
Sibling: 4  Func cheese returns type int [type int] [line: 82]
!   Child: 0  Param x of type int [type int] [line: 82]
!   Sibling: 0  Param y of type int [type int] [line: 82]
!   Child: 1  While [type void] [line: 82]
!   !   Child: 0  Op: > [type bool] [line: 82]
!   !   !   Child: 0  Id: x [type int] [line: 82]
!   !   !   Child: 1  Const: 0 [type int] [line: 82]
!   !   Child: 1  If [type void] [line: 82]
!   !   !   Child: 0  Op: > [type bool] [line: 82]
!   !   !   !   Child: 0  Id: y [type int] [line: 82]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 82]
!   !   !   Child: 1  Assign: -- [type int] [line: 82]
!   !   !   !   Child: 0  Id: x [type int] [line: 82]
!   !   !   Child: 2  Return [type void] [line: 82]
!   !   !   !   Child: 0  Op: % [type int] [line: 82]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 82]
!   !   !   !   !   !   Child: 0  Id: x [type int] [line: 82]
!   !   !   !   !   !   Child: 1  Id: x [type int] [line: 82]
!   !   !   !   !   Child: 1  Id: y [type int] [line: 82]
Sibling: 5  Func Wensleydale returns type int [type int] [line: 84]
!   Child: 0  Param x of type int [type int] [line: 84]
!   Sibling: 0  Param y of type int [type int] [line: 84]
!   Child: 1  Return [type void] [line: 84]
!   !   Child: 0  Call: cheese [type int] [line: 84]
!   !   !   Child: 0  Id: x [undefined type] [line: 84]
!   !   !   Sibling: 0  Id: gromit [undefined type] [line: 84]
Sibling: 6  Func main returns type int [type int] [line: 86]
!   Child: 1  Compound [type void] [line: 87]
!   !   Child: 0  Var wool of type int [type int] [line: 88]
!   !   Sibling: 0  Var yarn is array of type int [type int] [line: 88]
!   !   Sibling: 1  Var shaun of type bool [type bool] [line: 89]
!   !   Sibling: 2  Var preston is array of type bool [type bool] [line: 89]
!   !   Child: 1  Call: wallace [type void] [line: 91]
!   !   !   Child: 0  Call: cheese [undefined type] [line: 91]
!   !   !   !   Child: 0  Const: 62 [type int] [line: 91]
!   !   !   !   Sibling: 0  Op: - [undefined type] [line: 91]
!   !   !   !   !   Child: 0  Const: 311 [type int] [line: 91]
!   !   !   Sibling: 0  Id: gromit [undefined type] [line: 91]
!   !   Sibling: 0  Op: [ [type int] [line: 92]
!   !   !   Child: 0  Id: yarn [type int] [line: 92]
!   !   !   Child: 1  Op: ? [type int] [line: 92]
!   !   !   !   Child: 0  Op: * [type int] [line: 92]
!   !   !   !   !   Child: 0  Id: yarn [type int] [line: 92]
!   !   Sibling: 1  Return [type void] [line: 93]
!   !   !   Child: 0  Call: Wendolene [type int] [line: 93]
!   !   !   !   Child: 0  Op: * [undefined type] [line: 93]
!   !   !   !   !   Child: 0  Op: * [undefined type] [line: 93]
!   !   !   !   !   !   Child: 0  Id: preston [undefined type] [line: 93]
!   !   !   !   !   Child: 1  Op: * [undefined type] [line: 93]
!   !   !   !   !   !   Child: 0  Id: yarn [undefined type] [line: 93]
!   !   !   !   Sibling: 0  Id: shaun [undefined type] [line: 93]
!   !   !   !   Sibling: 1  Id: yarn [undefined type] [line: 93]
!   !   !   !   Sibling: 2  Id: preston [undefined type] [line: 93]
Sibling: 7  Func null returns type void [type void] [line: 96]
Sibling: 8  Func MrNobody returns type void [type void] [line: 97]
!   Child: 0  Param shaun of type int [type int] [line: 97]
!   Sibling: 0  Param the of type int [type int] [line: 97]
!   Sibling: 1  Param sheep of type int [type int] [line: 97]
Sibling: 9  Var aBigLongVariableName6 of type bool [type bool] [line: 99]
Sibling: 10  Var odd of type int [type int] [line: 100]
Sibling: 11  Var separation of type int [type int] [line: 100]
Sibling: 12  Var of of type int [type int] [line: 100]
Sibling: 13  Var stuff of type int [type int] [line: 101]
Sibling: 14  Var bat of type char [type char] [line: 103]
!   Child: 0  Const: ''' [type char] [line: 103]
Sibling: 15  Var dog of type char [type char] [line: 104]
!   Child: 0  Const: 't' [type char] [line: 104]
Number of warnings: 0
Number of errors: 0
