ERROR(13): Symbol 'x' is already defined at line 11.
ERROR(17): Symbol 'cat' is not defined.
ERROR(22): Symbol 'dog' is already defined at line 11.
ERROR(36): Symbol 'cat' is already defined at line 29.
ERROR(57): Symbol 'x' is already defined at line 56.
ERROR(58): Symbol 'x' is already defined at line 56.
ERROR(67): Symbol 'v' is not defined.
ERROR(73): Cannot use function 'cat' as a variable.
ERROR(74): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(75): '+=' requires operands of type int but lhs is of type char.
ERROR(76): '-=' requires operands of type int but rhs is of type char.
ERROR(77): '>' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(87): '+' requires operands of type int but lhs is of type char.
ERROR(87): The operation '+' does not work with arrays.
ERROR(88): The operation '<' does not work with arrays.
ERROR(89): The operation '<' does not work with arrays.
ERROR(91): '==' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(92): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(93): '==' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(95): '+' requires operands of type int but lhs is of type bool.
ERROR(95): '+' requires operands of type int but rhs is of type char.
ERROR(97): '*' requires operands of type int but lhs is of type char.
ERROR(97): '*' requires operands of type int but rhs is of type bool.
ERROR(99): Unary 'not' requires an operand of type type bool but was given type char.
ERROR(100): '+' requires operands of type int but lhs is of type char.
ERROR(100): Unary 'not' requires an operand of type type bool but was given type int.
ERROR(103): Cannot index nonarray 'x'.
ERROR(104): 'and' requires operands of type bool but lhs is of type char.
ERROR(104): 'and' requires operands of type bool but rhs is of type char.
ERROR(104): '*' requires operands of type int but lhs is of type char.
ERROR(104): '*' requires operands of type int but rhs is of type bool.
ERROR(104): '+' requires operands of type int but lhs is of type char.
ERROR(104): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(104): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(105): Symbol 'y' is not defined.
ERROR(105): 'and' requires operands of type bool but lhs is of type char.
ERROR(105): '*' requires operands of type int but lhs is of type char.
ERROR(105): '*' requires operands of type int but rhs is of type bool.
ERROR(105): '+' requires operands of type int but lhs is of type char.
ERROR(105): '==' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(105): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(106): 'and' requires operands of type bool but lhs is of type char.
ERROR(106): 'and' requires operands of type bool but rhs is of type char.
ERROR(106): '*' requires operands of type int but lhs is of type char.
ERROR(106): '*' requires operands of type int but rhs is of type bool.
ERROR(106): 'or' requires operands of type bool but rhs is of type int.
ERROR(106): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(108): The operation '*' only works with arrays.
ERROR(109): 'and' requires operands of type bool but lhs is of type int.
ERROR(109): 'and' requires operands of type bool but rhs is of type int.
ERROR(115): Cannot use function 'cat' as a variable.
ERROR(117): Array 'aa' should be indexed by type int but got type char.
ERROR(117): Array index is the unindexed array 'aa'.
ERROR(118): Symbol 'AA' is not defined.
ERROR(118): Cannot index nonarray 'AA'.
ERROR(120): Symbol 'meerkat' is not defined.
ERROR(122): Symbol 'xyzzy' is not defined.
ERROR(123): Symbol 'meerkat' is not defined.
ERROR(124): Symbol 'xyzzy' is not defined.
ERROR(124): 'and' requires operands of type bool but rhs is of type int.
ERROR(126): Symbol 'flight' is not defined.
ERROR(126): Unary 'not' requires an operand of type type bool but was given type int.
ERROR(126): Unary '-' requires an operand of type type int but was given type bool.
ERROR(126): Symbol 'uu' is not defined.
ERROR(126): Symbol 'y' is not defined.
ERROR(126): '*' requires operands of type int but lhs is of type char.
ERROR(126): '+' requires operands of type int but lhs is of type char.
ERROR(128): 'x' is a simple variable and cannot be called.
ERROR(140): Cannot use function 'ibex' as a variable.
ERROR(140): Cannot index nonarray 'ibex'.
ERROR(142): Cannot use function 'ibex' as a variable.
ERROR(143): Cannot use function 'ibex' as a variable.
ERROR(145): Array 'aa' should be indexed by type int but got type char.
ERROR(146): Array 'aa' should be indexed by type int but got type char.
ERROR(146): Array index is the unindexed array 'zz'.
ERROR(147): Array 'aa' should be indexed by type int but got type void.
ERROR(149): '=' requires operands of non-void type but rhs is of type void.
ERROR(150): '+' requires operands of type int but lhs is of type char.
ERROR(150): '+' requires operands of type int but rhs is of type void.
ERROR(150): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(155): '=' requires operands of the same type but lhs is type char and rhs is type bool.
ERROR(157): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(157): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(157): '=' requires operands of the same type but lhs is type char and rhs is type int.
ERROR(159): '*' requires operands of type int but lhs is of type char.
ERROR(159): '*' requires operands of type int but rhs is of type char.
ERROR(159): 'and' requires operands of type bool but lhs is of type int.
ERROR(159): 'and' requires operands of type bool but rhs is of type int.
ERROR(166): Cannot return an array.
Func dog returns type char [type char] [line: 11]
!   Child: 0  Param x of type char [type char] [line: 11]
!   Child: 1  Compound [type void] [line: 12]
!   !   Child: 0  Var x of type char [type char] [line: 13]
!   !   Sibling: 0  Var b of type int [type int] [line: 15]
!   !   Child: 1  Call: cat [undefined type] [line: 17]
!   !   !   Child: 0  Const: 10 [type int] [line: 17]
!   !   Sibling: 0  Return [type void] [line: 19]
!   !   !   Child: 0  Id: b [type int] [line: 19]
Sibling: 0  Func dog returns type int [type int] [line: 22]
!   Child: 0  Param x of type int [type int] [line: 22]
!   Child: 1  Compound [type void] [line: 23]
!   !   Child: 1  Compound [type void] [line: 24]
!   !   !   Child: 0  Var x of type int [type int] [line: 25]
Sibling: 1  Func cat returns type char [type char] [line: 29]
!   Child: 0  Param x of type char [type char] [line: 29]
!   Child: 1  Compound [type void] [line: 30]
!   !   Child: 0  Var b of type int [type int] [line: 31]
!   !   Child: 1  Return [type void] [line: 33]
Sibling: 2  Var cat of type char [type char] [line: 36]
Sibling: 3  Var unusedGlobal of type char [type char] [line: 37]
Sibling: 4  Func ibex returns type int [type int] [line: 39]
!   Child: 0  Param x is array of type char [type char] [line: 39]
!   Child: 1  Compound [type void] [line: 40]
!   !   Child: 0  Var unusedLocal of type char [type char] [line: 41]
!   !   Child: 1  Return [type void] [line: 42]
!   !   !   Child: 0  Const: true [type bool] [line: 42]
Sibling: 5  Func ox returns type void [type void] [line: 45]
!   Child: 0  Param y of type char [type char] [line: 45]
!   Child: 1  Compound [type void] [line: 46]
!   !   Child: 1  Return [type void] [line: 47]
!   !   !   Child: 0  Const: 666 [type int] [line: 47]
Sibling: 6  Func emu returns type char [type char] [line: 50]
!   Child: 0  Param x of type char [type char] [line: 50]
!   Sibling: 0  Param y of type char [type char] [line: 50]
!   Sibling: 1  Param z of type char [type char] [line: 50]
!   Child: 1  Compound [type void] [line: 51]
Sibling: 7  Func main returns type char [type char] [line: 54]
!   Child: 1  Compound [type void] [line: 55]
!   !   Child: 0  Var x of type char [type char] [line: 56]
!   !   Sibling: 0  Var yuri of type char [type char] [line: 56]
!   !   Sibling: 1  Var x of type char [type char] [line: 57]
!   !   Sibling: 2  Var x of type int [type int] [line: 58]
!   !   Sibling: 3  Var ba is array of type bool [type bool] [line: 60]
!   !   Sibling: 4  Var aa is array of type char [type char] [line: 61]
!   !   Sibling: 5  Var zz is array of type char [type char] [line: 62]
!   !   Sibling: 6  Var bb is array of type int [type int] [line: 63]
!   !   Sibling: 7  Var cc is array of type int [type int] [line: 63]
!   !   Sibling: 8  Var b of type int [type int] [line: 65]
!   !   Sibling: 9  Var c of type int [type int] [line: 65]
!   !   Child: 1  Id: v [undefined type] [line: 67]
!   !   Sibling: 0  If [type void] [line: 69]
!   !   !   Child: 0  Id: x [type char] [line: 69]
!   !   !   Child: 1  Id: x [type char] [line: 69]
!   !   Sibling: 1  While [type void] [line: 70]
!   !   !   Child: 0  Id: x [type char] [line: 70]
!   !   !   Child: 1  Id: x [type char] [line: 70]
!   !   Sibling: 2  While [type void] [line: 71]
!   !   !   Child: 0  Call: ox [type void] [line: 71]
!   !   !   !   Child: 0  Const: 10 [type int] [line: 71]
!   !   !   Child: 1  Id: x [type char] [line: 71]
!   !   Sibling: 3  Assign: = [type char] [line: 73]
!   !   !   Child: 0  Id: x [type char] [line: 73]
!   !   !   Child: 1  Id: cat [undefined type] [line: 73]
!   !   Sibling: 4  Assign: = [type char] [line: 74]
!   !   !   Child: 0  Id: x [type char] [line: 74]
!   !   !   Child: 1  Id: b [type int] [line: 74]
!   !   Sibling: 5  Assign: += [type int] [line: 75]
!   !   !   Child: 0  Id: x [type char] [line: 75]
!   !   !   Child: 1  Id: b [type int] [line: 75]
!   !   Sibling: 6  Assign: -= [type int] [line: 76]
!   !   !   Child: 0  Id: b [type int] [line: 76]
!   !   !   Child: 1  Id: x [type char] [line: 76]
!   !   Sibling: 7  Op: > [type bool] [line: 77]
!   !   !   Child: 0  Id: b [type int] [line: 77]
!   !   !   Child: 1  Id: x [type char] [line: 77]
!   !   Sibling: 8  Assign: ++ [type int] [line: 78]
!   !   !   Child: 0  Id: b [type int] [line: 78]
!   !   Sibling: 9  If [type void] [line: 80]
!   !   !   Child: 0  Id: bb [type int] [line: 80]
!   !   !   Child: 1  Id: x [type char] [line: 80]
!   !   Sibling: 10  While [type void] [line: 81]
!   !   !   Child: 0  Id: bb [type int] [line: 81]
!   !   !   Child: 1  Id: x [type char] [line: 81]
!   !   Sibling: 11  Break [type void] [line: 83]
!   !   Sibling: 12  While [type void] [line: 85]
!   !   !   Child: 0  Id: b [type int] [line: 85]
!   !   !   Child: 1  Compound [type void] [line: 85]
!   !   !   !   Child: 1  Break [type void] [line: 85]
!   !   Sibling: 13  Op: + [type int] [line: 87]
!   !   !   Child: 0  Id: aa [type char] [line: 87]
!   !   !   Child: 1  Const: 6 [type int] [line: 87]
!   !   Sibling: 14  Op: < [type bool] [line: 88]
!   !   !   Child: 0  Id: aa [type char] [line: 88]
!   !   !   Child: 1  Id: zz [type char] [line: 88]
!   !   Sibling: 15  Op: < [type bool] [line: 89]
!   !   !   Child: 0  Id: bb [type int] [line: 89]
!   !   !   Child: 1  Id: cc [type int] [line: 89]
!   !   Sibling: 16  Op: == [type bool] [line: 91]
!   !   !   Child: 0  Id: x [type char] [line: 91]
!   !   !   Child: 1  Const: true [type bool] [line: 91]
!   !   Sibling: 17  Op: == [type bool] [line: 92]
!   !   !   Child: 0  Id: x [type char] [line: 92]
!   !   !   Child: 1  Const: 1 [type int] [line: 92]
!   !   Sibling: 18  Op: == [type bool] [line: 93]
!   !   !   Child: 0  Id: b [type int] [line: 93]
!   !   !   Child: 1  Const: true [type bool] [line: 93]
!   !   Sibling: 19  Op: + [type int] [line: 95]
!   !   !   Child: 0  Const: false [type bool] [line: 95]
!   !   !   Child: 1  Id: x [type char] [line: 95]
!   !   Sibling: 20  Op: * [type int] [line: 97]
!   !   !   Child: 0  Id: x [type char] [line: 97]
!   !   !   Child: 1  Const: false [type bool] [line: 97]
!   !   Sibling: 21  Op: not [type bool] [line: 99]
!   !   !   Child: 0  Id: x [type char] [line: 99]
!   !   Sibling: 22  Op: not [type bool] [line: 100]
!   !   !   Child: 0  Op: + [type int] [line: 100]
!   !   !   !   Child: 0  Id: x [type char] [line: 100]
!   !   !   !   Child: 1  Id: b [type int] [line: 100]
!   !   Sibling: 23  Op: - [type int] [line: 101]
!   !   !   Child: 0  Id: b [type int] [line: 101]
!   !   Sibling: 24  Op: [ [type char] [line: 103]
!   !   !   Child: 0  Id: x [type char] [line: 103]
!   !   !   Child: 1  Const: 496 [type int] [line: 103]
!   !   Sibling: 25  Assign: = [type int] [line: 104]
!   !   !   Child: 0  Id: b [type int] [line: 104]
!   !   !   Child: 1  Op: == [type bool] [line: 104]
!   !   !   !   Child: 0  Id: x [type char] [line: 104]
!   !   !   !   Child: 1  Op: + [type int] [line: 104]
!   !   !   !   !   Child: 0  Id: x [type char] [line: 104]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 104]
!   !   !   !   !   !   Child: 0  Id: x [type char] [line: 104]
!   !   !   !   !   !   Child: 1  Op: and [type bool] [line: 104]
!   !   !   !   !   !   !   Child: 0  Id: x [type char] [line: 104]
!   !   !   !   !   !   !   Child: 1  Id: x [type char] [line: 104]
!   !   Sibling: 26  Assign: = [type int] [line: 105]
!   !   !   Child: 0  Id: b [type int] [line: 105]
!   !   !   Child: 1  Op: == [type bool] [line: 105]
!   !   !   !   Child: 0  Id: x [type char] [line: 105]
!   !   !   !   Child: 1  Op: + [type int] [line: 105]
!   !   !   !   !   Child: 0  Id: x [type char] [line: 105]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 105]
!   !   !   !   !   !   Child: 0  Id: x [type char] [line: 105]
!   !   !   !   !   !   Child: 1  Op: and [type bool] [line: 105]
!   !   !   !   !   !   !   Child: 0  Id: x [type char] [line: 105]
!   !   !   !   !   !   !   Child: 1  Id: y [undefined type] [line: 105]
!   !   Sibling: 27  Assign: = [type int] [line: 106]
!   !   !   Child: 0  Id: b [type int] [line: 106]
!   !   !   Child: 1  Op: or [type bool] [line: 106]
!   !   !   !   Child: 0  Op: == [type bool] [line: 106]
!   !   !   !   !   Child: 0  Id: x [type char] [line: 106]
!   !   !   !   !   Child: 1  Id: x [type char] [line: 106]
!   !   !   !   Child: 1  Op: * [type int] [line: 106]
!   !   !   !   !   Child: 0  Id: x [type char] [line: 106]
!   !   !   !   !   Child: 1  Op: and [type bool] [line: 106]
!   !   !   !   !   !   Child: 0  Id: x [type char] [line: 106]
!   !   !   !   !   !   Child: 1  Id: x [type char] [line: 106]
!   !   Sibling: 28  Op: * [type int] [line: 108]
!   !   !   Child: 0  Id: x [type char] [line: 108]
!   !   Sibling: 29  Op: and [type bool] [line: 109]
!   !   !   Child: 0  Op: * [type int] [line: 109]
!   !   !   !   Child: 0  Id: aa [type char] [line: 109]
!   !   !   Child: 1  Id: b [type int] [line: 109]
!   !   Sibling: 30  Op: [ [type char] [line: 110]
!   !   !   Child: 0  Id: aa [type char] [line: 110]
!   !   !   Child: 1  Op: * [type int] [line: 110]
!   !   !   !   Child: 0  Id: aa [type char] [line: 110]
!   !   Sibling: 31  Op: [ [type char] [line: 111]
!   !   !   Child: 0  Id: aa [type char] [line: 111]
!   !   !   Child: 1  Const: 666 [type int] [line: 111]
!   !   Sibling: 32  Op: [ [type char] [line: 113]
!   !   !   Child: 0  Id: aa [type char] [line: 113]
!   !   !   Child: 1  Id: b [type int] [line: 113]
!   !   Sibling: 33  Op: [ [type char] [line: 115]
!   !   !   Child: 0  Id: aa [type char] [line: 115]
!   !   !   Child: 1  Id: cat [undefined type] [line: 115]
!   !   Sibling: 34  Op: [ [type char] [line: 117]
!   !   !   Child: 0  Id: aa [type char] [line: 117]
!   !   !   Child: 1  Id: aa [type char] [line: 117]
!   !   Sibling: 35  Op: [ [undefined type] [line: 118]
!   !   !   Child: 0  Id: AA [undefined type] [line: 118]
!   !   !   Child: 1  Const: 1 [type int] [line: 118]
!   !   Sibling: 36  Op: [ [type char] [line: 120]
!   !   !   Child: 0  Id: aa [type char] [line: 120]
!   !   !   Child: 1  Id: meerkat [undefined type] [line: 120]
!   !   Sibling: 37  Id: xyzzy [undefined type] [line: 122]
!   !   Sibling: 38  Call: meerkat [undefined type] [line: 123]
!   !   Sibling: 39  Op: and [type bool] [line: 124]
!   !   !   Child: 0  Const: true [type bool] [line: 124]
!   !   !   Child: 1  Op: / [type int] [line: 124]
!   !   !   !   Child: 0  Id: xyzzy [undefined type] [line: 124]
!   !   !   !   Child: 1  Const: 666 [type int] [line: 124]
!   !   Sibling: 40  Call: flight [undefined type] [line: 126]
!   !   !   Child: 0  Op: not [type bool] [line: 126]
!   !   !   !   Child: 0  Const: 5 [type int] [line: 126]
!   !   !   Sibling: 0  Op: - [type int] [line: 126]
!   !   !   !   Child: 0  Const: true [type bool] [line: 126]
!   !   !   Sibling: 1  Id: uu [undefined type] [line: 126]
!   !   !   Sibling: 2  Id: y [undefined type] [line: 126]
!   !   !   Sibling: 3  Op: + [type int] [line: 126]
!   !   !   !   Child: 0  Id: x [type char] [line: 126]
!   !   !   !   Child: 1  Op: * [type int] [line: 126]
!   !   !   !   !   Child: 0  Id: x [type char] [line: 126]
!   !   !   !   !   Child: 1  Id: b [type int] [line: 126]
!   !   Sibling: 41  Call: x [type char] [line: 128]
!   !   Sibling: 42  Call: dog [type char] [line: 130]
!   !   !   Child: 0  Const: 3 [type int] [line: 130]
!   !   !   Sibling: 0  Const: 5 [type int] [line: 130]
!   !   Sibling: 43  Call: ibex [type int] [line: 131]
!   !   Sibling: 44  Call: dog [type char] [line: 133]
!   !   !   Child: 0  Const: true [type bool] [line: 133]
!   !   Sibling: 45  Call: cat [type char] [line: 135]
!   !   !   Child: 0  Id: aa [undefined type] [line: 135]
!   !   Sibling: 46  Call: cat [type char] [line: 136]
!   !   !   Child: 0  Id: ba [undefined type] [line: 136]
!   !   Sibling: 47  Call: ibex [type int] [line: 138]
!   !   !   Child: 0  Id: x [undefined type] [line: 138]
!   !   Sibling: 48  Call: ibex [type int] [line: 139]
!   !   !   Child: 0  Id: bb [undefined type] [line: 139]
!   !   Sibling: 49  Op: [ [undefined type] [line: 140]
!   !   !   Child: 0  Id: ibex [undefined type] [line: 140]
!   !   !   Child: 1  Const: 3 [type int] [line: 140]
!   !   Sibling: 50  Op: + [type int] [line: 142]
!   !   !   Child: 0  Id: ibex [undefined type] [line: 142]
!   !   !   Child: 1  Const: 4 [type int] [line: 142]
!   !   Sibling: 51  Id: ibex [undefined type] [line: 143]
!   !   Sibling: 52  Op: [ [type char] [line: 145]
!   !   !   Child: 0  Id: aa [type char] [line: 145]
!   !   !   Child: 1  Op: [ [type char] [line: 145]
!   !   !   !   Child: 0  Id: zz [type char] [line: 145]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 145]
!   !   Sibling: 53  Op: [ [type char] [line: 146]
!   !   !   Child: 0  Id: aa [type char] [line: 146]
!   !   !   Child: 1  Id: zz [type char] [line: 146]
!   !   Sibling: 54  Op: [ [type char] [line: 147]
!   !   !   Child: 0  Id: aa [type char] [line: 147]
!   !   !   Child: 1  Call: ox [type void] [line: 147]
!   !   !   !   Child: 0  Const: true [type bool] [line: 147]
!   !   Sibling: 55  Assign: = [type char] [line: 149]
!   !   !   Child: 0  Id: x [type char] [line: 149]
!   !   !   Child: 1  Call: ox [type void] [line: 149]
!   !   !   !   Child: 0  Const: 28 [type int] [line: 149]
!   !   Sibling: 56  Assign: = [type char] [line: 150]
!   !   !   Child: 0  Id: x [type char] [line: 150]
!   !   !   Child: 1  Op: + [type int] [line: 150]
!   !   !   !   Child: 0  Id: x [type char] [line: 150]
!   !   !   !   Child: 1  Call: ox [type void] [line: 150]
!   !   !   !   !   Child: 0  Const: 6 [type int] [line: 150]
!   !   Sibling: 57  Call: cat [type char] [line: 151]
!   !   !   Child: 0  Call: ox [undefined type] [line: 151]
!   !   !   !   Child: 0  Const: 492 [type int] [line: 151]
!   !   Sibling: 58  Call: cat [type char] [line: 152]
!   !   !   Child: 0  Const: true [type bool] [line: 152]
!   !   Sibling: 59  Call: cat [type char] [line: 153]
!   !   !   Child: 0  Call: cat [undefined type] [line: 153]
!   !   !   !   Child: 0  Const: 492 [type int] [line: 153]
!   !   Sibling: 60  Assign: = [type char] [line: 155]
!   !   !   Child: 0  Id: x [type char] [line: 155]
!   !   !   Child: 1  Assign: = [type char] [line: 155]
!   !   !   !   Child: 0  Id: x [type char] [line: 155]
!   !   !   !   Child: 1  Const: true [type bool] [line: 155]
!   !   Sibling: 61  Assign: = [type int] [line: 156]
!   !   !   Child: 0  Id: b [type int] [line: 156]
!   !   !   Child: 1  Assign: = [type int] [line: 156]
!   !   !   !   Child: 0  Id: b [type int] [line: 156]
!   !   !   !   Child: 1  Const: 666 [type int] [line: 156]
!   !   Sibling: 62  Assign: = [type char] [line: 157]
!   !   !   Child: 0  Id: x [type char] [line: 157]
!   !   !   Child: 1  Assign: = [type int] [line: 157]
!   !   !   !   Child: 0  Id: b [type int] [line: 157]
!   !   !   !   Child: 1  Assign: = [type char] [line: 157]
!   !   !   !   !   Child: 0  Id: x [type char] [line: 157]
!   !   !   !   !   Child: 1  Id: b [type int] [line: 157]
!   !   Sibling: 63  Op: and [type bool] [line: 159]
!   !   !   Child: 0  Op: * [type int] [line: 159]
!   !   !   !   Child: 0  Id: x [type char] [line: 159]
!   !   !   !   Child: 1  Id: b [type int] [line: 159]
!   !   !   Child: 1  Op: * [type int] [line: 159]
!   !   !   !   Child: 0  Id: b [type int] [line: 159]
!   !   !   !   Child: 1  Id: x [type char] [line: 159]
!   !   Sibling: 64  Call: emu [type char] [line: 161]
!   !   !   Child: 0  Op: + [undefined type] [line: 161]
!   !   !   !   Child: 0  Id: x [undefined type] [line: 161]
!   !   !   !   Child: 1  Id: b [undefined type] [line: 161]
!   !   !   Sibling: 0  Id: parrot [undefined type] [line: 161]
!   !   !   Sibling: 1  Op: and [undefined type] [line: 161]
!   !   !   !   Child: 0  Id: b [undefined type] [line: 161]
!   !   !   !   Child: 1  Id: x [undefined type] [line: 161]
!   !   Sibling: 65  Call: emu [type char] [line: 162]
!   !   !   Child: 0  Const: false [type bool] [line: 162]
!   !   !   Sibling: 0  Op: and [undefined type] [line: 162]
!   !   !   !   Child: 0  Const: true [type bool] [line: 162]
!   !   !   !   Child: 1  Call: emu [undefined type] [line: 162]
!   !   !   !   !   Child: 0  Op: + [undefined type] [line: 162]
!   !   !   !   !   !   Child: 0  Id: x [undefined type] [line: 162]
!   !   !   !   !   !   Child: 1  Id: b [undefined type] [line: 162]
!   !   !   !   !   Sibling: 0  Id: parrot [undefined type] [line: 162]
!   !   !   !   !   Sibling: 1  Op: and [undefined type] [line: 162]
!   !   !   !   !   !   Child: 0  Id: b [undefined type] [line: 162]
!   !   !   !   !   !   Child: 1  Id: x [undefined type] [line: 162]
!   !   !   Sibling: 1  Const: true [type bool] [line: 162]
!   !   !   Sibling: 2  Op: * [undefined type] [line: 162]
!   !   !   !   Child: 0  Id: x [undefined type] [line: 162]
!   !   !   !   Child: 1  Id: b [undefined type] [line: 162]
!   !   Sibling: 66  Id: bb [type int] [line: 164]
!   !   Sibling: 67  Return [type void] [line: 166]
!   !   !   Child: 0  Id: aa [type char] [line: 166]
Number of warnings: 0
Number of errors: 89
