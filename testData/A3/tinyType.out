ERROR(5): Symbol 'bender' is already defined at line 4.
ERROR(9): Symbol 'x' is already defined at line 7.
ERROR(10): Symbol 'x' is already defined at line 7.
ERROR(10): Symbol 'y' is already defined at line 9.
ERROR(12): Symbol 'z' is not defined.
ERROR(13): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(17): Symbol 'z' is not defined.
ERROR(17): Symbol 'z' is not defined.
ERROR(18): Cannot use function 'main' as a variable.
ERROR(19): Cannot index nonarray 'x'.
ERROR(20): Array 'y' should be indexed by type int but got type char.
ERROR(21): Array index is the unindexed array 'y'.
ERROR(23): Cannot index nonarray.
ERROR(24): Cannot use function 'main' as a variable.
ERROR(25): Cannot use function 'main' as a variable.
ERROR(25): Cannot index nonarray 'main'.
ERROR(25): Array 'main' should be indexed by type int but got type char.
ERROR(26): 'and' requires operands of type bool but lhs is of type int.
ERROR(26): 'and' requires operands of type bool but rhs is of type char.
ERROR(29): The operation '*' only works with arrays.
ERROR(30): The operation '*' only works with arrays.
ERROR(31): Unary '?' requires an operand of type type int but was given type char.
ERROR(31): Unary '?' requires an operand of type type int but was given type bool.
ERROR(33): Symbol 'fred' is not defined.
ERROR(33): 'and' requires operands of type bool but lhs is of type int.
ERROR(34): '+' requires operands of type int but lhs is of type bool.
ERROR(34): '+' requires operands of type int but rhs is of type bool.
ERROR(35): '*' requires operands of type int but rhs is of type void.
ERROR(36): '=' requires operands of NONVOID but rhs is of type void.
ERROR(37): '=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(38): '==' requires operands of NONVOID but lhs is of type void.
ERROR(38): '==' requires operands of NONVOID but rhs is of type void.
ERROR(39): '!=' requires operands of NONVOID but lhs is of type void.
ERROR(39): '!=' requires operands of NONVOID but rhs is of type void.
ERROR(40): '-' requires operands of type int but lhs is of type void.
ERROR(40): '-' requires operands of type int but rhs is of type void.
ERROR(42): Array 'y' should be indexed by type int but got type void.
ERROR(43): '<' requires operands of type char or type int but lhs is of type bool.
ERROR(43): '<' requires operands of type char or type int but rhs is of type bool.
ERROR(44): '<' requires operands of the same type but lhs is type char and rhs is type int.
Var w of type bool [type bool] [line: 2]
Sibling: 0  Var x of type bool [type bool] [line: 2]
Sibling: 1  Var y of type bool [type bool] [line: 2]
Sibling: 2  Func bender returns type void [type void] [line: 4]
!   Child: 0  Param x of type int [type int] [line: 4]
Sibling: 3  Func bender returns type int [type int] [line: 5]
!   Child: 1  Return [type void] [line: 5]
!   !   Child: 0  Const: 666 [type int] [line: 5]
Sibling: 4  Func main returns type int [type int] [line: 7]
!   Child: 0  Param x of type int [type int] [line: 7]
!   Child: 1  Compound [type void] [line: 8]
!   !   Child: 0  Var x of type int [type int] [line: 9]
!   !   Sibling: 0  Var y is array of type int [type int] [line: 9]
!   !   Sibling: 1  Var x of type char [type char] [line: 10]
!   !   Sibling: 2  Var y of type char [type char] [line: 10]
!   !   Child: 1  Op: + [type int] [line: 12]
!   !   !   Child: 0  Id: z [undefined type] [line: 12]
!   !   !   Child: 1  Id: x [type int] [line: 12]
!   !   Sibling: 0  Assign: = [type bool] [line: 13]
!   !   !   Child: 0  Id: w [type bool] [line: 13]
!   !   !   Child: 1  Const: 72 [type int] [line: 13]
!   !   Sibling: 1  Compound [type void] [line: 14]
!   !   !   Child: 0  Var z of type int [type int] [line: 14]
!   !   !   Child: 1  Assign: = [type int] [line: 15]
!   !   !   !   Child: 0  Id: z [type int] [line: 15]
!   !   !   !   Child: 1  Op: / [type int] [line: 15]
!   !   !   !   !   Child: 0  Id: z [type int] [line: 15]
!   !   !   !   !   Child: 1  Id: z [type int] [line: 15]
!   !   Sibling: 2  Op: + [type int] [line: 17]
!   !   !   Child: 0  Id: z [undefined type] [line: 17]
!   !   !   Child: 1  Id: z [undefined type] [line: 17]
!   !   Sibling: 3  Assign: = [undefined type] [line: 18]
!   !   !   Child: 0  Id: main [undefined type] [line: 18]
!   !   !   Child: 1  Const: 10 [type int] [line: 18]
!   !   Sibling: 4  Assign: = [type int] [line: 19]
!   !   !   Child: 0  Op: [ [type int] [line: 19]
!   !   !   !   Child: 0  Id: x [type int] [line: 19]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 19]
!   !   !   Child: 1  Const: 3 [type int] [line: 19]
!   !   Sibling: 5  Assign: = [type int] [line: 20]
!   !   !   Child: 0  Op: [ [type int] [line: 20]
!   !   !   !   Child: 0  Id: y [type int] [line: 20]
!   !   !   !   Child: 1  Const: 'c' [type char] [line: 20]
!   !   !   Child: 1  Const: 4 [type int] [line: 20]
!   !   Sibling: 6  Assign: = [type int] [line: 21]
!   !   !   Child: 0  Op: [ [type int] [line: 21]
!   !   !   !   Child: 0  Id: y [type int] [line: 21]
!   !   !   !   Child: 1  Id: y [type int] [line: 21]
!   !   !   Child: 1  Const: 5 [type int] [line: 21]
!   !   Sibling: 7  Assign: = [type int] [line: 22]
!   !   !   Child: 0  Op: [ [type int] [line: 22]
!   !   !   !   Child: 0  Id: y [type int] [line: 22]
!   !   !   !   Child: 1  Op: [ [type int] [line: 22]
!   !   !   !   !   Child: 0  Id: y [type int] [line: 22]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 22]
!   !   !   Child: 1  Const: 55 [type int] [line: 22]
!   !   Sibling: 8  Op: [ [type int] [line: 23]
!   !   !   Child: 0  Op: [ [type int] [line: 23]
!   !   !   !   Child: 0  Id: y [type int] [line: 23]
!   !   !   !   Child: 1  Const: 6 [type int] [line: 23]
!   !   !   Child: 1  Const: 7 [type int] [line: 23]
!   !   Sibling: 9  Op: [ [type int] [line: 24]
!   !   !   Child: 0  Id: y [type int] [line: 24]
!   !   !   Child: 1  Id: main [undefined type] [line: 24]
!   !   Sibling: 10  Op: [ [undefined type] [line: 25]
!   !   !   Child: 0  Id: main [undefined type] [line: 25]
!   !   !   Child: 1  Const: 'c' [type char] [line: 25]
!   !   Sibling: 11  Op: and [type bool] [line: 26]
!   !   !   Child: 0  Const: 6 [type int] [line: 26]
!   !   !   Child: 1  Const: 'x' [type char] [line: 26]
!   !   Sibling: 12  Assign: = [type int] [line: 27]
!   !   !   Child: 0  Id: y [type int] [line: 27]
!   !   !   Child: 1  Id: y [type int] [line: 27]
!   !   Sibling: 13  Op: [ [type int] [line: 28]
!   !   !   Child: 0  Id: y [type int] [line: 28]
!   !   !   Child: 1  Op: - [type int] [line: 28]
!   !   !   !   Child: 0  Op: * [type int] [line: 28]
!   !   !   !   !   Child: 0  Id: y [type int] [line: 28]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 28]
!   !   Sibling: 14  Op: * [type int] [line: 29]
!   !   !   Child: 0  Id: x [type int] [line: 29]
!   !   Sibling: 15  Op: * [type int] [line: 30]
!   !   !   Child: 0  Call: main [type int] [line: 30]
!   !   Sibling: 16  Op: + [type int] [line: 31]
!   !   !   Child: 0  Op: ? [type int] [line: 31]
!   !   !   !   Child: 0  Const: 'u' [type char] [line: 31]
!   !   !   Child: 1  Op: ? [type int] [line: 31]
!   !   !   !   Child: 0  Const: true [type bool] [line: 31]
!   !   Sibling: 17  Op: or [type bool] [line: 32]
!   !   !   Child: 0  Op: > [type bool] [line: 32]
!   !   !   !   Child: 0  Op: + [type int] [line: 32]
!   !   !   !   !   Child: 0  Const: 66 [type int] [line: 32]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 32]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 32]
!   !   !   !   !   !   !   Child: 0  Id: y [type int] [line: 32]
!   !   !   !   !   !   !   Child: 1  Op: - [type int] [line: 32]
!   !   !   !   !   !   !   !   Child: 0  Const: 77 [type int] [line: 32]
!   !   !   !   !   !   !   !   Child: 1  Op: * [type int] [line: 32]
!   !   !   !   !   !   !   !   !   Child: 0  Const: 11 [type int] [line: 32]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 55 [type int] [line: 32]
!   !   !   !   !   !   Child: 1  Const: 77 [type int] [line: 32]
!   !   !   !   Child: 1  Const: 12 [type int] [line: 32]
!   !   !   Child: 1  Const: false [type bool] [line: 32]
!   !   Sibling: 18  Op: and [type bool] [line: 33]
!   !   !   Child: 0  Call: main [type int] [line: 33]
!   !   !   Child: 1  Call: fred [undefined type] [line: 33]
!   !   Sibling: 19  Op: + [type int] [line: 34]
!   !   !   Child: 0  Op: + [type int] [line: 34]
!   !   !   !   Child: 0  Const: true [type bool] [line: 34]
!   !   !   !   Child: 1  Const: false [type bool] [line: 34]
!   !   !   Child: 1  Const: 666 [type int] [line: 34]
!   !   Sibling: 20  Op: * [type int] [line: 35]
!   !   !   Child: 0  Const: 919 [type int] [line: 35]
!   !   !   Child: 1  Call: bender [type void] [line: 35]
!   !   Sibling: 21  Assign: = [type int] [line: 36]
!   !   !   Child: 0  Id: x [type int] [line: 36]
!   !   !   Child: 1  Call: bender [type void] [line: 36]
!   !   Sibling: 22  Assign: = [type bool] [line: 37]
!   !   !   Child: 0  Id: w [type bool] [line: 37]
!   !   !   Child: 1  Call: main [type int] [line: 37]
!   !   Sibling: 23  Op: == [type bool] [line: 38]
!   !   !   Child: 0  Call: bender [type void] [line: 38]
!   !   !   Child: 1  Call: bender [type void] [line: 38]
!   !   Sibling: 24  Op: != [type bool] [line: 39]
!   !   !   Child: 0  Call: bender [type void] [line: 39]
!   !   !   Child: 1  Call: bender [type void] [line: 39]
!   !   Sibling: 25  Op: - [type int] [line: 40]
!   !   !   Child: 0  Call: bender [type void] [line: 40]
!   !   !   Child: 1  Call: bender [type void] [line: 40]
!   !   Sibling: 26  Call: bender [type void] [line: 41]
!   !   !   Child: 0  Call: bender [type void] [line: 41]
!   !   !   !   Child: 0  Const: 4 [type int] [line: 41]
!   !   Sibling: 27  Op: [ [type int] [line: 42]
!   !   !   Child: 0  Id: y [type int] [line: 42]
!   !   !   Child: 1  Call: bender [type void] [line: 42]
!   !   !   !   Child: 0  Const: 3 [type int] [line: 42]
!   !   Sibling: 28  Op: < [type bool] [line: 43]
!   !   !   Child: 0  Const: true [type bool] [line: 43]
!   !   !   Child: 1  Const: false [type bool] [line: 43]
!   !   Sibling: 29  Op: < [type bool] [line: 44]
!   !   !   Child: 0  Const: 'a' [type char] [line: 44]
!   !   !   Child: 1  Const: 11 [type int] [line: 44]
!   !   Sibling: 30  Op: >= [type bool] [line: 45]
!   !   !   Child: 0  Const: 'a' [type char] [line: 45]
!   !   !   Child: 1  Const: 'b' [type char] [line: 45]
!   !   Sibling: 31  Op: + [type int] [line: 46]
!   !   !   Child: 0  Const: 6 [type int] [line: 46]
!   !   !   Child: 1  Assign: = [type int] [line: 46]
!   !   !   !   Child: 0  Id: x [type int] [line: 46]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 46]
!   !   Sibling: 32  Return [type void] [line: 48]
!   !   Sibling: 33  Return [type void] [line: 49]
!   !   !   Child: 0  Const: true [type bool] [line: 49]
!   !   Sibling: 34  Return [type void] [line: 50]
!   !   !   Child: 0  Const: 'x' [type char] [line: 50]
!   !   Sibling: 35  Return [type void] [line: 51]
!   !   !   Child: 0  Call: bender [type void] [line: 51]
Number of warnings: 0
Number of errors: 40
