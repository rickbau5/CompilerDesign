Func input returns type int [type int] [line: -1]
Sibling: 0  Func output returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type int [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type bool [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [type char] [line: -1]
Sibling: 4  Func outputc returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type void [type void] [line: -1]
Sibling: 5  Func outnl returns type void [type void] [line: -1]
Sibling: 6  Func sqrt returns type int [type int] [line: 2]
!   Child: 0  Param x of type int [type int] [line: 2]
!   Child: 1  Compound [type void] [line: 3]
!   !   Child: 0  Var guess of type int [type int] [line: 4]
!   !   Sibling: 0  Var newguess of type int [type int] [line: 5]
!   !   Child: 1  If [type void] [line: 7]
!   !   !   Child: 0  Op: == [type bool] [line: 7]
!   !   !   !   Child: 0  Id: x [type int] [line: 7]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 7]
!   !   !   Child: 1  Return [type void] [line: 7]
!   !   !   !   Child: 0  Const: 1 [type int] [line: 7]
!   !   Sibling: 0  Assign: = [type int] [line: 8]
!   !   !   Child: 0  Id: guess [type int] [line: 8]
!   !   !   Child: 1  Op: / [type int] [line: 8]
!   !   !   !   Child: 0  Id: x [type int] [line: 8]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 8]
!   !   Sibling: 1  Assign: = [type int] [line: 9]
!   !   !   Child: 0  Id: newguess [type int] [line: 9]
!   !   !   Child: 1  Op: / [type int] [line: 9]
!   !   !   !   Child: 0  Op: + [type int] [line: 9]
!   !   !   !   !   Child: 0  Op: / [type int] [line: 9]
!   !   !   !   !   !   Child: 0  Id: x [type int] [line: 9]
!   !   !   !   !   !   Child: 1  Id: guess [type int] [line: 9]
!   !   !   !   !   Child: 1  Id: guess [type int] [line: 9]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 9]
!   !   Sibling: 2  While [type void] [line: 10]
!   !   !   Child: 0  Op: > [type bool] [line: 10]
!   !   !   !   Child: 0  Op: - [type int] [line: 10]
!   !   !   !   !   Child: 0  Id: guess [type int] [line: 10]
!   !   !   !   !   Child: 1  Id: newguess [type int] [line: 10]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 10]
!   !   !   Child: 1  Compound [type void] [line: 10]
!   !   !   !   Child: 1  Assign: = [type int] [line: 11]
!   !   !   !   !   Child: 0  Id: guess [type int] [line: 11]
!   !   !   !   !   Child: 1  Id: newguess [type int] [line: 11]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 12]
!   !   !   !   !   Child: 0  Id: newguess [type int] [line: 12]
!   !   !   !   !   Child: 1  Op: / [type int] [line: 12]
!   !   !   !   !   !   Child: 0  Op: + [type int] [line: 12]
!   !   !   !   !   !   !   Child: 0  Op: / [type int] [line: 12]
!   !   !   !   !   !   !   !   Child: 0  Id: x [type int] [line: 12]
!   !   !   !   !   !   !   !   Child: 1  Id: guess [type int] [line: 12]
!   !   !   !   !   !   !   Child: 1  Id: guess [type int] [line: 12]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 12]
!   !   Sibling: 3  If [type void] [line: 14]
!   !   !   Child: 0  Op: > [type bool] [line: 14]
!   !   !   !   Child: 0  Op: * [type int] [line: 14]
!   !   !   !   !   Child: 0  Id: newguess [type int] [line: 14]
!   !   !   !   !   Child: 1  Id: newguess [type int] [line: 14]
!   !   !   !   Child: 1  Id: x [type int] [line: 14]
!   !   !   Child: 1  Assign: = [type int] [line: 14]
!   !   !   !   Child: 0  Id: newguess [type int] [line: 14]
!   !   !   !   Child: 1  Op: - [type int] [line: 14]
!   !   !   !   !   Child: 0  Id: newguess [type int] [line: 14]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 14]
!   !   Sibling: 4  Return [type void] [line: 16]
!   !   !   Child: 0  Id: newguess [type int] [line: 16]
Sibling: 7  Func main returns type void [type void] [line: 20]
!   Child: 1  Compound [type void] [line: 21]
!   !   Child: 0  Var n of type int [type int] [line: 22]
!   !   Sibling: 0  Var i of type int [type int] [line: 23]
!   !   Child: 1  While [type void] [line: 25]
!   !   !   Child: 0  Op: > [type bool] [line: 25]
!   !   !   !   Child: 0  Assign: = [type int] [line: 25]
!   !   !   !   !   Child: 0  Id: n [type int] [line: 25]
!   !   !   !   !   Child: 1  Call: input [type int] [line: 25]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 25]
!   !   !   Child: 1  Compound [type void] [line: 25]
!   !   !   !   Child: 0  Var limit of type int [type int] [line: 26]
!   !   !   !   Child: 1  Assign: = [type int] [line: 27]
!   !   !   !   !   Child: 0  Id: limit [type int] [line: 27]
!   !   !   !   !   Child: 1  Call: sqrt [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Id: n [type int] [line: 27]
!   !   !   !   Sibling: 0  While [type void] [line: 30]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 30]
!   !   !   !   !   !   Child: 0  Op: % [type int] [line: 30]
!   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 30]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 30]
!   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 30]
!   !   !   !   !   Child: 1  Compound [type void] [line: 30]
!   !   !   !   !   !   Child: 1  Call: output [type void] [line: 31]
!   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 31]
!   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 32]
!   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 32]
!   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 32]
!   !   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 32]
!   !   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 32]
!   !   !   !   Sibling: 1  Assign: = [type int] [line: 36]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 36]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 36]
!   !   !   !   Sibling: 2  While [type void] [line: 37]
!   !   !   !   !   Child: 0  Op: <= [type bool] [line: 37]
!   !   !   !   !   !   Child: 0  Id: i [type int] [line: 37]
!   !   !   !   !   !   Child: 1  Id: limit [type int] [line: 37]
!   !   !   !   !   Child: 1  Compound [type void] [line: 37]
!   !   !   !   !   !   Child: 1  While [type void] [line: 38]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 38]
!   !   !   !   !   !   !   !   Child: 0  Op: % [type int] [line: 38]
!   !   !   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 38]
!   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 38]
!   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 38]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 38]
!   !   !   !   !   !   !   !   Child: 1  Call: output [type void] [line: 39]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 39]
!   !   !   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 40]
!   !   !   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 40]
!   !   !   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 40]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 40]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 40]
!   !   !   !   !   !   !   !   Sibling: 1  Assign: = [type int] [line: 41]
!   !   !   !   !   !   !   !   !   Child: 0  Id: limit [type int] [line: 41]
!   !   !   !   !   !   !   !   !   Child: 1  Call: sqrt [type int] [line: 41]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 41]
!   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 43]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 43]
!   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 43]
!   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 43]
!   !   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 43]
!   !   !   !   Sibling: 3  If [type void] [line: 46]
!   !   !   !   !   Child: 0  Op: > [type bool] [line: 46]
!   !   !   !   !   !   Child: 0  Id: n [type int] [line: 46]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 46]
!   !   !   !   !   Child: 1  Call: output [type void] [line: 46]
!   !   !   !   !   !   Child: 0  Id: n [type int] [line: 46]
!   !   !   !   Sibling: 4  Call: outnl [type void] [line: 47]
Number of warnings: 0
Number of errors: 0
