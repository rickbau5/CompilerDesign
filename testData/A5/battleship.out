Func input returns type int [type int] [line: -1]
Sibling: 0  Func output returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type int [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type bool [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [type char] [line: -1]
Sibling: 4  Func outputc returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type void [type void] [line: -1]
Sibling: 5  Func outnl returns type void [type void] [line: -1]
Sibling: 6  Var shipsize of type int [type int] [line: 51]
Sibling: 7  Var NumShots of type int [type int] [line: 51]
Sibling: 8  Var NumHits of type int [type int] [line: 51]
Sibling: 9  Var iseven of type bool [type bool] [line: 52]
Sibling: 10  Func Print returns type void [type void] [line: 54]
!   Child: 0  Param what of type int [type int] [line: 54]
!   Child: 1  Compound [type void] [line: 55]
!   !   Child: 1  Call: output [type void] [line: 56]
!   !   !   Child: 0  Id: what [type int] [line: 56]
Sibling: 11  Func NewLine returns type void [type void] [line: 59]
!   Child: 1  Compound [type void] [line: 60]
!   !   Child: 1  Call: outnl [type void] [line: 61]
Sibling: 12  Func Display returns type void [type void] [line: 64]
!   Child: 0  Param arr is array of type int [type int] [line: 64]
!   Sibling: 0  Param dimension of type int [type int] [line: 64]
!   Child: 1  Compound [type void] [line: 65]
!   !   Child: 0  Var r of type int [type int] [line: 66]
!   !   Sibling: 0  Var c of type int [type int] [line: 66]
!   !   Child: 1  Assign: = [type int] [line: 67]
!   !   !   Child: 0  Id: r [type int] [line: 67]
!   !   !   Child: 1  Const: 0 [type int] [line: 67]
!   !   Sibling: 0  Call: NewLine [type void] [line: 68]
!   !   Sibling: 1  Call: Print [type void] [line: 69]
!   !   !   Child: 0  Id: NumShots [type int] [line: 69]
!   !   Sibling: 2  Call: NewLine [type void] [line: 70]
!   !   Sibling: 3  While [type void] [line: 71]
!   !   !   Child: 0  Op: < [type bool] [line: 71]
!   !   !   !   Child: 0  Id: r [type int] [line: 71]
!   !   !   !   Child: 1  Id: dimension [type int] [line: 71]
!   !   !   Child: 1  Compound [type void] [line: 72]
!   !   !   !   Child: 1  Assign: = [type int] [line: 73]
!   !   !   !   !   Child: 0  Id: c [type int] [line: 73]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 73]
!   !   !   !   Sibling: 0  While [type void] [line: 74]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 74]
!   !   !   !   !   !   Child: 0  Id: c [type int] [line: 74]
!   !   !   !   !   !   Child: 1  Id: dimension [type int] [line: 74]
!   !   !   !   !   Child: 1  Compound [type void] [line: 75]
!   !   !   !   !   !   Child: 1  If [type void] [line: 76]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 76]
!   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 76]
!   !   !   !   !   !   !   !   !   Child: 0  Id: arr [type int] [line: 76]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 76]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 76]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: r [type int] [line: 76]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 76]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: c [type int] [line: 76]
!   !   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 76]
!   !   !   !   !   !   !   Child: 1  Call: Print [type void] [line: 77]
!   !   !   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 77]
!   !   !   !   !   !   !   Child: 2  Call: Print [type void] [line: 79]
!   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 79]
!   !   !   !   !   !   !   !   !   Child: 0  Id: arr [type int] [line: 79]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 79]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 79]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: r [type int] [line: 79]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 79]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: c [type int] [line: 79]
!   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 80]
!   !   !   !   !   !   !   Child: 0  Id: c [type int] [line: 80]
!   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 80]
!   !   !   !   !   !   !   !   Child: 0  Id: c [type int] [line: 80]
!   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 80]
!   !   !   !   Sibling: 1  Call: NewLine [type void] [line: 82]
!   !   !   !   Sibling: 2  Assign: ++ [type int] [line: 83]
!   !   !   !   !   Child: 0  Id: r [type int] [line: 83]
Sibling: 13  Func Randomize returns type int [type int] [line: 87]
!   Child: 0  Param seed of type int [type int] [line: 87]
!   Sibling: 0  Param dim of type int [type int] [line: 87]
!   Child: 1  Compound [type void] [line: 88]
!   !   Child: 1  Assign: = [type bool] [line: 89]
!   !   !   Child: 0  Id: iseven [type bool] [line: 89]
!   !   !   Child: 1  Op: == [type bool] [line: 89]
!   !   !   !   Child: 0  Op: % [type int] [line: 89]
!   !   !   !   !   Child: 0  Id: seed [type int] [line: 89]
!   !   !   !   !   Child: 1  Const: 2 [type int] [line: 89]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 89]
!   !   Sibling: 0  Assign: += [type int] [line: 91]
!   !   !   Child: 0  Id: seed [type int] [line: 91]
!   !   !   Child: 1  Id: dim [type int] [line: 91]
!   !   Sibling: 1  Assign: = [type int] [line: 92]
!   !   !   Child: 0  Id: seed [type int] [line: 92]
!   !   !   Child: 1  Op: + [type int] [line: 92]
!   !   !   !   Child: 0  Op: * [type int] [line: 92]
!   !   !   !   !   Child: 0  Const: 17 [type int] [line: 92]
!   !   !   !   !   Child: 1  Id: seed [type int] [line: 92]
!   !   !   !   Child: 1  Const: 11 [type int] [line: 92]
!   !   Sibling: 2  Assign: = [type int] [line: 93]
!   !   !   Child: 0  Id: seed [type int] [line: 93]
!   !   !   Child: 1  Op: % [type int] [line: 93]
!   !   !   !   Child: 0  Id: seed [type int] [line: 93]
!   !   !   !   Child: 1  Op: * [type int] [line: 93]
!   !   !   !   !   Child: 0  Id: dim [type int] [line: 93]
!   !   !   !   !   Child: 1  Id: dim [type int] [line: 93]
!   !   Sibling: 3  Return [type void] [line: 95]
!   !   !   Child: 0  Id: seed [type int] [line: 95]
Sibling: 14  Func HideShip returns type void [type void] [line: 98]
!   Child: 0  Param arr is array of type int [type int] [line: 98]
!   Sibling: 0  Param dimen of type int [type int] [line: 98]
!   Child: 1  Compound [type void] [line: 99]
!   !   Child: 0  Var pos of type int [type int] [line: 100]
!   !   Sibling: 0  Var row of type int [type int] [line: 100]
!   !   Sibling: 1  Var col of type int [type int] [line: 100]
!   !   Sibling: 2  Var i of type int [type int] [line: 100]
!   !   Child: 1  Assign: = [type int] [line: 102]
!   !   !   Child: 0  Id: pos [type int] [line: 102]
!   !   !   Child: 1  Call: Randomize [type int] [line: 102]
!   !   !   !   Child: 0  Call: input [type int] [line: 102]
!   !   !   !   Sibling: 0  Id: dimen [type int] [line: 102]
!   !   Sibling: 0  Assign: = [type int] [line: 104]
!   !   !   Child: 0  Id: row [type int] [line: 104]
!   !   !   Child: 1  Op: / [type int] [line: 104]
!   !   !   !   Child: 0  Id: pos [type int] [line: 104]
!   !   !   !   Child: 1  Id: dimen [type int] [line: 104]
!   !   Sibling: 1  Assign: = [type int] [line: 105]
!   !   !   Child: 0  Id: col [type int] [line: 105]
!   !   !   Child: 1  Op: - [type int] [line: 105]
!   !   !   !   Child: 0  Id: pos [type int] [line: 105]
!   !   !   !   Child: 1  Op: * [type int] [line: 105]
!   !   !   !   !   Child: 0  Op: / [type int] [line: 105]
!   !   !   !   !   !   Child: 0  Id: pos [type int] [line: 105]
!   !   !   !   !   !   Child: 1  Id: dimen [type int] [line: 105]
!   !   !   !   !   Child: 1  Id: dimen [type int] [line: 105]
!   !   Sibling: 2  If [type void] [line: 107]
!   !   !   Child: 0  Id: iseven [type bool] [line: 107]
!   !   !   Child: 1  Compound [type void] [line: 107]
!   !   !   !   Child: 1  If [type void] [line: 110]
!   !   !   !   !   Child: 0  Op: > [type bool] [line: 110]
!   !   !   !   !   !   Child: 0  Id: col [type int] [line: 110]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 110]
!   !   !   !   !   !   !   Child: 0  Id: dimen [type int] [line: 110]
!   !   !   !   !   !   !   Child: 1  Id: shipsize [type int] [line: 110]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 111]
!   !   !   !   !   !   Child: 0  Id: col [type int] [line: 111]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 111]
!   !   !   !   !   !   !   Child: 0  Id: dimen [type int] [line: 111]
!   !   !   !   !   !   !   Child: 1  Id: shipsize [type int] [line: 111]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 112]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 112]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 112]
!   !   !   !   Sibling: 1  While [type void] [line: 113]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 113]
!   !   !   !   !   !   Child: 0  Id: i [type int] [line: 113]
!   !   !   !   !   !   Child: 1  Id: shipsize [type int] [line: 113]
!   !   !   !   !   Child: 1  Compound [type void] [line: 114]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 115]
!   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 0  Id: arr [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 115]
!   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 115]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: row [type int] [line: 115]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: dimen [type int] [line: 115]
!   !   !   !   !   !   !   !   !   Child: 1  Id: col [type int] [line: 115]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 115]
!   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 116]
!   !   !   !   !   !   !   Child: 0  Id: col [type int] [line: 116]
!   !   !   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 117]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 117]
!   !   !   Child: 2  Compound [type void] [line: 120]
!   !   !   !   Child: 1  If [type void] [line: 121]
!   !   !   !   !   Child: 0  Op: > [type bool] [line: 121]
!   !   !   !   !   !   Child: 0  Id: row [type int] [line: 121]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 121]
!   !   !   !   !   !   !   Child: 0  Id: dimen [type int] [line: 121]
!   !   !   !   !   !   !   Child: 1  Id: shipsize [type int] [line: 121]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 122]
!   !   !   !   !   !   Child: 0  Id: row [type int] [line: 122]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 122]
!   !   !   !   !   !   !   Child: 0  Id: dimen [type int] [line: 122]
!   !   !   !   !   !   !   Child: 1  Id: shipsize [type int] [line: 122]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 123]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 123]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 123]
!   !   !   !   Sibling: 1  While [type void] [line: 124]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 124]
!   !   !   !   !   !   Child: 0  Id: i [type int] [line: 124]
!   !   !   !   !   !   Child: 1  Id: shipsize [type int] [line: 124]
!   !   !   !   !   Child: 1  Compound [type void] [line: 125]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 126]
!   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 126]
!   !   !   !   !   !   !   !   Child: 0  Id: arr [type int] [line: 126]
!   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 126]
!   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 126]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: row [type int] [line: 126]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: dimen [type int] [line: 126]
!   !   !   !   !   !   !   !   !   Child: 1  Id: col [type int] [line: 126]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 126]
!   !   !   !   !   !   Sibling: 0  Assign: += [type int] [line: 127]
!   !   !   !   !   !   !   Child: 0  Id: col [type int] [line: 127]
!   !   !   !   !   !   !   Child: 1  Id: dimen [type int] [line: 127]
!   !   !   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 128]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 128]
Sibling: 15  Func Aim returns type int [type int] [line: 134]
!   Child: 1  Compound [type void] [line: 135]
!   !   Child: 0  Var shot of type int [type int] [line: 136]
!   !   Child: 1  Assign: = [type int] [line: 137]
!   !   !   Child: 0  Id: shot [type int] [line: 137]
!   !   !   Child: 1  Op: - [type int] [line: 137]
!   !   !   !   Child: 0  Const: 666 [type int] [line: 137]
!   !   Sibling: 0  While [type void] [line: 138]
!   !   !   Child: 0  Op: == [type bool] [line: 138]
!   !   !   !   Child: 0  Id: shot [type int] [line: 138]
!   !   !   !   Child: 1  Op: - [type int] [line: 138]
!   !   !   !   !   Child: 0  Const: 666 [type int] [line: 138]
!   !   !   Child: 1  Compound [type void] [line: 139]
!   !   !   !   Child: 1  Assign: = [type int] [line: 140]
!   !   !   !   !   Child: 0  Id: shot [type int] [line: 140]
!   !   !   !   !   Child: 1  Call: input [type int] [line: 140]
!   !   !   !   Sibling: 0  If [type void] [line: 141]
!   !   !   !   !   Child: 0  Op: or [type bool] [line: 141]
!   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 141]
!   !   !   !   !   !   !   Child: 0  Id: shot [type int] [line: 141]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 141]
!   !   !   !   !   !   Child: 1  Op: > [type bool] [line: 141]
!   !   !   !   !   !   !   Child: 0  Id: shot [type int] [line: 141]
!   !   !   !   !   !   !   Child: 1  Const: 99 [type int] [line: 141]
!   !   !   !   !   Child: 1  Compound [type void] [line: 142]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 143]
!   !   !   !   !   !   !   Child: 0  Id: shot [type int] [line: 143]
!   !   !   !   !   !   !   Child: 1  Op: - [type int] [line: 143]
!   !   !   !   !   !   !   !   Child: 0  Const: 666 [type int] [line: 143]
!   !   !   !   !   !   Sibling: 0  Call: NewLine [type void] [line: 144]
!   !   !   !   !   !   Sibling: 1  Call: Print [type void] [line: 145]
!   !   !   !   !   !   !   Child: 0  Id: shot [type int] [line: 145]
!   !   !   !   !   !   Sibling: 2  Call: NewLine [type void] [line: 146]
!   !   Sibling: 1  Call: NewLine [type void] [line: 149]
!   !   Sibling: 2  Return [type void] [line: 150]
!   !   !   Child: 0  Id: shot [type int] [line: 150]
Sibling: 16  Func RevealShip returns type void [type void] [line: 153]
!   Child: 0  Param arr is array of type int [type int] [line: 153]
!   Sibling: 0  Param dimension of type int [type int] [line: 153]
!   Child: 1  Compound [type void] [line: 154]
!   !   Child: 0  Var r of type int [type int] [line: 155]
!   !   Sibling: 0  Var c of type int [type int] [line: 155]
!   !   Child: 1  Assign: = [type int] [line: 156]
!   !   !   Child: 0  Id: r [type int] [line: 156]
!   !   !   Child: 1  Const: 0 [type int] [line: 156]
!   !   Sibling: 0  Call: NewLine [type void] [line: 157]
!   !   Sibling: 1  While [type void] [line: 158]
!   !   !   Child: 0  Op: < [type bool] [line: 158]
!   !   !   !   Child: 0  Id: r [type int] [line: 158]
!   !   !   !   Child: 1  Id: dimension [type int] [line: 158]
!   !   !   Child: 1  Compound [type void] [line: 159]
!   !   !   !   Child: 1  Assign: = [type int] [line: 160]
!   !   !   !   !   Child: 0  Id: c [type int] [line: 160]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 160]
!   !   !   !   Sibling: 0  While [type void] [line: 161]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 161]
!   !   !   !   !   !   Child: 0  Id: c [type int] [line: 161]
!   !   !   !   !   !   Child: 1  Id: dimension [type int] [line: 161]
!   !   !   !   !   Child: 1  Compound [type void] [line: 162]
!   !   !   !   !   !   Child: 1  If [type void] [line: 163]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 163]
!   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 163]
!   !   !   !   !   !   !   !   !   Child: 0  Id: arr [type int] [line: 163]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 163]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 163]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: r [type int] [line: 163]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 163]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: c [type int] [line: 163]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 163]
!   !   !   !   !   !   !   Child: 1  Call: Print [type void] [line: 164]
!   !   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 164]
!   !   !   !   !   !   !   Child: 2  Call: Print [type void] [line: 166]
!   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 166]
!   !   !   !   !   !   !   !   !   Child: 0  Id: arr [type int] [line: 166]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 166]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 166]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: r [type int] [line: 166]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 166]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: c [type int] [line: 166]
!   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 167]
!   !   !   !   !   !   !   Child: 0  Id: c [type int] [line: 167]
!   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 167]
!   !   !   !   !   !   !   !   Child: 0  Id: c [type int] [line: 167]
!   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 167]
!   !   !   !   Sibling: 1  Call: NewLine [type void] [line: 169]
!   !   !   !   Sibling: 2  Assign: ++ [type int] [line: 170]
!   !   !   !   !   Child: 0  Id: r [type int] [line: 170]
Sibling: 17  Func Fire returns type int [type int] [line: 174]
!   Child: 0  Param arr is array of type int [type int] [line: 174]
!   Sibling: 0  Param shot of type int [type int] [line: 174]
!   Child: 1  Compound [type void] [line: 175]
!   !   Child: 1  If [type void] [line: 176]
!   !   !   Child: 0  Op: == [type bool] [line: 176]
!   !   !   !   Child: 0  Op: [ [type int] [line: 176]
!   !   !   !   !   Child: 0  Id: arr [type int] [line: 176]
!   !   !   !   !   Child: 1  Id: shot [type int] [line: 176]
!   !   !   !   Child: 1  Const: 7 [type int] [line: 176]
!   !   !   Child: 1  Compound [type void] [line: 176]
!   !   !   !   Child: 1  Assign: = [type int] [line: 177]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 177]
!   !   !   !   !   !   Child: 0  Id: arr [type int] [line: 177]
!   !   !   !   !   !   Child: 1  Id: shot [type int] [line: 177]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 177]
!   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 178]
!   !   !   !   !   Child: 0  Id: NumHits [type int] [line: 178]
!   !   !   !   Sibling: 1  If [type void] [line: 179]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 179]
!   !   !   !   !   !   Child: 0  Id: NumShots [type int] [line: 179]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 179]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 180]
!   !   !   !   !   !   Child: 0  Id: NumShots [type int] [line: 180]
!   !   !   !   !   !   Child: 1  Op: + [type int] [line: 180]
!   !   !   !   !   !   !   Child: 0  Id: NumShots [type int] [line: 180]
!   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 180]
!   !   !   Child: 2  Compound [type void] [line: 182]
!   !   !   !   Child: 1  Assign: = [type int] [line: 183]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 183]
!   !   !   !   !   !   Child: 0  Id: arr [type int] [line: 183]
!   !   !   !   !   !   Child: 1  Id: shot [type int] [line: 183]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 183]
!   !   Sibling: 0  Return [type void] [line: 185]
!   !   !   Child: 0  Id: NumHits [type int] [line: 185]
Sibling: 18  Func main returns type void [type void] [line: 188]
!   Child: 1  Compound [type void] [line: 189]
!   !   Child: 0  Var Ocean is array of type int [type int] [line: 190]
!   !   Sibling: 0  Var i of type int [type int] [line: 191]
!   !   Sibling: 1  Var Shot of type int [type int] [line: 191]
!   !   Sibling: 2  Var bGotit of type bool [type bool] [line: 192]
!   !   Child: 1  Assign: = [type int] [line: 195]
!   !   !   Child: 0  Id: shipsize [type int] [line: 195]
!   !   !   Child: 1  Const: 4 [type int] [line: 195]
!   !   Sibling: 0  Assign: = [type int] [line: 196]
!   !   !   Child: 0  Id: i [type int] [line: 196]
!   !   !   Child: 1  Const: 0 [type int] [line: 196]
!   !   Sibling: 1  While [type void] [line: 197]
!   !   !   Child: 0  Op: < [type bool] [line: 197]
!   !   !   !   Child: 0  Id: i [type int] [line: 197]
!   !   !   !   Child: 1  Const: 100 [type int] [line: 197]
!   !   !   Child: 1  Compound [type void] [line: 198]
!   !   !   !   Child: 1  Assign: = [type int] [line: 199]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 199]
!   !   !   !   !   !   Child: 0  Id: Ocean [type int] [line: 199]
!   !   !   !   !   !   Child: 1  Id: i [type int] [line: 199]
!   !   !   !   !   Child: 1  Const: 4 [type int] [line: 199]
!   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 200]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 200]
!   !   Sibling: 2  Call: HideShip [type void] [line: 203]
!   !   !   Child: 0  Id: Ocean [type int] [line: 203]
!   !   !   Sibling: 0  Const: 10 [type int] [line: 203]
!   !   Sibling: 3  Assign: = [type bool] [line: 205]
!   !   !   Child: 0  Id: bGotit [type bool] [line: 205]
!   !   !   Child: 1  Const: false [type bool] [line: 205]
!   !   Sibling: 4  Assign: = [type int] [line: 206]
!   !   !   Child: 0  Id: NumShots [type int] [line: 206]
!   !   !   Child: 1  Const: 10 [type int] [line: 206]
!   !   Sibling: 5  Assign: = [type int] [line: 207]
!   !   !   Child: 0  Id: NumHits [type int] [line: 207]
!   !   !   Child: 1  Const: 0 [type int] [line: 207]
!   !   Sibling: 6  While [type void] [line: 208]
!   !   !   Child: 0  Op: > [type bool] [line: 208]
!   !   !   !   Child: 0  Id: NumShots [type int] [line: 208]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 208]
!   !   !   Child: 1  Compound [type void] [line: 209]
!   !   !   !   Child: 1  Call: Display [type void] [line: 210]
!   !   !   !   !   Child: 0  Id: Ocean [type int] [line: 210]
!   !   !   !   !   Sibling: 0  Const: 10 [type int] [line: 210]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 211]
!   !   !   !   !   Child: 0  Id: Shot [type int] [line: 211]
!   !   !   !   !   Child: 1  Call: Aim [type int] [line: 211]
!   !   !   !   Sibling: 1  If [type void] [line: 212]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 212]
!   !   !   !   !   !   Child: 0  Call: Fire [type int] [line: 212]
!   !   !   !   !   !   !   Child: 0  Id: Ocean [type int] [line: 212]
!   !   !   !   !   !   !   Sibling: 0  Id: Shot [type int] [line: 212]
!   !   !   !   !   !   Child: 1  Id: shipsize [type int] [line: 212]
!   !   !   !   !   Child: 1  Compound [type void] [line: 212]
!   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 213]
!   !   !   !   !   !   !   Child: 0  Id: bGotit [type bool] [line: 213]
!   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 213]
!   !   !   !   !   !   Sibling: 0  Break [type void] [line: 214]
!   !   !   !   Sibling: 2  Assign: -= [type int] [line: 216]
!   !   !   !   !   Child: 0  Id: NumShots [type int] [line: 216]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 216]
!   !   Sibling: 7  Call: NewLine [type void] [line: 219]
!   !   Sibling: 8  Assign: = [type int] [line: 220]
!   !   !   Child: 0  Id: i [type int] [line: 220]
!   !   !   Child: 1  Const: 0 [type int] [line: 220]
!   !   Sibling: 9  While [type void] [line: 221]
!   !   !   Child: 0  Op: < [type bool] [line: 221]
!   !   !   !   Child: 0  Id: i [type int] [line: 221]
!   !   !   !   Child: 1  Const: 20 [type int] [line: 221]
!   !   !   Child: 1  Compound [type void] [line: 222]
!   !   !   !   Child: 1  If [type void] [line: 223]
!   !   !   !   !   Child: 0  Id: bGotit [type bool] [line: 223]
!   !   !   !   !   Child: 1  Call: Print [type void] [line: 224]
!   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 224]
!   !   !   !   !   Child: 2  Call: Print [type void] [line: 226]
!   !   !   !   !   !   Child: 0  Const: 0 [type int] [line: 226]
!   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 227]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 227]
!   !   Sibling: 10  Call: NewLine [type void] [line: 229]
!   !   Sibling: 11  Call: RevealShip [type void] [line: 230]
!   !   !   Child: 0  Id: Ocean [type int] [line: 230]
!   !   !   Sibling: 0  Const: 10 [type int] [line: 230]
Number of warnings: 0
Number of errors: 0
