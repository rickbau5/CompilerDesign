Func input returns type int [type int] [line: -1]
Sibling: 0  Func output returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type int [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type bool [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [type char] [line: -1]
Sibling: 4  Func outputc returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type void [type void] [line: -1]
Sibling: 5  Func outnl returns type void [type void] [line: -1]
Sibling: 6  Var r is array of type int [type int] [line: 22]
Sibling: 7  Var j of type int [type int] [line: 22]
Sibling: 8  Var code is array of type int [type int] [line: 22]
Sibling: 9  Var guess is array of type int [type int] [line: 22]
Sibling: 10  Var bull of type int [type int] [line: 22]
Sibling: 11  Var cow of type int [type int] [line: 22]
Sibling: 12  Func randnum returns type int [type int] [line: 27]
!   Child: 1  Compound [type void] [line: 28]
!   !   Child: 1  Assign: ++ [type int] [line: 29]
!   !   !   Child: 0  Id: j [type int] [line: 29]
!   !   Sibling: 0  If [type void] [line: 30]
!   !   !   Child: 0  Op: >= [type bool] [line: 30]
!   !   !   !   Child: 0  Id: j [type int] [line: 30]
!   !   !   !   Child: 1  Const: 100 [type int] [line: 30]
!   !   !   Child: 1  Assign: = [type int] [line: 30]
!   !   !   !   Child: 0  Id: j [type int] [line: 30]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 30]
!   !   Sibling: 1  Assign: = [type int] [line: 31]
!   !   !   Child: 0  Op: [ [type int] [line: 31]
!   !   !   !   Child: 0  Id: r [type int] [line: 31]
!   !   !   !   Child: 1  Id: j [type int] [line: 31]
!   !   !   Child: 1  Op: % [type int] [line: 31]
!   !   !   !   Child: 0  Op: + [type int] [line: 31]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 31]
!   !   !   !   !   !   Child: 0  Const: 1366 [type int] [line: 31]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 31]
!   !   !   !   !   !   !   Child: 0  Id: r [type int] [line: 31]
!   !   !   !   !   !   !   Child: 1  Op: - [type int] [line: 31]
!   !   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 31]
!   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 31]
!   !   !   !   !   Child: 1  Const: 150889 [type int] [line: 31]
!   !   !   !   Child: 1  Const: 714025 [type int] [line: 31]
!   !   Sibling: 2  Return [type void] [line: 32]
!   !   !   Child: 0  Op: [ [type int] [line: 32]
!   !   !   !   Child: 0  Id: r [type int] [line: 32]
!   !   !   !   Child: 1  Id: j [type int] [line: 32]
Sibling: 13  Func compare returns type void [type void] [line: 38]
!   Child: 1  Compound [type void] [line: 39]
!   !   Child: 0  Var i of type int [type int] [line: 40]
!   !   Sibling: 0  Var k of type int [type int] [line: 40]
!   !   Child: 1  Assign: = [type int] [line: 42]
!   !   !   Child: 0  Id: k [type int] [line: 42]
!   !   !   Child: 1  Const: 0 [type int] [line: 42]
!   !   Sibling: 0  Assign: = [type int] [line: 43]
!   !   !   Child: 0  Id: bull [type int] [line: 43]
!   !   !   Child: 1  Const: 0 [type int] [line: 43]
!   !   Sibling: 1  Assign: = [type int] [line: 44]
!   !   !   Child: 0  Id: cow [type int] [line: 44]
!   !   !   Child: 1  Const: 0 [type int] [line: 44]
!   !   Sibling: 2  While [type void] [line: 45]
!   !   !   Child: 0  Op: < [type bool] [line: 45]
!   !   !   !   Child: 0  Id: k [type int] [line: 45]
!   !   !   !   Child: 1  Const: 4 [type int] [line: 45]
!   !   !   Child: 1  Compound [type void] [line: 46]
!   !   !   !   Child: 1  If [type void] [line: 47]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 47]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 47]
!   !   !   !   !   !   !   Child: 0  Id: guess [type int] [line: 47]
!   !   !   !   !   !   !   Child: 1  Id: k [type int] [line: 47]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 47]
!   !   !   !   !   !   !   Child: 0  Id: code [type int] [line: 47]
!   !   !   !   !   !   !   Child: 1  Id: k [type int] [line: 47]
!   !   !   !   !   Child: 1  Compound [type void] [line: 48]
!   !   !   !   !   !   Child: 1  Assign: ++ [type int] [line: 49]
!   !   !   !   !   !   !   Child: 0  Id: bull [type int] [line: 49]
!   !   !   !   !   Child: 2  Compound [type void] [line: 52]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 53]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 53]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 53]
!   !   !   !   !   !   Sibling: 0  While [type void] [line: 54]
!   !   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 54]
!   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 54]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 54]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 55]
!   !   !   !   !   !   !   !   Child: 1  If [type void] [line: 56]
!   !   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 56]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 56]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: guess [type int] [line: 56]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: k [type int] [line: 56]
!   !   !   !   !   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 56]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: code [type int] [line: 56]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 56]
!   !   !   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 57]
!   !   !   !   !   !   !   !   !   !   Child: 1  Assign: ++ [type int] [line: 58]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: cow [type int] [line: 58]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Break [type void] [line: 59]
!   !   !   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 61]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 61]
!   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 64]
!   !   !   !   !   Child: 0  Id: k [type int] [line: 64]
Sibling: 14  Func main returns type int [type int] [line: 68]
!   Child: 1  Compound [type void] [line: 69]
!   !   Child: 0  Var seed of type int [type int] [line: 70]
!   !   Sibling: 0  Var i of type int [type int] [line: 71]
!   !   Sibling: 1  Var con of type int [type int] [line: 71]
!   !   Sibling: 2  Var limit of type int [type int] [line: 71]
!   !   Sibling: 3  Var quit of type bool [type bool] [line: 72]
!   !   Child: 1  Assign: = [type int] [line: 74]
!   !   !   Child: 0  Id: j [type int] [line: 74]
!   !   !   Child: 1  Const: 0 [type int] [line: 74]
!   !   Sibling: 0  Assign: = [type int] [line: 75]
!   !   !   Child: 0  Id: seed [type int] [line: 75]
!   !   !   Child: 1  Call: input [type int] [line: 75]
!   !   Sibling: 1  If [type void] [line: 76]
!   !   !   Child: 0  Op: < [type bool] [line: 76]
!   !   !   !   Child: 0  Id: seed [type int] [line: 76]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 76]
!   !   !   Child: 1  Assign: = [type int] [line: 76]
!   !   !   !   Child: 0  Id: seed [type int] [line: 76]
!   !   !   !   Child: 1  Op: - [type int] [line: 76]
!   !   !   !   !   Child: 0  Id: seed [type int] [line: 76]
!   !   Sibling: 2  Assign: = [type int] [line: 77]
!   !   !   Child: 0  Op: [ [type int] [line: 77]
!   !   !   !   Child: 0  Id: r [type int] [line: 77]
!   !   !   !   Child: 1  Id: j [type int] [line: 77]
!   !   !   Child: 1  Id: seed [type int] [line: 77]
!   !   Sibling: 3  Call: outnl [type void] [line: 78]
!   !   Sibling: 4  While [type void] [line: 79]
!   !   !   Child: 0  Const: true [type bool] [line: 79]
!   !   !   Child: 1  Compound [type void] [line: 80]
!   !   !   !   Child: 1  Assign: = [type int] [line: 81]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 81]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 81]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 82]
!   !   !   !   !   Child: 0  Id: limit [type int] [line: 82]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 82]
!   !   !   !   Sibling: 1  While [type void] [line: 83]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 83]
!   !   !   !   !   !   Child: 0  Id: i [type int] [line: 83]
!   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 83]
!   !   !   !   !   Child: 1  Compound [type void] [line: 84]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 85]
!   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 85]
!   !   !   !   !   !   !   !   Child: 0  Id: code [type int] [line: 85]
!   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 85]
!   !   !   !   !   !   !   Child: 1  Op: % [type int] [line: 85]
!   !   !   !   !   !   !   !   Child: 0  Call: randnum [type int] [line: 85]
!   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 85]
!   !   !   !   !   !   Sibling: 0  If [type void] [line: 86]
!   !   !   !   !   !   !   Child: 0  Op: != [type bool] [line: 86]
!   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 86]
!   !   !   !   !   !   !   !   !   Child: 0  Id: code [type int] [line: 86]
!   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 86]
!   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 86]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 87]
!   !   !   !   !   !   !   !   Child: 1  Assign: ++ [type int] [line: 88]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 88]
!   !   !   !   Sibling: 2  While [type void] [line: 93]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 93]
!   !   !   !   !   !   Child: 0  Id: limit [type int] [line: 93]
!   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 93]
!   !   !   !   !   Child: 1  Compound [type void] [line: 94]
!   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 95]
!   !   !   !   !   !   !   Child: 0  Id: quit [type bool] [line: 95]
!   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 95]
!   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 96]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 96]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 96]
!   !   !   !   !   !   Sibling: 1  While [type void] [line: 97]
!   !   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 97]
!   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 97]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 97]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 98]
!   !   !   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 99]
!   !   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 99]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: guess [type int] [line: 99]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 99]
!   !   !   !   !   !   !   !   !   Child: 1  Call: input [type int] [line: 99]
!   !   !   !   !   !   !   !   Sibling: 0  If [type void] [line: 102]
!   !   !   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 102]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 102]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 102]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: guess [type int] [line: 102]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 102]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 102]
!   !   !   !   !   !   !   !   !   !   Child: 1  Op: > [type bool] [line: 102]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 102]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: guess [type int] [line: 102]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 102]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 102]
!   !   !   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 103]
!   !   !   !   !   !   !   !   !   !   Child: 1  Assign: ++ [type int] [line: 104]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 104]
!   !   !   !   !   !   !   !   !   Child: 2  Compound [type void] [line: 107]
!   !   !   !   !   !   !   !   !   !   Child: 1  If [type void] [line: 110]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 110]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 110]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: guess [type int] [line: 110]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 110]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 110]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 111]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 112]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: quit [type bool] [line: 112]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 112]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Break [type void] [line: 113]
!   !   !   !   !   !   !   !   !   !   !   Child: 2  Compound [type void] [line: 116]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Call: outputb [type void] [line: 117]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 117]
!   !   !   !   !   !   Sibling: 2  If [type void] [line: 121]
!   !   !   !   !   !   !   Child: 0  Id: quit [type bool] [line: 121]
!   !   !   !   !   !   !   Child: 1  Break [type void] [line: 121]
!   !   !   !   !   !   Sibling: 3  Call: compare [type void] [line: 122]
!   !   !   !   !   !   Sibling: 4  Call: outnl [type void] [line: 123]
!   !   !   !   !   !   Sibling: 5  If [type void] [line: 126]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 126]
!   !   !   !   !   !   !   !   Child: 0  Id: bull [type int] [line: 126]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 126]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 127]
!   !   !   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 128]
!   !   !   !   !   !   !   !   !   Child: 0  Id: quit [type bool] [line: 128]
!   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 128]
!   !   !   !   !   !   !   !   Sibling: 0  Call: outputb [type void] [line: 129]
!   !   !   !   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 129]
!   !   !   !   !   !   !   !   Sibling: 1  Call: outnl [type void] [line: 130]
!   !   !   !   !   !   !   !   Sibling: 2  Break [type void] [line: 131]
!   !   !   !   !   !   !   Child: 2  Compound [type void] [line: 135]
!   !   !   !   !   !   !   !   Child: 1  Call: output [type void] [line: 136]
!   !   !   !   !   !   !   !   !   Child: 0  Id: bull [type int] [line: 136]
!   !   !   !   !   !   !   !   Sibling: 0  Call: output [type void] [line: 137]
!   !   !   !   !   !   !   !   !   Child: 0  Id: cow [type int] [line: 137]
!   !   !   !   !   !   !   !   Sibling: 1  Call: outnl [type void] [line: 138]
!   !   !   !   !   !   Sibling: 6  Assign: ++ [type int] [line: 140]
!   !   !   !   !   !   !   Child: 0  Id: limit [type int] [line: 140]
!   !   !   !   !   !   Sibling: 7  Assign: = [type bool] [line: 141]
!   !   !   !   !   !   !   Child: 0  Id: quit [type bool] [line: 141]
!   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 141]
!   !   !   !   Sibling: 3  If [type void] [line: 145]
!   !   !   !   !   Child: 0  Id: quit [type bool] [line: 145]
!   !   !   !   !   Child: 1  Compound [type void] [line: 146]
!   !   !   !   !   !   Child: 1  Call: outputb [type void] [line: 147]
!   !   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 147]
!   !   !   !   !   !   Sibling: 0  Call: outnl [type void] [line: 148]
!   !   !   !   !   !   Sibling: 1  Assign: = [type int] [line: 149]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 149]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 149]
!   !   !   !   !   !   Sibling: 2  While [type void] [line: 150]
!   !   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 150]
!   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 150]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 150]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 151]
!   !   !   !   !   !   !   !   Child: 1  Call: output [type void] [line: 152]
!   !   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 152]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: code [type int] [line: 152]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 152]
!   !   !   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 153]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 153]
!   !   !   !   !   !   Sibling: 3  Call: outnl [type void] [line: 155]
!   !   !   !   Sibling: 4  If [type void] [line: 159]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 159]
!   !   !   !   !   !   Child: 0  Call: input [type int] [line: 159]
!   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 159]
!   !   !   !   !   Child: 1  Compound [type void] [line: 160]
!   !   !   !   !   !   Child: 1  Break [type void] [line: 161]
!   !   !   !   Sibling: 5  Call: outnl [type void] [line: 163]
!   !   Sibling: 5  Return [type void] [line: 165]
!   !   !   Child: 0  Const: 0 [type int] [line: 165]
Number of warnings: 0
Number of errors: 0
