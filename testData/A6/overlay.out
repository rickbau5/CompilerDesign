Func input returns type int [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl returns type void [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Func main returns type void [ref: Global, size: -205, loc: 0] [type void] [line: 2]
!   Child: 1  Compound [type void] [line: 3]
!   !   Child: 0  Var z  [ref: Local, size: 1, loc: -2] [type int] [line: 4]
!   !   Child: 1  Assign: = [type int] [line: 5]
!   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 5]
!   !   !   Child: 1  Const: 111 [type int] [line: 5]
!   !   Sibling: 0  Compound [type void] [line: 6]
!   !   !   Child: 0  Var x is array  [ref: Local, size: 101, loc: -4] [type int] [line: 7]
!   !   !   Child: 1  Assign: = [type int] [line: 9]
!   !   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 9]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 9]
!   !   !   Sibling: 0  While [type void] [line: 10]
!   !   !   !   Child: 0  Op: < [type bool] [line: 10]
!   !   !   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 10]
!   !   !   !   !   Child: 1  Const: 100 [type int] [line: 10]
!   !   !   !   Child: 1  Compound [type void] [line: 10]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 11]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 11]
!   !   !   !   !   !   !   Child: 0  Id: x is array  [ref: Local, size: 101, loc: -4] [type int] [line: 11]
!   !   !   !   !   !   !   Child: 1  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 11]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 11]
!   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 12]
!   !   !   !   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 12]
!   !   Sibling: 1  Compound [type void] [line: 16]
!   !   !   Child: 0  Var y is array  [ref: Local, size: 101, loc: -105] [type int] [line: 17]
!   !   !   Child: 1  Assign: = [type int] [line: 19]
!   !   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 19]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 19]
!   !   !   Sibling: 0  While [type void] [line: 20]
!   !   !   !   Child: 0  Op: < [type bool] [line: 20]
!   !   !   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 20]
!   !   !   !   !   Child: 1  Const: 100 [type int] [line: 20]
!   !   !   !   Child: 1  Compound [type void] [line: 20]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 21]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 21]
!   !   !   !   !   !   !   Child: 0  Id: y is array  [ref: Local, size: 101, loc: -105] [type int] [line: 21]
!   !   !   !   !   !   !   Child: 1  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 21]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 21]
!   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 22]
!   !   !   !   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 22]
!   !   !   Sibling: 1  Call: output [ref: None, size: -3, loc: 0] [type void] [line: 25]
!   !   !   !   Child: 0  Op: [ [type int] [line: 25]
!   !   !   !   !   Child: 0  Id: y is array  [ref: Local, size: 101, loc: -105] [type int] [line: 25]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 25]
!   !   !   Sibling: 2  Call: outnl [ref: None, size: -2, loc: 0] [type void] [line: 25]
!   !   !   Sibling: 3  Assign: = [type int] [line: 26]
!   !   !   !   Child: 0  Op: [ [type int] [line: 26]
!   !   !   !   !   Child: 0  Id: y is array  [ref: Local, size: 101, loc: -105] [type int] [line: 26]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 26]
!   !   !   !   Child: 1  Const: 333 [type int] [line: 26]
!   !   !   Sibling: 4  Call: output [ref: None, size: -3, loc: 0] [type void] [line: 27]
!   !   !   !   Child: 0  Op: [ [type int] [line: 27]
!   !   !   !   !   Child: 0  Id: y is array  [ref: Local, size: 101, loc: -105] [type int] [line: 27]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 27]
!   !   !   Sibling: 5  Call: outnl [ref: None, size: -2, loc: 0] [type void] [line: 27]
!   !   Sibling: 2  Call: output [ref: None, size: -3, loc: 0] [type void] [line: 29]
!   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -2] [type int] [line: 29]
!   !   Sibling: 3  Call: outnl [ref: None, size: -2, loc: 0] [type void] [line: 29]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0
