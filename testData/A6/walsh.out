Func input returns type int [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl returns type void [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Func pow returns type int [ref: Global, size: -6, loc: 0] [type int] [line: 3]
!   Child: 0  Param n  [ref: Param, size: 1, loc: -2] [type int] [line: 3]
!   Sibling: 0  Param p  [ref: Param, size: 1, loc: -3] [type int] [line: 3]
!   Child: 1  Compound [type void] [line: 4]
!   !   Child: 0  Var sqr  [ref: Local, size: 1, loc: -4] [type int] [line: 5]
!   !   Sibling: 0  Var ans  [ref: Local, size: 1, loc: -5] [type int] [line: 6]
!   !   Child: 1  Assign: = [type int] [line: 8]
!   !   !   Child: 0  Id: ans  [ref: Local, size: 1, loc: -5] [type int] [line: 8]
!   !   !   Child: 1  Const: 1 [type int] [line: 8]
!   !   Sibling: 0  Assign: = [type int] [line: 9]
!   !   !   Child: 0  Id: sqr  [ref: Local, size: 1, loc: -4] [type int] [line: 9]
!   !   !   Child: 1  Id: n  [ref: Param, size: 1, loc: -2] [type int] [line: 9]
!   !   Sibling: 1  While [type void] [line: 10]
!   !   !   Child: 0  Const: true [type bool] [line: 10]
!   !   !   Child: 1  Compound [type void] [line: 10]
!   !   !   !   Child: 1  If [type void] [line: 11]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 11]
!   !   !   !   !   !   Child: 0  Op: % [type int] [line: 11]
!   !   !   !   !   !   !   Child: 0  Id: p  [ref: Param, size: 1, loc: -3] [type int] [line: 11]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 11]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 11]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 11]
!   !   !   !   !   !   Child: 0  Id: ans  [ref: Local, size: 1, loc: -5] [type int] [line: 11]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 11]
!   !   !   !   !   !   !   Child: 0  Id: ans  [ref: Local, size: 1, loc: -5] [type int] [line: 11]
!   !   !   !   !   !   !   Child: 1  Id: sqr  [ref: Local, size: 1, loc: -4] [type int] [line: 11]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 12]
!   !   !   !   !   Child: 0  Id: p  [ref: Param, size: 1, loc: -3] [type int] [line: 12]
!   !   !   !   !   Child: 1  Op: / [type int] [line: 12]
!   !   !   !   !   !   Child: 0  Id: p  [ref: Param, size: 1, loc: -3] [type int] [line: 12]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 12]
!   !   !   !   Sibling: 1  If [type void] [line: 13]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 13]
!   !   !   !   !   !   Child: 0  Id: p  [ref: Param, size: 1, loc: -3] [type int] [line: 13]
!   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 13]
!   !   !   !   !   Child: 1  Return [type void] [line: 13]
!   !   !   !   !   !   Child: 0  Id: ans  [ref: Local, size: 1, loc: -5] [type int] [line: 13]
!   !   !   !   Sibling: 2  Assign: = [type int] [line: 14]
!   !   !   !   !   Child: 0  Id: sqr  [ref: Local, size: 1, loc: -4] [type int] [line: 14]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 14]
!   !   !   !   !   !   Child: 0  Id: sqr  [ref: Local, size: 1, loc: -4] [type int] [line: 14]
!   !   !   !   !   !   Child: 1  Id: sqr  [ref: Local, size: 1, loc: -4] [type int] [line: 14]
Sibling: 7  Func getFunc returns type int [ref: Global, size: -6, loc: 0] [type int] [line: 18]
!   Child: 0  Param f is array  [ref: Param, size: 1, loc: -2] [type int] [line: 18]
!   Child: 1  Compound [type void] [line: 19]
!   !   Child: 0  Var numbits  [ref: Local, size: 1, loc: -3] [type int] [line: 20]
!   !   Sibling: 0  Var i  [ref: Local, size: 1, loc: -4] [type int] [line: 21]
!   !   Sibling: 1  Var size  [ref: Local, size: 1, loc: -5] [type int] [line: 22]
!   !   Child: 1  If [type void] [line: 24]
!   !   !   Child: 0  Op: == [type bool] [line: 24]
!   !   !   !   Child: 0  Assign: = [type int] [line: 24]
!   !   !   !   !   Child: 0  Id: numbits  [ref: Local, size: 1, loc: -3] [type int] [line: 24]
!   !   !   !   !   Child: 1  Call: input [ref: None, size: -2, loc: 0] [type int] [line: 24]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 24]
!   !   !   Child: 1  Return [type void] [line: 24]
!   !   !   !   Child: 0  Const: 0 [type int] [line: 24]
!   !   Sibling: 0  Assign: = [type int] [line: 25]
!   !   !   Child: 0  Id: size  [ref: Local, size: 1, loc: -5] [type int] [line: 25]
!   !   !   Child: 1  Call: pow [ref: None, size: -6, loc: 0] [type int] [line: 25]
!   !   !   !   Child: 0  Const: 2 [type int] [line: 25]
!   !   !   !   Sibling: 0  Id: numbits  [ref: Local, size: 1, loc: -3] [type int] [line: 25]
!   !   Sibling: 1  Assign: = [type int] [line: 26]
!   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 26]
!   !   !   Child: 1  Const: 0 [type int] [line: 26]
!   !   Sibling: 2  While [type void] [line: 27]
!   !   !   Child: 0  Op: < [type bool] [line: 27]
!   !   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 27]
!   !   !   !   Child: 1  Id: size  [ref: Local, size: 1, loc: -5] [type int] [line: 27]
!   !   !   Child: 1  Compound [type void] [line: 27]
!   !   !   !   Child: 1  Assign: = [type int] [line: 28]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 28]
!   !   !   !   !   !   Child: 0  Id: f is array  [ref: Param, size: 1, loc: -2] [type int] [line: 28]
!   !   !   !   !   !   Child: 1  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 28]
!   !   !   !   !   Child: 1  Call: input [ref: None, size: -2, loc: 0] [type int] [line: 28]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 29]
!   !   !   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 29]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 29]
!   !   !   !   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 29]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 29]
!   !   Sibling: 3  Return [type void] [line: 32]
!   !   !   Child: 0  Id: numbits  [ref: Local, size: 1, loc: -3] [type int] [line: 32]
Sibling: 8  Func printFunc returns type void [ref: Global, size: -5, loc: 0] [type void] [line: 35]
!   Child: 0  Param f is array  [ref: Param, size: 1, loc: -2] [type int] [line: 35]
!   Sibling: 0  Param size  [ref: Param, size: 1, loc: -3] [type int] [line: 35]
!   Child: 1  Compound [type void] [line: 36]
!   !   Child: 0  Var i  [ref: Local, size: 1, loc: -4] [type int] [line: 37]
!   !   Child: 1  Assign: = [type int] [line: 39]
!   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 39]
!   !   !   Child: 1  Const: 0 [type int] [line: 39]
!   !   Sibling: 0  While [type void] [line: 40]
!   !   !   Child: 0  Op: < [type bool] [line: 40]
!   !   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 40]
!   !   !   !   Child: 1  Id: size  [ref: Param, size: 1, loc: -3] [type int] [line: 40]
!   !   !   Child: 1  Compound [type void] [line: 40]
!   !   !   !   Child: 1  Call: output [ref: None, size: -3, loc: 0] [type void] [line: 41]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 41]
!   !   !   !   !   !   Child: 0  Id: f is array  [ref: Param, size: 1, loc: -2] [type int] [line: 41]
!   !   !   !   !   !   Child: 1  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 41]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 42]
!   !   !   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 42]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 42]
!   !   !   !   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 42]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 42]
!   !   Sibling: 1  Call: outnl [ref: None, size: -2, loc: 0] [type void] [line: 44]
Sibling: 9  Func fwt returns type void [ref: Global, size: -8, loc: 0] [type void] [line: 48]
!   Child: 0  Param w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 48]
!   Sibling: 0  Param start  [ref: Param, size: 1, loc: -3] [type int] [line: 48]
!   Sibling: 1  Param size  [ref: Param, size: 1, loc: -4] [type int] [line: 48]
!   Child: 1  Compound [type void] [line: 49]
!   !   Child: 0  Var a  [ref: Local, size: 1, loc: -5] [type int] [line: 50]
!   !   Sibling: 0  Var b  [ref: Local, size: 1, loc: -6] [type int] [line: 50]
!   !   Sibling: 1  Var tmp  [ref: Local, size: 1, loc: -7] [type int] [line: 50]
!   !   Child: 1  Assign: = [type int] [line: 52]
!   !   !   Child: 0  Id: size  [ref: Param, size: 1, loc: -4] [type int] [line: 52]
!   !   !   Child: 1  Op: / [type int] [line: 52]
!   !   !   !   Child: 0  Id: size  [ref: Param, size: 1, loc: -4] [type int] [line: 52]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 52]
!   !   Sibling: 0  If [type void] [line: 53]
!   !   !   Child: 0  Op: > [type bool] [line: 53]
!   !   !   !   Child: 0  Id: size  [ref: Param, size: 1, loc: -4] [type int] [line: 53]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 53]
!   !   !   Child: 1  Compound [type void] [line: 53]
!   !   !   !   Child: 1  Call: fwt [ref: None, size: -5, loc: 0] [type void] [line: 54]
!   !   !   !   !   Child: 0  Id: w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 54]
!   !   !   !   !   Sibling: 0  Id: start  [ref: Param, size: 1, loc: -3] [type int] [line: 54]
!   !   !   !   !   Sibling: 1  Id: size  [ref: Param, size: 1, loc: -4] [type int] [line: 54]
!   !   !   !   Sibling: 0  Call: fwt [ref: None, size: -5, loc: 0] [type void] [line: 55]
!   !   !   !   !   Child: 0  Id: w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 55]
!   !   !   !   !   Sibling: 0  Op: + [type int] [line: 55]
!   !   !   !   !   !   Child: 0  Id: start  [ref: Param, size: 1, loc: -3] [type int] [line: 55]
!   !   !   !   !   !   Child: 1  Id: size  [ref: Param, size: 1, loc: -4] [type int] [line: 55]
!   !   !   !   !   Sibling: 1  Id: size  [ref: Param, size: 1, loc: -4] [type int] [line: 55]
!   !   Sibling: 1  Assign: = [type int] [line: 58]
!   !   !   Child: 0  Id: a  [ref: Local, size: 1, loc: -5] [type int] [line: 58]
!   !   !   Child: 1  Id: start  [ref: Param, size: 1, loc: -3] [type int] [line: 58]
!   !   Sibling: 2  Assign: = [type int] [line: 59]
!   !   !   Child: 0  Id: b  [ref: Local, size: 1, loc: -6] [type int] [line: 59]
!   !   !   Child: 1  Op: + [type int] [line: 59]
!   !   !   !   Child: 0  Id: start  [ref: Param, size: 1, loc: -3] [type int] [line: 59]
!   !   !   !   Child: 1  Id: size  [ref: Param, size: 1, loc: -4] [type int] [line: 59]
!   !   Sibling: 3  While [type void] [line: 60]
!   !   !   Child: 0  Op: < [type bool] [line: 60]
!   !   !   !   Child: 0  Id: a  [ref: Local, size: 1, loc: -5] [type int] [line: 60]
!   !   !   !   Child: 1  Op: + [type int] [line: 60]
!   !   !   !   !   Child: 0  Id: start  [ref: Param, size: 1, loc: -3] [type int] [line: 60]
!   !   !   !   !   Child: 1  Id: size  [ref: Param, size: 1, loc: -4] [type int] [line: 60]
!   !   !   Child: 1  Compound [type void] [line: 60]
!   !   !   !   Child: 1  Assign: = [type int] [line: 61]
!   !   !   !   !   Child: 0  Id: tmp  [ref: Local, size: 1, loc: -7] [type int] [line: 61]
!   !   !   !   !   Child: 1  Op: [ [type int] [line: 61]
!   !   !   !   !   !   Child: 0  Id: w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 61]
!   !   !   !   !   !   Child: 1  Id: a  [ref: Local, size: 1, loc: -5] [type int] [line: 61]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 62]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 62]
!   !   !   !   !   !   Child: 0  Id: w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 62]
!   !   !   !   !   !   Child: 1  Id: a  [ref: Local, size: 1, loc: -5] [type int] [line: 62]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 62]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 62]
!   !   !   !   !   !   !   Child: 0  Id: w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 62]
!   !   !   !   !   !   !   Child: 1  Id: a  [ref: Local, size: 1, loc: -5] [type int] [line: 62]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 62]
!   !   !   !   !   !   !   Child: 0  Id: w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 62]
!   !   !   !   !   !   !   Child: 1  Id: b  [ref: Local, size: 1, loc: -6] [type int] [line: 62]
!   !   !   !   Sibling: 1  Assign: = [type int] [line: 63]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 63]
!   !   !   !   !   !   Child: 0  Id: w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 63]
!   !   !   !   !   !   Child: 1  Id: b  [ref: Local, size: 1, loc: -6] [type int] [line: 63]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 63]
!   !   !   !   !   !   Child: 0  Id: tmp  [ref: Local, size: 1, loc: -7] [type int] [line: 63]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 63]
!   !   !   !   !   !   !   Child: 0  Id: w is array  [ref: Param, size: 1, loc: -2] [type int] [line: 63]
!   !   !   !   !   !   !   Child: 1  Id: b  [ref: Local, size: 1, loc: -6] [type int] [line: 63]
!   !   !   !   Sibling: 2  Assign: = [type int] [line: 64]
!   !   !   !   !   Child: 0  Id: a  [ref: Local, size: 1, loc: -5] [type int] [line: 64]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 64]
!   !   !   !   !   !   Child: 0  Id: a  [ref: Local, size: 1, loc: -5] [type int] [line: 64]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 64]
!   !   !   !   Sibling: 3  Assign: = [type int] [line: 65]
!   !   !   !   !   Child: 0  Id: b  [ref: Local, size: 1, loc: -6] [type int] [line: 65]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 65]
!   !   !   !   !   !   Child: 0  Id: b  [ref: Local, size: 1, loc: -6] [type int] [line: 65]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 65]
Sibling: 10  Func div returns type void [ref: Global, size: -5, loc: 0] [type void] [line: 69]
!   Child: 0  Param f is array  [ref: Param, size: 1, loc: -2] [type int] [line: 69]
!   Sibling: 0  Param size  [ref: Param, size: 1, loc: -3] [type int] [line: 69]
!   Child: 1  Compound [type void] [line: 70]
!   !   Child: 0  Var i  [ref: Local, size: 1, loc: -4] [type int] [line: 71]
!   !   Child: 1  Assign: = [type int] [line: 73]
!   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 73]
!   !   !   Child: 1  Const: 0 [type int] [line: 73]
!   !   Sibling: 0  While [type void] [line: 74]
!   !   !   Child: 0  Op: < [type bool] [line: 74]
!   !   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 74]
!   !   !   !   Child: 1  Id: size  [ref: Param, size: 1, loc: -3] [type int] [line: 74]
!   !   !   Child: 1  Compound [type void] [line: 74]
!   !   !   !   Child: 1  Assign: = [type int] [line: 75]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 75]
!   !   !   !   !   !   Child: 0  Id: f is array  [ref: Param, size: 1, loc: -2] [type int] [line: 75]
!   !   !   !   !   !   Child: 1  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 75]
!   !   !   !   !   Child: 1  Op: / [type int] [line: 75]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 75]
!   !   !   !   !   !   !   Child: 0  Id: f is array  [ref: Param, size: 1, loc: -2] [type int] [line: 75]
!   !   !   !   !   !   !   Child: 1  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 75]
!   !   !   !   !   !   Child: 1  Id: size  [ref: Param, size: 1, loc: -3] [type int] [line: 75]
!   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 76]
!   !   !   !   !   Child: 0  Id: i  [ref: Local, size: 1, loc: -4] [type int] [line: 76]
Sibling: 11  Func main returns type int [ref: Global, size: -263, loc: 0] [type int] [line: 80]
!   Child: 1  Compound [type void] [line: 81]
!   !   Child: 0  Var f is array  [ref: Local, size: 257, loc: -3] [type int] [line: 82]
!   !   Sibling: 0  Var j  [ref: Local, size: 1, loc: -259] [type int] [line: 83]
!   !   Sibling: 1  Var size  [ref: Local, size: 1, loc: -260] [type int] [line: 85]
!   !   Sibling: 2  Var numbits  [ref: Local, size: 1, loc: -261] [type int] [line: 86]
!   !   Sibling: 3  Var half  [ref: Local, size: 1, loc: -262] [type int] [line: 87]
!   !   Child: 1  While [type void] [line: 89]
!   !   !   Child: 0  Const: true [type bool] [line: 89]
!   !   !   Child: 1  Compound [type void] [line: 89]
!   !   !   !   Child: 1  If [type void] [line: 90]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 90]
!   !   !   !   !   !   Child: 0  Assign: = [type int] [line: 90]
!   !   !   !   !   !   !   Child: 0  Id: numbits  [ref: Local, size: 1, loc: -261] [type int] [line: 90]
!   !   !   !   !   !   !   Child: 1  Call: getFunc [ref: None, size: -6, loc: 0] [type int] [line: 90]
!   !   !   !   !   !   !   !   Child: 0  Id: f is array  [ref: Local, size: 257, loc: -3] [type int] [line: 90]
!   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 90]
!   !   !   !   !   Child: 1  Return [type void] [line: 90]
!   !   !   !   !   !   Child: 0  Const: 0 [type int] [line: 90]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 91]
!   !   !   !   !   Child: 0  Id: size  [ref: Local, size: 1, loc: -260] [type int] [line: 91]
!   !   !   !   !   Child: 1  Call: pow [ref: None, size: -6, loc: 0] [type int] [line: 91]
!   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 91]
!   !   !   !   !   !   Sibling: 0  Id: numbits  [ref: Local, size: 1, loc: -261] [type int] [line: 91]
!   !   !   !   Sibling: 1  Assign: = [type int] [line: 92]
!   !   !   !   !   Child: 0  Id: half  [ref: Local, size: 1, loc: -262] [type int] [line: 92]
!   !   !   !   !   Child: 1  Op: / [type int] [line: 92]
!   !   !   !   !   !   Child: 0  Id: size  [ref: Local, size: 1, loc: -260] [type int] [line: 92]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 92]
!   !   !   !   Sibling: 2  Call: fwt [ref: None, size: -8, loc: 0] [type void] [line: 94]
!   !   !   !   !   Child: 0  Id: f is array  [ref: Local, size: 257, loc: -3] [type int] [line: 94]
!   !   !   !   !   Sibling: 0  Const: 0 [type int] [line: 94]
!   !   !   !   !   Sibling: 1  Id: size  [ref: Local, size: 1, loc: -260] [type int] [line: 94]
!   !   !   !   Sibling: 3  Call: printFunc [ref: None, size: -5, loc: 0] [type void] [line: 95]
!   !   !   !   !   Child: 0  Id: f is array  [ref: Local, size: 257, loc: -3] [type int] [line: 95]
!   !   !   !   !   Sibling: 0  Id: size  [ref: Local, size: 1, loc: -260] [type int] [line: 95]
!   !   !   !   Sibling: 4  Call: fwt [ref: None, size: -8, loc: 0] [type void] [line: 97]
!   !   !   !   !   Child: 0  Id: f is array  [ref: Local, size: 257, loc: -3] [type int] [line: 97]
!   !   !   !   !   Sibling: 0  Const: 0 [type int] [line: 97]
!   !   !   !   !   Sibling: 1  Id: size  [ref: Local, size: 1, loc: -260] [type int] [line: 97]
!   !   !   !   Sibling: 5  Call: div [ref: None, size: -5, loc: 0] [type void] [line: 98]
!   !   !   !   !   Child: 0  Id: f is array  [ref: Local, size: 257, loc: -3] [type int] [line: 98]
!   !   !   !   !   Sibling: 0  Id: size  [ref: Local, size: 1, loc: -260] [type int] [line: 98]
!   !   !   !   Sibling: 6  Call: printFunc [ref: None, size: -5, loc: 0] [type void] [line: 99]
!   !   !   !   !   Child: 0  Id: f is array  [ref: Local, size: 257, loc: -3] [type int] [line: 99]
!   !   !   !   !   Sibling: 0  Id: size  [ref: Local, size: 1, loc: -260] [type int] [line: 99]
!   !   Sibling: 0  Return [type void] [line: 101]
!   !   !   Child: 0  Const: 0 [type int] [line: 101]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0
