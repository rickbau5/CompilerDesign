Func input returns type int [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl returns type void [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Var gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 6]
Sibling: 7  Func wallace returns type void [ref: Global, size: -13, loc: 0] [type void] [line: 8]
!   Child: 0  Param wrong  [ref: Param, size: 1, loc: -2] [type int] [line: 8]
!   Sibling: 0  Param trousers  [ref: Param, size: 1, loc: -3] [type int] [line: 8]
!   Child: 1  Compound [type void] [line: 9]
!   !   Child: 0  Var close  [ref: Local, size: 1, loc: -4] [type bool] [line: 10]
!   !   !   Child: 0  Const: true [type bool] [line: 10]
!   !   Sibling: 0  Var shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 10]
!   !   !   Child: 0  Const: false [type bool] [line: 10]
!   !   Child: 1  Const: 1729 [type int] [line: 12]
!   !   Sibling: 0  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 13]
!   !   Sibling: 1  Op: + [type int] [line: 14]
!   !   !   Child: 0  Op: * [type int] [line: 14]
!   !   !   !   Child: 0  Const: 11 [type int] [line: 14]
!   !   !   !   Child: 1  Const: 22 [type int] [line: 14]
!   !   !   Child: 1  Op: * [type int] [line: 14]
!   !   !   !   Child: 0  Const: 33 [type int] [line: 14]
!   !   !   !   Child: 1  Const: 44 [type int] [line: 14]
!   !   Sibling: 2  Assign: = [type bool] [line: 15]
!   !   !   Child: 0  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 15]
!   !   !   Child: 1  Id: shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 15]
!   !   Sibling: 3  Assign: = [type int] [line: 16]
!   !   !   Child: 0  Id: wrong  [ref: Param, size: 1, loc: -2] [type int] [line: 16]
!   !   !   Child: 1  Op: % [type int] [line: 16]
!   !   !   !   Child: 0  Id: trousers  [ref: Param, size: 1, loc: -3] [type int] [line: 16]
!   !   !   !   Child: 1  Op: / [type int] [line: 16]
!   !   !   !   !   Child: 0  Const: 666 [type int] [line: 16]
!   !   !   !   !   Child: 1  Id: wrong  [ref: Param, size: 1, loc: -2] [type int] [line: 16]
!   !   Sibling: 4  Assign: = [type int] [line: 17]
!   !   !   Child: 0  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 17]
!   !   !   Child: 1  Op: + [type int] [line: 17]
!   !   !   !   Child: 0  Op: - [type int] [line: 17]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 17]
!   !   !   !   !   !   Child: 0  Id: wrong  [ref: Param, size: 1, loc: -2] [type int] [line: 17]
!   !   !   !   !   !   Child: 1  Id: trousers  [ref: Param, size: 1, loc: -3] [type int] [line: 17]
!   !   !   !   !   Child: 1  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 17]
!   !   !   !   Child: 1  Op: - [type int] [line: 17]
!   !   !   !   !   Child: 0  Const: 42 [type int] [line: 17]
!   !   Sibling: 5  Assign: += [type int] [line: 18]
!   !   !   Child: 0  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 18]
!   !   !   Child: 1  Const: 27182818 [type int] [line: 18]
!   !   Sibling: 6  Assign: -= [type int] [line: 19]
!   !   !   Child: 0  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 19]
!   !   !   Child: 1  Op: - [type int] [line: 19]
!   !   !   !   Child: 0  Const: 31415927 [type int] [line: 19]
!   !   Sibling: 7  Assign: /= [type int] [line: 20]
!   !   !   Child: 0  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 20]
!   !   !   Child: 1  Assign: *= [type int] [line: 20]
!   !   !   !   Child: 0  Id: wrong  [ref: Param, size: 1, loc: -2] [type int] [line: 20]
!   !   !   !   Child: 1  Const: 42 [type int] [line: 20]
!   !   Sibling: 8  Assign: = [type bool] [line: 21]
!   !   !   Child: 0  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 21]
!   !   !   Child: 1  Op: and [type bool] [line: 21]
!   !   !   !   Child: 0  Op: < [type bool] [line: 21]
!   !   !   !   !   Child: 0  Id: wrong  [ref: Param, size: 1, loc: -2] [type int] [line: 21]
!   !   !   !   !   Child: 1  Id: trousers  [ref: Param, size: 1, loc: -3] [type int] [line: 21]
!   !   !   !   Child: 1  Op: <= [type bool] [line: 21]
!   !   !   !   !   Child: 0  Id: trousers  [ref: Param, size: 1, loc: -3] [type int] [line: 21]
!   !   !   !   !   Child: 1  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 21]
!   !   Sibling: 9  Assign: = [type bool] [line: 22]
!   !   !   Child: 0  Id: shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 22]
!   !   !   Child: 1  Op: and [type bool] [line: 22]
!   !   !   !   Child: 0  Op: > [type bool] [line: 22]
!   !   !   !   !   Child: 0  Id: wrong  [ref: Param, size: 1, loc: -2] [type int] [line: 22]
!   !   !   !   !   Child: 1  Id: trousers  [ref: Param, size: 1, loc: -3] [type int] [line: 22]
!   !   !   !   Child: 1  Op: >= [type bool] [line: 22]
!   !   !   !   !   Child: 0  Id: trousers  [ref: Param, size: 1, loc: -3] [type int] [line: 22]
!   !   !   !   !   Child: 1  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 22]
!   !   Sibling: 10  Compound [type void] [line: 23]
!   !   !   Child: 0  Var a  [ref: Local, size: 1, loc: -6] [type int] [line: 24]
!   !   !   Sibling: 0  Var grand  [ref: Local, size: 1, loc: -7] [type int] [line: 24]
!   !   !   !   Child: 0  Op: / [type int] [line: 24]
!   !   !   !   !   Child: 0  Const: 1 [type int] [line: 24]
!   !   !   !   !   Child: 1  Const: 2 [type int] [line: 24]
!   !   !   Sibling: 1  Var day  [ref: Local, size: 1, loc: -8] [type int] [line: 24]
!   !   !   !   Child: 0  Op: * [type int] [line: 24]
!   !   !   !   !   Child: 0  Const: 3 [type int] [line: 24]
!   !   !   !   !   Child: 1  Const: 4 [type int] [line: 24]
!   !   !   Sibling: 2  Var out  [ref: Local, size: 1, loc: -9] [type int] [line: 24]
!   !   !   !   Child: 0  Op: - [type int] [line: 24]
!   !   !   !   !   Child: 0  Const: 9 [type int] [line: 24]
!   !   !   Child: 1  Assign: = [type int] [line: 25]
!   !   !   !   Child: 0  Id: a  [ref: Local, size: 1, loc: -6] [type int] [line: 25]
!   !   !   !   Child: 1  Assign: += [type int] [line: 25]
!   !   !   !   !   Child: 0  Id: grand  [ref: Local, size: 1, loc: -7] [type int] [line: 25]
!   !   !   !   !   Child: 1  Assign: -= [type int] [line: 25]
!   !   !   !   !   !   Child: 0  Id: day  [ref: Local, size: 1, loc: -8] [type int] [line: 25]
!   !   !   !   !   !   Child: 1  Id: out  [ref: Local, size: 1, loc: -9] [type int] [line: 25]
!   !   Sibling: 11  Assign: = [type bool] [line: 27]
!   !   !   Child: 0  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 27]
!   !   !   Child: 1  Op: and [type bool] [line: 27]
!   !   !   !   Child: 0  Op: < [type bool] [line: 27]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Op: * [type int] [line: 27]
!   !   !   !   !   !   !   Child: 0  Op: - [type int] [line: 27]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 27]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 27]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 27]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 27]
!   !   !   !   !   !   Child: 1  Const: 5 [type int] [line: 27]
!   !   !   !   Child: 1  Op: > [type bool] [line: 27]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Const: 6 [type int] [line: 27]
!   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 27]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 27]
!   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 27]
!   !   Sibling: 12  Assign: = [type bool] [line: 28]
!   !   !   Child: 0  Id: shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 28]
!   !   !   Child: 1  Op: or [type bool] [line: 28]
!   !   !   !   Child: 0  Const: true [type bool] [line: 28]
!   !   !   !   Child: 1  Op: and [type bool] [line: 28]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 28]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 28]
!   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 28]
!   !   !   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 28]
!   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 28]
!   !   !   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 28]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 28]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 28]
!   !   !   !   !   !   !   Child: 0  Const: 4 [type int] [line: 28]
!   !   !   !   !   !   !   Child: 1  Const: 5 [type int] [line: 28]
!   !   !   !   !   Child: 1  Op: > [type bool] [line: 28]
!   !   !   !   !   !   Child: 0  Op: + [type int] [line: 28]
!   !   !   !   !   !   !   Child: 0  Const: 6 [type int] [line: 28]
!   !   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 28]
!   !   !   !   !   !   Child: 1  Op: - [type int] [line: 28]
!   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 28]
!   !   Sibling: 13  If [type void] [line: 29]
!   !   !   Child: 0  Op: != [type bool] [line: 29]
!   !   !   !   Child: 0  Id: shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 29]
!   !   !   !   Child: 1  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 29]
!   !   !   Child: 1  Assign: = [type bool] [line: 29]
!   !   !   !   Child: 0  Id: shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 29]
!   !   !   !   Child: 1  Op: not [type bool] [line: 29]
!   !   !   !   !   Child: 0  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 29]
!   !   Sibling: 14  If [type void] [line: 30]
!   !   !   Child: 0  Op: or [type bool] [line: 30]
!   !   !   !   Child: 0  Op: not [type bool] [line: 30]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 30]
!   !   !   !   !   !   Child: 0  Id: shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 30]
!   !   !   !   !   !   Child: 1  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 30]
!   !   !   !   Child: 1  Op: not [type bool] [line: 30]
!   !   !   !   !   Child: 0  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 30]
!   !   !   Child: 1  Assign: = [type bool] [line: 30]
!   !   !   !   Child: 0  Id: shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 30]
!   !   !   !   Child: 1  Const: true [type bool] [line: 30]
!   !   !   Child: 2  Assign: = [type bool] [line: 31]
!   !   !   !   Child: 0  Id: close  [ref: Local, size: 1, loc: -4] [type bool] [line: 31]
!   !   !   !   Child: 1  Const: false [type bool] [line: 31]
!   !   Sibling: 15  While [type void] [line: 32]
!   !   !   Child: 0  Id: shave  [ref: Local, size: 1, loc: -5] [type bool] [line: 32]
!   !   !   Child: 1  Compound [type void] [line: 32]
!   !   !   !   Child: 0  Var were  [ref: Static, size: 1, loc: -1] [type int] [line: 33]
!   !   !   !   Sibling: 0  Var rabbit  [ref: Static, size: 1, loc: -2] [type int] [line: 33]
!   !   !   !   Sibling: 1  Var sheep is array  [ref: Static, size: 11, loc: -4] [type int] [line: 34]
!   !   !   !   Child: 1  Assign: = [type int] [line: 36]
!   !   !   !   !   Child: 0  Id: sheep is array  [ref: Static, size: 11, loc: -4] [type int] [line: 36]
!   !   !   !   !   Child: 1  Id: sheep is array  [ref: Static, size: 11, loc: -4] [type int] [line: 36]
!   !   !   !   Sibling: 0  Op: == [type bool] [line: 37]
!   !   !   !   !   Child: 0  Id: sheep is array  [ref: Static, size: 11, loc: -4] [type int] [line: 37]
!   !   !   !   !   Child: 1  Id: sheep is array  [ref: Static, size: 11, loc: -4] [type int] [line: 37]
!   !   !   !   Sibling: 1  Assign: = [type int] [line: 38]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 38]
!   !   !   !   !   !   Child: 0  Id: sheep is array  [ref: Static, size: 11, loc: -4] [type int] [line: 38]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 38]
!   !   !   !   !   Child: 1  Const: 1618 [type int] [line: 38]
!   !   !   !   Sibling: 2  If [type void] [line: 39]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 39]
!   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 39]
!   !   !   !   !   !   !   Child: 0  Id: sheep is array  [ref: Static, size: 11, loc: -4] [type int] [line: 39]
!   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 39]
!   !   !   !   !   !   Child: 1  Const: 496 [type int] [line: 39]
!   !   !   !   !   Child: 1  Break [type void] [line: 39]
!   !   !   !   Sibling: 3  Call: wallace [ref: None, size: -4, loc: 0] [type void] [line: 40]
!   !   !   !   !   Child: 0  Assign: -- [type int] [line: 40]
!   !   !   !   !   !   Child: 0  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 40]
!   !   !   !   !   Sibling: 0  Op: - [type int] [line: 40]
!   !   !   !   !   !   Child: 0  Id: were  [ref: Static, size: 1, loc: -1] [type int] [line: 40]
!   !   !   !   !   !   Child: 1  Id: rabbit  [ref: Static, size: 1, loc: -2] [type int] [line: 40]
!   !   !   !   Sibling: 4  Compound [type void] [line: 41]
!   !   !   !   !   Child: 0  Var the  [ref: Local, size: 1, loc: -10] [type int] [line: 42]
!   !   !   !   !   Sibling: 0  Var wrong  [ref: Local, size: 1, loc: -11] [type int] [line: 42]
!   !   !   !   !   Sibling: 1  Var trousers  [ref: Local, size: 1, loc: -12] [type int] [line: 42]
!   !   !   !   !   Child: 1  Assign: = [type int] [line: 44]
!   !   !   !   !   !   Child: 0  Id: the  [ref: Local, size: 1, loc: -10] [type int] [line: 44]
!   !   !   !   !   !   Child: 1  Assign: += [type int] [line: 44]
!   !   !   !   !   !   !   Child: 0  Id: wrong  [ref: Local, size: 1, loc: -11] [type int] [line: 44]
!   !   !   !   !   !   !   Child: 1  Assign: ++ [type int] [line: 44]
!   !   !   !   !   !   !   !   Child: 0  Id: trousers  [ref: Local, size: 1, loc: -12] [type int] [line: 44]
!   !   !   !   !   Sibling: 0  If [type void] [line: 45]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 45]
!   !   !   !   !   !   !   Child: 0  Id: were  [ref: Static, size: 1, loc: -1] [type int] [line: 45]
!   !   !   !   !   !   !   Child: 1  Id: rabbit  [ref: Static, size: 1, loc: -2] [type int] [line: 45]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 45]
!   !   !   !   !   !   !   Child: 0  Id: were  [ref: Static, size: 1, loc: -1] [type int] [line: 45]
!   !   !   !   !   !   !   Child: 1  Assign: -- [type int] [line: 45]
!   !   !   !   !   !   !   !   Child: 0  Id: wrong  [ref: Local, size: 1, loc: -11] [type int] [line: 45]
!   !   Sibling: 16  Return [type void] [line: 48]
Sibling: 8  Func penguin returns type bool [ref: Global, size: -27, loc: 0] [type bool] [line: 52]
!   Child: 0  Param Feathers  [ref: Param, size: 1, loc: -2] [type char] [line: 52]
!   Sibling: 0  Param McGraw is array  [ref: Param, size: 1, loc: -3] [type char] [line: 52]
!   Sibling: 1  Param moon  [ref: Param, size: 1, loc: -4] [type bool] [line: 52]
!   Sibling: 2  Param cheese  [ref: Param, size: 1, loc: -5] [type bool] [line: 52]
!   Sibling: 3  Param launch  [ref: Param, size: 1, loc: -6] [type int] [line: 52]
!   Child: 1  Compound [type void] [line: 53]
!   !   Child: 0  Var tottington  [ref: Static, size: 1, loc: -14] [type char] [line: 54]
!   !   !   Child: 0  Const: 'x' [type char] [line: 54]
!   !   Sibling: 0  Var Wensleydale is array  [ref: Local, size: 18, loc: -8] [type char] [line: 55]
!   !   Sibling: 1  Var c  [ref: Local, size: 1, loc: -25] [type char] [line: 56]
!   !   Sibling: 2  Var i  [ref: Local, size: 1, loc: -26] [type int] [line: 57]
!   !   Child: 1  Assign: = [type char] [line: 59]
!   !   !   Child: 0  Id: tottington  [ref: Static, size: 1, loc: -14] [type char] [line: 59]
!   !   !   Child: 1  Id: Feathers  [ref: Param, size: 1, loc: -2] [type char] [line: 59]
!   !   Sibling: 0  Assign: = [type char] [line: 60]
!   !   !   Child: 0  Op: [ [type char] [line: 60]
!   !   !   !   Child: 0  Id: McGraw is array  [ref: Param, size: 1, loc: -3] [type char] [line: 60]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 60]
!   !   !   Child: 1  Id: Feathers  [ref: Param, size: 1, loc: -2] [type char] [line: 60]
!   !   Sibling: 1  Assign: = [type char] [line: 61]
!   !   !   Child: 0  Id: Wensleydale is array  [ref: Local, size: 18, loc: -8] [type char] [line: 61]
!   !   !   Child: 1  Id: McGraw is array  [ref: Param, size: 1, loc: -3] [type char] [line: 61]
!   !   Sibling: 2  Assign: = [type char] [line: 62]
!   !   !   Child: 0  Op: [ [type char] [line: 62]
!   !   !   !   Child: 0  Id: Wensleydale is array  [ref: Local, size: 18, loc: -8] [type char] [line: 62]
!   !   !   !   Child: 1  Op: * [type int] [line: 62]
!   !   !   !   !   Child: 0  Id: McGraw is array  [ref: Param, size: 1, loc: -3] [type char] [line: 62]
!   !   !   Child: 1  Const: '*' [type char] [line: 62]
!   !   Sibling: 3  Return [type void] [line: 64]
!   !   !   Child: 0  Op: > [type bool] [line: 64]
!   !   !   !   Child: 0  Id: c  [ref: Local, size: 1, loc: -25] [type char] [line: 64]
!   !   !   !   Child: 1  Const: 'x' [type char] [line: 64]
Sibling: 9  Func Wendolene returns type int [ref: Global, size: -7, loc: 0] [type int] [line: 67]
!   Child: 0  Param wool  [ref: Param, size: 1, loc: -2] [type int] [line: 67]
!   Sibling: 0  Param shaun  [ref: Param, size: 1, loc: -3] [type bool] [line: 67]
!   Sibling: 1  Param yarn is array  [ref: Param, size: 1, loc: -4] [type int] [line: 67]
!   Sibling: 2  Param preston is array  [ref: Param, size: 1, loc: -5] [type bool] [line: 67]
!   Child: 1  Compound [type void] [line: 68]
!   !   Child: 0  Var void  [ref: Local, size: 1, loc: -6] [type int] [line: 69]
!   !   Child: 1  Return [type void] [line: 70]
!   !   !   Child: 0  Op: + [type int] [line: 70]
!   !   !   !   Child: 0  Op: + [type int] [line: 70]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 70]
!   !   !   !   !   !   Child: 0  Id: wool  [ref: Param, size: 1, loc: -2] [type int] [line: 70]
!   !   !   !   !   !   Child: 1  Op: [ [type int] [line: 70]
!   !   !   !   !   !   !   Child: 0  Id: yarn is array  [ref: Param, size: 1, loc: -4] [type int] [line: 70]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 70]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 70]
!   !   !   !   !   !   Child: 0  Id: yarn is array  [ref: Param, size: 1, loc: -4] [type int] [line: 70]
!   !   !   !   Child: 1  Op: [ [type int] [line: 70]
!   !   !   !   !   Child: 0  Id: yarn is array  [ref: Param, size: 1, loc: -4] [type int] [line: 70]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 70]
!   !   !   !   !   !   Child: 0  Const: 7 [type int] [line: 70]
!   !   !   !   !   !   Child: 1  Id: wool  [ref: Param, size: 1, loc: -2] [type int] [line: 70]
Sibling: 10  Func ramsBottom returns type bool [ref: Global, size: -16, loc: 0] [type bool] [line: 74]
!   Child: 1  Compound [type void] [line: 75]
!   !   Child: 0  Var chicken is array  [ref: Local, size: 3, loc: -3] [type int] [line: 76]
!   !   Sibling: 0  Var run is array  [ref: Local, size: 4, loc: -6] [type bool] [line: 77]
!   !   Sibling: 1  Var wallace is array  [ref: Local, size: 3, loc: -10] [type int] [line: 78]
!   !   Sibling: 2  Var gromit is array  [ref: Local, size: 4, loc: -13] [type int] [line: 78]
!   !   Child: 1  Op: * [type int] [line: 80]
!   !   !   Child: 0  Const: 42 [type int] [line: 80]
!   !   !   Child: 1  Call: Wendolene [ref: None, size: -7, loc: 0] [type int] [line: 80]
!   !   !   !   Child: 0  Op: + [type int] [line: 80]
!   !   !   !   !   Child: 0  Op: + [type int] [line: 80]
!   !   !   !   !   !   Child: 0  Const: 1 [type int] [line: 80]
!   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 80]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 80]
!   !   !   !   Sibling: 0  Op: or [type bool] [line: 80]
!   !   !   !   !   Child: 0  Op: not [type bool] [line: 80]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 80]
!   !   !   !   !   Child: 1  Op: and [type bool] [line: 80]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 80]
!   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 80]
!   !   !   !   Sibling: 1  Id: chicken is array  [ref: Local, size: 3, loc: -3] [type int] [line: 80]
!   !   !   !   Sibling: 2  Id: run is array  [ref: Local, size: 4, loc: -6] [type bool] [line: 80]
!   !   Sibling: 0  Op: [ [type bool] [line: 81]
!   !   !   Child: 0  Id: run is array  [ref: Local, size: 4, loc: -6] [type bool] [line: 81]
!   !   !   Child: 1  Op: - [type int] [line: 81]
!   !   !   !   Child: 0  Op: * [type int] [line: 81]
!   !   !   !   !   Child: 0  Id: run is array  [ref: Local, size: 4, loc: -6] [type bool] [line: 81]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 81]
!   !   Sibling: 1  Return [type void] [line: 83]
!   !   !   Child: 0  Op: not [type bool] [line: 83]
!   !   !   !   Child: 0  Op: >= [type bool] [line: 83]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 83]
!   !   !   !   !   !   Child: 0  Id: wallace is array  [ref: Local, size: 3, loc: -10] [type int] [line: 83]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 83]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 83]
!   !   !   !   !   !   Child: 0  Op: - [type int] [line: 83]
!   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 83]
!   !   !   !   !   !   !   !   Child: 0  Id: gromit is array  [ref: Local, size: 4, loc: -13] [type int] [line: 83]
!   !   !   !   !   !   !   !   Child: 1  Const: 2 [type int] [line: 83]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 83]
Sibling: 11  Func cheese returns type int [ref: Global, size: -4, loc: 0] [type int] [line: 86]
!   Child: 0  Param x  [ref: Param, size: 1, loc: -2] [type int] [line: 86]
!   Sibling: 0  Param y  [ref: Param, size: 1, loc: -3] [type int] [line: 86]
!   Child: 1  While [type void] [line: 86]
!   !   Child: 0  Op: > [type bool] [line: 86]
!   !   !   Child: 0  Id: x  [ref: Param, size: 1, loc: -2] [type int] [line: 86]
!   !   !   Child: 1  Const: 0 [type int] [line: 86]
!   !   Child: 1  If [type void] [line: 86]
!   !   !   Child: 0  Op: > [type bool] [line: 86]
!   !   !   !   Child: 0  Id: y  [ref: Param, size: 1, loc: -3] [type int] [line: 86]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 86]
!   !   !   Child: 1  Assign: -- [type int] [line: 86]
!   !   !   !   Child: 0  Id: x  [ref: Param, size: 1, loc: -2] [type int] [line: 86]
!   !   !   Child: 2  Return [type void] [line: 86]
!   !   !   !   Child: 0  Op: % [type int] [line: 86]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 86]
!   !   !   !   !   !   Child: 0  Id: x  [ref: Param, size: 1, loc: -2] [type int] [line: 86]
!   !   !   !   !   !   Child: 1  Id: x  [ref: Param, size: 1, loc: -2] [type int] [line: 86]
!   !   !   !   !   Child: 1  Id: y  [ref: Param, size: 1, loc: -3] [type int] [line: 86]
Sibling: 12  Func Wensleydale returns type int [ref: Global, size: -4, loc: 0] [type int] [line: 88]
!   Child: 0  Param x  [ref: Param, size: 1, loc: -2] [type int] [line: 88]
!   Sibling: 0  Param y  [ref: Param, size: 1, loc: -3] [type int] [line: 88]
!   Child: 1  Return [type void] [line: 88]
!   !   Child: 0  Call: cheese [ref: None, size: -4, loc: 0] [type int] [line: 88]
!   !   !   Child: 0  Id: x  [ref: Param, size: 1, loc: -2] [type int] [line: 88]
!   !   !   Sibling: 0  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 88]
Sibling: 13  Func main returns type int [ref: Global, size: -141, loc: 0] [type int] [line: 90]
!   Child: 1  Compound [type void] [line: 91]
!   !   Child: 0  Var wool  [ref: Local, size: 1, loc: -2] [type int] [line: 92]
!   !   Sibling: 0  Var yarn is array  [ref: Local, size: 114, loc: -4] [type int] [line: 92]
!   !   Sibling: 1  Var shaun  [ref: Local, size: 1, loc: -117] [type bool] [line: 93]
!   !   Sibling: 2  Var preston is array  [ref: Local, size: 23, loc: -119] [type bool] [line: 93]
!   !   Child: 1  Call: wallace [ref: None, size: -13, loc: 0] [type void] [line: 95]
!   !   !   Child: 0  Call: cheese [ref: None, size: -4, loc: 0] [type int] [line: 95]
!   !   !   !   Child: 0  Const: 62 [type int] [line: 95]
!   !   !   !   Sibling: 0  Op: - [type int] [line: 95]
!   !   !   !   !   Child: 0  Const: 311 [type int] [line: 95]
!   !   !   Sibling: 0  Id: gromit  [ref: Global, size: 1, loc: 0] [type int] [line: 95]
!   !   Sibling: 0  Op: [ [type int] [line: 96]
!   !   !   Child: 0  Id: yarn is array  [ref: Local, size: 114, loc: -4] [type int] [line: 96]
!   !   !   Child: 1  Op: ? [type int] [line: 96]
!   !   !   !   Child: 0  Op: * [type int] [line: 96]
!   !   !   !   !   Child: 0  Id: yarn is array  [ref: Local, size: 114, loc: -4] [type int] [line: 96]
!   !   Sibling: 1  Return [type void] [line: 97]
!   !   !   Child: 0  Call: Wendolene [ref: None, size: -7, loc: 0] [type int] [line: 97]
!   !   !   !   Child: 0  Op: * [type int] [line: 97]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 97]
!   !   !   !   !   !   Child: 0  Id: preston is array  [ref: Local, size: 23, loc: -119] [type bool] [line: 97]
!   !   !   !   !   Child: 1  Op: * [type int] [line: 97]
!   !   !   !   !   !   Child: 0  Id: yarn is array  [ref: Local, size: 114, loc: -4] [type int] [line: 97]
!   !   !   !   Sibling: 0  Id: shaun  [ref: Local, size: 1, loc: -117] [type bool] [line: 97]
!   !   !   !   Sibling: 1  Id: yarn is array  [ref: Local, size: 114, loc: -4] [type int] [line: 97]
!   !   !   !   Sibling: 2  Id: preston is array  [ref: Local, size: 23, loc: -119] [type bool] [line: 97]
Sibling: 14  Func null returns type void [ref: Global, size: -2, loc: 0] [type void] [line: 100]
Sibling: 15  Func MrNobody returns type void [ref: Global, size: -5, loc: 0] [type void] [line: 101]
!   Child: 0  Param shaun  [ref: Param, size: 1, loc: -2] [type int] [line: 101]
!   Sibling: 0  Param the  [ref: Param, size: 1, loc: -3] [type int] [line: 101]
!   Sibling: 1  Param sheep  [ref: Param, size: 1, loc: -4] [type int] [line: 101]
Sibling: 16  Var aBigLongVariableName6  [ref: Global, size: 1, loc: -15] [type bool] [line: 103]
Sibling: 17  Var odd  [ref: Global, size: 1, loc: -16] [type int] [line: 104]
Sibling: 18  Var separation  [ref: Global, size: 1, loc: -17] [type int] [line: 104]
Sibling: 19  Var of  [ref: Global, size: 1, loc: -18] [type int] [line: 104]
Sibling: 20  Var stuff  [ref: Global, size: 1, loc: -19] [type int] [line: 105]
Sibling: 21  Var bat  [ref: Global, size: 1, loc: -20] [type char] [line: 107]
!   Child: 0  Const: ''' [type char] [line: 107]
Sibling: 22  Var dog  [ref: Global, size: 1, loc: -21] [type char] [line: 108]
!   Child: 0  Const: 't' [type char] [line: 108]
Offset for end of global space: -22
Number of warnings: 0
Number of errors: 0
