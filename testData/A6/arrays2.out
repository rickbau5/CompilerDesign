ERROR(9): '=' requires that either both or neither operands be arrays.
ERROR(10): '=' requires that either both or neither operands be arrays.
ERROR(15): '=' requires that either both or neither operands be arrays.
ERROR(16): '=' requires that either both or neither operands be arrays.
ERROR(20): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(21): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(21): '=' requires that either both or neither operands be arrays.
ERROR(22): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(22): '=' requires that either both or neither operands be arrays.
ERROR(23): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(24): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(28): The operation '>' does not work with arrays.
Func input returns type int [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl returns type void [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Func main returns type void [ref: Global, size: -71, loc: 0] [type void] [line: 2]
!   Child: 1  Compound [type void] [line: 3]
!   !   Child: 0  Var a is array  [ref: Local, size: 11, loc: -3] [type int] [line: 4]
!   !   Sibling: 0  Var aa is array  [ref: Local, size: 11, loc: -14] [type int] [line: 4]
!   !   Sibling: 1  Var aaa  [ref: Local, size: 1, loc: -24] [type int] [line: 4]
!   !   Sibling: 2  Var b is array  [ref: Local, size: 11, loc: -26] [type bool] [line: 5]
!   !   Sibling: 3  Var bb is array  [ref: Local, size: 11, loc: -37] [type bool] [line: 5]
!   !   Sibling: 4  Var bbb  [ref: Local, size: 1, loc: -47] [type bool] [line: 5]
!   !   Sibling: 5  Var c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 6]
!   !   Sibling: 6  Var cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 6]
!   !   Sibling: 7  Var ccc  [ref: Local, size: 1, loc: -70] [type char] [line: 6]
!   !   Child: 1  Assign: = [type int] [line: 8]
!   !   !   Child: 0  Id: a is array  [ref: Local, size: 11, loc: -3] [type int] [line: 8]
!   !   !   Child: 1  Id: aa is array  [ref: Local, size: 11, loc: -14] [type int] [line: 8]
!   !   Sibling: 0  Assign: = [type int] [line: 9]
!   !   !   Child: 0  Id: aaa  [ref: Local, size: 1, loc: -24] [type int] [line: 9]
!   !   !   Child: 1  Id: aa is array  [ref: Local, size: 11, loc: -14] [type int] [line: 9]
!   !   Sibling: 1  Assign: = [type int] [line: 10]
!   !   !   Child: 0  Id: aa is array  [ref: Local, size: 11, loc: -14] [type int] [line: 10]
!   !   !   Child: 1  Id: aaa  [ref: Local, size: 1, loc: -24] [type int] [line: 10]
!   !   Sibling: 2  Assign: = [type int] [line: 11]
!   !   !   Child: 0  Op: [ [type int] [line: 11]
!   !   !   !   Child: 0  Id: a is array  [ref: Local, size: 11, loc: -3] [type int] [line: 11]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 11]
!   !   !   Child: 1  Id: aaa  [ref: Local, size: 1, loc: -24] [type int] [line: 11]
!   !   Sibling: 3  Assign: = [type int] [line: 12]
!   !   !   Child: 0  Id: aaa  [ref: Local, size: 1, loc: -24] [type int] [line: 12]
!   !   !   Child: 1  Op: [ [type int] [line: 12]
!   !   !   !   Child: 0  Id: a is array  [ref: Local, size: 11, loc: -3] [type int] [line: 12]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 12]
!   !   Sibling: 4  Assign: = [type char] [line: 14]
!   !   !   Child: 0  Id: c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 14]
!   !   !   Child: 1  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 14]
!   !   Sibling: 5  Assign: = [type char] [line: 15]
!   !   !   Child: 0  Id: ccc  [ref: Local, size: 1, loc: -70] [type char] [line: 15]
!   !   !   Child: 1  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 15]
!   !   Sibling: 6  Assign: = [type char] [line: 16]
!   !   !   Child: 0  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 16]
!   !   !   Child: 1  Id: ccc  [ref: Local, size: 1, loc: -70] [type char] [line: 16]
!   !   Sibling: 7  Assign: = [type char] [line: 17]
!   !   !   Child: 0  Op: [ [type char] [line: 17]
!   !   !   !   Child: 0  Id: c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 17]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 17]
!   !   !   Child: 1  Id: ccc  [ref: Local, size: 1, loc: -70] [type char] [line: 17]
!   !   Sibling: 8  Assign: = [type char] [line: 18]
!   !   !   Child: 0  Id: ccc  [ref: Local, size: 1, loc: -70] [type char] [line: 18]
!   !   !   Child: 1  Op: [ [type char] [line: 18]
!   !   !   !   Child: 0  Id: c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 18]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 18]
!   !   Sibling: 9  Assign: = [type int] [line: 20]
!   !   !   Child: 0  Id: a is array  [ref: Local, size: 11, loc: -3] [type int] [line: 20]
!   !   !   Child: 1  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 20]
!   !   Sibling: 10  Assign: = [type int] [line: 21]
!   !   !   Child: 0  Id: aaa  [ref: Local, size: 1, loc: -24] [type int] [line: 21]
!   !   !   Child: 1  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 21]
!   !   Sibling: 11  Assign: = [type int] [line: 22]
!   !   !   Child: 0  Id: aa is array  [ref: Local, size: 11, loc: -14] [type int] [line: 22]
!   !   !   Child: 1  Id: ccc  [ref: Local, size: 1, loc: -70] [type char] [line: 22]
!   !   Sibling: 12  Assign: = [type int] [line: 23]
!   !   !   Child: 0  Op: [ [type int] [line: 23]
!   !   !   !   Child: 0  Id: a is array  [ref: Local, size: 11, loc: -3] [type int] [line: 23]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 23]
!   !   !   Child: 1  Id: ccc  [ref: Local, size: 1, loc: -70] [type char] [line: 23]
!   !   Sibling: 13  Assign: = [type int] [line: 24]
!   !   !   Child: 0  Id: aaa  [ref: Local, size: 1, loc: -24] [type int] [line: 24]
!   !   !   Child: 1  Op: [ [type char] [line: 24]
!   !   !   !   Child: 0  Id: c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 24]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 24]
!   !   Sibling: 14  Op: == [type bool] [line: 26]
!   !   !   Child: 0  Id: c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 26]
!   !   !   Child: 1  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 26]
!   !   Sibling: 15  Op: != [type bool] [line: 27]
!   !   !   Child: 0  Id: c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 27]
!   !   !   Child: 1  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 27]
!   !   Sibling: 16  Op: > [type bool] [line: 28]
!   !   !   Child: 0  Id: c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 28]
!   !   !   Child: 1  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 28]
!   !   Sibling: 17  Op: == [type bool] [line: 30]
!   !   !   Child: 0  Id: c is array  [ref: Local, size: 11, loc: -49] [type char] [line: 30]
!   !   !   Child: 1  Id: cc is array  [ref: Local, size: 11, loc: -60] [type char] [line: 30]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 12
