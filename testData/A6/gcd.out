Func input returns type int [ref: Global, size: -2, loc: 0] [type int] [line: -1]
Sibling: 0  Func output returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [ref: Global, size: -2, loc: 0] [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [ref: Global, size: -2, loc: 0] [type char] [line: -1]
Sibling: 4  Func outputc returns type void [ref: Global, size: -3, loc: 0] [type void] [line: -1]
!   Child: 0  Param *dummy*  [ref: Param, size: 1, loc: -2] [type char] [line: -1]
Sibling: 5  Func outnl returns type void [ref: Global, size: -2, loc: 0] [type void] [line: -1]
Sibling: 6  Func gcd returns type int [ref: Global, size: -4, loc: 0] [type int] [line: 5]
!   Child: 0  Param u  [ref: Param, size: 1, loc: -2] [type int] [line: 5]
!   Sibling: 0  Param v  [ref: Param, size: 1, loc: -3] [type int] [line: 5]
!   Child: 1  Compound [type void] [line: 6]
!   !   Child: 1  If [type void] [line: 7]
!   !   !   Child: 0  Op: == [type bool] [line: 7]
!   !   !   !   Child: 0  Id: v  [ref: Param, size: 1, loc: -3] [type int] [line: 7]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 7]
!   !   !   Child: 1  Return [type void] [line: 8]
!   !   !   !   Child: 0  Id: u  [ref: Param, size: 1, loc: -2] [type int] [line: 8]
!   !   !   Child: 2  Return [type void] [line: 10]
!   !   !   !   Child: 0  Call: gcd [ref: None, size: -4, loc: 0] [type int] [line: 10]
!   !   !   !   !   Child: 0  Id: v  [ref: Param, size: 1, loc: -3] [type int] [line: 10]
!   !   !   !   !   Sibling: 0  Op: - [type int] [line: 10]
!   !   !   !   !   !   Child: 0  Id: u  [ref: Param, size: 1, loc: -2] [type int] [line: 10]
!   !   !   !   !   !   Child: 1  Op: * [type int] [line: 10]
!   !   !   !   !   !   !   Child: 0  Op: / [type int] [line: 10]
!   !   !   !   !   !   !   !   Child: 0  Id: u  [ref: Param, size: 1, loc: -2] [type int] [line: 10]
!   !   !   !   !   !   !   !   Child: 1  Id: v  [ref: Param, size: 1, loc: -3] [type int] [line: 10]
!   !   !   !   !   !   !   Child: 1  Id: v  [ref: Param, size: 1, loc: -3] [type int] [line: 10]
Sibling: 7  Func main returns type void [ref: Global, size: -5, loc: 0] [type void] [line: 13]
!   Child: 1  Compound [type void] [line: 14]
!   !   Child: 0  Var x  [ref: Local, size: 1, loc: -2] [type int] [line: 15]
!   !   Sibling: 0  Var y  [ref: Local, size: 1, loc: -3] [type int] [line: 15]
!   !   Sibling: 1  Var z  [ref: Local, size: 1, loc: -4] [type int] [line: 15]
!   !   Child: 1  Assign: = [type int] [line: 17]
!   !   !   Child: 0  Id: x  [ref: Local, size: 1, loc: -2] [type int] [line: 17]
!   !   !   Child: 1  Call: input [ref: None, size: -2, loc: 0] [type int] [line: 17]
!   !   Sibling: 0  Assign: = [type int] [line: 18]
!   !   !   Child: 0  Id: y  [ref: Local, size: 1, loc: -3] [type int] [line: 18]
!   !   !   Child: 1  Call: input [ref: None, size: -2, loc: 0] [type int] [line: 18]
!   !   Sibling: 1  Assign: = [type int] [line: 19]
!   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -4] [type int] [line: 19]
!   !   !   Child: 1  Call: gcd [ref: None, size: -4, loc: 0] [type int] [line: 19]
!   !   !   !   Child: 0  Id: x  [ref: Local, size: 1, loc: -2] [type int] [line: 19]
!   !   !   !   Sibling: 0  Id: y  [ref: Local, size: 1, loc: -3] [type int] [line: 19]
!   !   Sibling: 2  Call: output [ref: None, size: -3, loc: 0] [type void] [line: 20]
!   !   !   Child: 0  Id: z  [ref: Local, size: 1, loc: -4] [type int] [line: 20]
!   !   Sibling: 3  Call: outnl [ref: None, size: -2, loc: 0] [type void] [line: 21]
Offset for end of global space: 0
Number of warnings: 0
Number of errors: 0
