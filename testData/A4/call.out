Func input returns type int [type int] [line: -1]
Sibling: 0  Func output returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type int [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type bool [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [type char] [line: -1]
Sibling: 4  Func outputc returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type void [type void] [line: -1]
Sibling: 5  Func outnl returns type void [type void] [line: -1]
Sibling: 6  Func showInt returns type void [type void] [line: 1]
!   Child: 0  Param x of type int [type int] [line: 1]
!   Child: 1  Compound [type void] [line: 2]
!   !   Child: 1  Call: output [type void] [line: 3]
!   !   !   Child: 0  Id: x [type int] [line: 3]
!   !   Sibling: 0  Call: outnl [type void] [line: 4]
Sibling: 7  Func showIntArray returns type void [type void] [line: 7]
!   Child: 0  Param x is array of type int [type int] [line: 7]
!   Sibling: 0  Param size of type int [type int] [line: 7]
!   Child: 1  Compound [type void] [line: 8]
!   !   Child: 0  Var i of type int [type int] [line: 9]
!   !   Child: 1  Assign: = [type int] [line: 10]
!   !   !   Child: 0  Id: i [type int] [line: 10]
!   !   !   Child: 1  Const: 0 [type int] [line: 10]
!   !   Sibling: 0  While [type void] [line: 11]
!   !   !   Child: 0  Op: < [type bool] [line: 11]
!   !   !   !   Child: 0  Id: i [type int] [line: 11]
!   !   !   !   Child: 1  Id: size [type int] [line: 11]
!   !   !   Child: 1  Compound [type void] [line: 11]
!   !   !   !   Child: 1  Call: output [type void] [line: 12]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 12]
!   !   !   !   !   !   Child: 0  Id: x [type int] [line: 12]
!   !   !   !   !   !   Child: 1  Id: i [type int] [line: 12]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 13]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 13]
!   !   !   !   !   Child: 1  Op: + [type int] [line: 13]
!   !   !   !   !   !   Child: 0  Id: i [type int] [line: 13]
!   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 13]
!   !   Sibling: 1  Call: outnl [type void] [line: 15]
Sibling: 8  Func showBool returns type void [type void] [line: 18]
!   Child: 0  Param x of type bool [type bool] [line: 18]
!   Child: 1  Compound [type void] [line: 19]
!   !   Child: 1  Call: outputb [type void] [line: 20]
!   !   !   Child: 0  Id: x [type bool] [line: 20]
!   !   Sibling: 0  Call: outnl [type void] [line: 21]
Sibling: 9  Func truth returns type bool [type bool] [line: 24]
!   Child: 1  Compound [type void] [line: 25]
!   !   Child: 1  Return [type void] [line: 26]
!   !   !   Child: 0  Const: true [type bool] [line: 26]
Sibling: 10  Func magic returns type int [type int] [line: 29]
!   Child: 1  Compound [type void] [line: 30]
!   !   Child: 1  Return [type void] [line: 31]
!   !   !   Child: 0  Const: 666 [type int] [line: 31]
Sibling: 11  Func sqr returns type int [type int] [line: 34]
!   Child: 0  Param x of type int [type int] [line: 34]
!   Child: 1  Compound [type void] [line: 35]
!   !   Child: 1  Return [type void] [line: 36]
!   !   !   Child: 0  Op: * [type int] [line: 36]
!   !   !   !   Child: 0  Id: x [type int] [line: 36]
!   !   !   !   Child: 1  Id: x [type int] [line: 36]
Sibling: 12  Func add returns type int [type int] [line: 39]
!   Child: 0  Param x of type int [type int] [line: 39]
!   Sibling: 0  Param y of type int [type int] [line: 39]
!   Child: 1  Compound [type void] [line: 40]
!   !   Child: 1  Return [type void] [line: 41]
!   !   !   Child: 0  Op: + [type int] [line: 41]
!   !   !   !   Child: 0  Id: x [type int] [line: 41]
!   !   !   !   Child: 1  Id: y [type int] [line: 41]
Sibling: 13  Func mul returns type int [type int] [line: 44]
!   Child: 0  Param x of type int [type int] [line: 44]
!   Sibling: 0  Param y of type int [type int] [line: 44]
!   Child: 1  Compound [type void] [line: 45]
!   !   Child: 1  Return [type void] [line: 46]
!   !   !   Child: 0  Op: * [type int] [line: 46]
!   !   !   !   Child: 0  Id: x [type int] [line: 46]
!   !   !   !   Child: 1  Id: y [type int] [line: 46]
Sibling: 14  Var g of type int [type int] [line: 49]
Sibling: 15  Func caller returns type void [type void] [line: 51]
!   Child: 0  Param x of type int [type int] [line: 51]
!   Sibling: 0  Param y is array of type int [type int] [line: 51]
!   Child: 1  Compound [type void] [line: 52]
!   !   Child: 0  Var z of type int [type int] [line: 53]
!   !   Sibling: 0  Var a of type int [type int] [line: 54]
!   !   Child: 1  Assign: = [type int] [line: 56]
!   !   !   Child: 0  Id: a [type int] [line: 56]
!   !   !   Child: 1  Const: 666 [type int] [line: 56]
!   !   Sibling: 0  Assign: = [type int] [line: 57]
!   !   !   Child: 0  Id: g [type int] [line: 57]
!   !   !   Child: 1  Const: 777 [type int] [line: 57]
!   !   Sibling: 1  Assign: = [type int] [line: 59]
!   !   !   Child: 0  Id: z [type int] [line: 59]
!   !   !   Child: 1  Call: sqr [type int] [line: 59]
!   !   !   !   Child: 0  Id: x [type int] [line: 59]
!   !   Sibling: 2  Call: output [type void] [line: 60]
!   !   !   Child: 0  Id: z [type int] [line: 60]
!   !   Sibling: 3  Call: outnl [type void] [line: 61]
!   !   Sibling: 4  Assign: = [type int] [line: 63]
!   !   !   Child: 0  Id: z [type int] [line: 63]
!   !   !   Child: 1  Call: sqr [type int] [line: 63]
!   !   !   !   Child: 0  Op: [ [type int] [line: 63]
!   !   !   !   !   Child: 0  Id: y [type int] [line: 63]
!   !   !   !   !   Child: 1  Const: 7 [type int] [line: 63]
!   !   Sibling: 5  Call: output [type void] [line: 64]
!   !   !   Child: 0  Id: z [type int] [line: 64]
!   !   Sibling: 6  Call: outnl [type void] [line: 65]
!   !   Sibling: 7  Assign: = [type int] [line: 67]
!   !   !   Child: 0  Id: z [type int] [line: 67]
!   !   !   Child: 1  Call: sqr [type int] [line: 67]
!   !   !   !   Child: 0  Id: a [type int] [line: 67]
!   !   Sibling: 8  Call: output [type void] [line: 68]
!   !   !   Child: 0  Id: z [type int] [line: 68]
!   !   Sibling: 9  Call: outnl [type void] [line: 69]
!   !   Sibling: 10  Assign: = [type int] [line: 71]
!   !   !   Child: 0  Id: z [type int] [line: 71]
!   !   !   Child: 1  Call: sqr [type int] [line: 71]
!   !   !   !   Child: 0  Id: g [type int] [line: 71]
!   !   Sibling: 11  Call: output [type void] [line: 72]
!   !   !   Child: 0  Id: z [type int] [line: 72]
!   !   Sibling: 12  Call: outnl [type void] [line: 73]
Sibling: 16  Func swap returns type void [type void] [line: 77]
!   Child: 0  Param x is array of type int [type int] [line: 77]
!   Sibling: 0  Param z1 of type int [type int] [line: 77]
!   Sibling: 1  Param z2 of type int [type int] [line: 77]
!   Child: 1  Compound [type void] [line: 78]
!   !   Child: 0  Var tmp of type int [type int] [line: 79]
!   !   Child: 1  Assign: = [type int] [line: 80]
!   !   !   Child: 0  Id: tmp [type int] [line: 80]
!   !   !   Child: 1  Op: [ [type int] [line: 80]
!   !   !   !   Child: 0  Id: x [type int] [line: 80]
!   !   !   !   Child: 1  Id: z1 [type int] [line: 80]
!   !   Sibling: 0  Assign: = [type int] [line: 81]
!   !   !   Child: 0  Op: [ [type int] [line: 81]
!   !   !   !   Child: 0  Id: x [type int] [line: 81]
!   !   !   !   Child: 1  Id: z1 [type int] [line: 81]
!   !   !   Child: 1  Op: [ [type int] [line: 81]
!   !   !   !   Child: 0  Id: x [type int] [line: 81]
!   !   !   !   Child: 1  Id: z2 [type int] [line: 81]
!   !   Sibling: 1  Assign: = [type int] [line: 82]
!   !   !   Child: 0  Op: [ [type int] [line: 82]
!   !   !   !   Child: 0  Id: x [type int] [line: 82]
!   !   !   !   Child: 1  Id: z2 [type int] [line: 82]
!   !   !   Child: 1  Id: tmp [type int] [line: 82]
Sibling: 17  Func main returns type void [type void] [line: 86]
!   Child: 1  Compound [type void] [line: 87]
!   !   Child: 0  Var p of type int [type int] [line: 88]
!   !   Sibling: 0  Var q of type int [type int] [line: 88]
!   !   Sibling: 1  Var r is array of type int [type int] [line: 88]
!   !   Sibling: 2  Var s is array of type int [type int] [line: 88]
!   !   Child: 1  Assign: = [type int] [line: 90]
!   !   !   Child: 0  Id: p [type int] [line: 90]
!   !   !   Child: 1  Const: 0 [type int] [line: 90]
!   !   Sibling: 0  While [type void] [line: 91]
!   !   !   Child: 0  Op: < [type bool] [line: 91]
!   !   !   !   Child: 0  Id: p [type int] [line: 91]
!   !   !   !   Child: 1  Const: 10 [type int] [line: 91]
!   !   !   Child: 1  Compound [type void] [line: 91]
!   !   !   !   Child: 1  Assign: = [type int] [line: 92]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 92]
!   !   !   !   !   !   Child: 0  Id: r [type int] [line: 92]
!   !   !   !   !   !   Child: 1  Id: p [type int] [line: 92]
!   !   !   !   !   Child: 1  Id: p [type int] [line: 92]
!   !   !   !   Sibling: 0  Assign: += [type int] [line: 93]
!   !   !   !   !   Child: 0  Id: p [type int] [line: 93]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 93]
!   !   Sibling: 1  Assign: = [type int] [line: 96]
!   !   !   Child: 0  Id: p [type int] [line: 96]
!   !   !   Child: 1  Const: 111 [type int] [line: 96]
!   !   Sibling: 2  Assign: = [type int] [line: 97]
!   !   !   Child: 0  Id: q [type int] [line: 97]
!   !   !   Child: 1  Const: 222 [type int] [line: 97]
!   !   Sibling: 3  Assign: = [type int] [line: 98]
!   !   !   Child: 0  Op: [ [type int] [line: 98]
!   !   !   !   Child: 0  Id: r [type int] [line: 98]
!   !   !   !   Child: 1  Const: 7 [type int] [line: 98]
!   !   !   Child: 1  Const: 333 [type int] [line: 98]
!   !   Sibling: 4  Assign: = [type int] [line: 99]
!   !   !   Child: 0  Op: [ [type int] [line: 99]
!   !   !   !   Child: 0  Id: s [type int] [line: 99]
!   !   !   !   Child: 1  Const: 7 [type int] [line: 99]
!   !   !   Child: 1  Const: 444 [type int] [line: 99]
!   !   Sibling: 5  Call: showInt [type void] [line: 101]
!   !   !   Child: 0  Id: p [type int] [line: 101]
!   !   Sibling: 6  Call: showIntArray [type void] [line: 103]
!   !   !   Child: 0  Id: r [type int] [line: 103]
!   !   !   Sibling: 0  Const: 10 [type int] [line: 103]
!   !   Sibling: 7  Call: showBool [type void] [line: 105]
!   !   !   Child: 0  Call: truth [type bool] [line: 105]
!   !   Sibling: 8  Call: caller [type void] [line: 107]
!   !   !   Child: 0  Id: p [type int] [line: 107]
!   !   !   Sibling: 0  Id: r [type int] [line: 107]
!   !   Sibling: 9  Call: output [type void] [line: 109]
!   !   !   Child: 0  Call: add [type int] [line: 109]
!   !   !   !   Child: 0  Call: add [type int] [line: 109]
!   !   !   !   !   Child: 0  Id: p [type int] [line: 109]
!   !   !   !   !   Sibling: 0  Id: q [type int] [line: 109]
!   !   !   !   Sibling: 0  Call: mul [type int] [line: 109]
!   !   !   !   !   Child: 0  Id: p [type int] [line: 109]
!   !   !   !   !   Sibling: 0  Id: q [type int] [line: 109]
!   !   Sibling: 10  Call: outnl [type void] [line: 110]
!   !   Sibling: 11  Assign: = [type int] [line: 111]
!   !   !   Child: 0  Op: [ [type int] [line: 111]
!   !   !   !   Child: 0  Id: r [type int] [line: 111]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 111]
!   !   !   Child: 1  Const: 555 [type int] [line: 111]
!   !   Sibling: 12  Call: swap [type void] [line: 112]
!   !   !   Child: 0  Id: r [type int] [line: 112]
!   !   !   Sibling: 0  Const: 7 [type int] [line: 112]
!   !   !   Sibling: 1  Const: 9 [type int] [line: 112]
!   !   Sibling: 13  Call: output [type void] [line: 113]
!   !   !   Child: 0  Op: [ [type int] [line: 113]
!   !   !   !   Child: 0  Id: r [type int] [line: 113]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 113]
!   !   Sibling: 14  Call: outnl [type void] [line: 114]
!   !   Sibling: 15  Call: output [type void] [line: 115]
!   !   !   Child: 0  Op: * [type int] [line: 115]
!   !   !   !   Child: 0  Const: 2 [type int] [line: 115]
!   !   !   !   Child: 1  Call: add [type int] [line: 115]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 115]
!   !   !   !   !   !   Child: 0  Call: add [type int] [line: 115]
!   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 0  Const: 3 [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 1  Const: 4 [type int] [line: 115]
!   !   !   !   !   !   !   Sibling: 0  Op: * [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 0  Const: 5 [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 1  Const: 6 [type int] [line: 115]
!   !   !   !   !   !   Child: 1  Const: 7 [type int] [line: 115]
!   !   !   !   !   Sibling: 0  Op: * [type int] [line: 115]
!   !   !   !   !   !   Child: 0  Call: add [type int] [line: 115]
!   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 0  Const: 9 [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 115]
!   !   !   !   !   !   !   Sibling: 0  Op: * [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 0  Const: 11 [type int] [line: 115]
!   !   !   !   !   !   !   !   Child: 1  Const: 12 [type int] [line: 115]
!   !   !   !   !   !   Child: 1  Const: 13 [type int] [line: 115]
!   !   Sibling: 16  Call: outnl [type void] [line: 116]
Number of warnings: 0
Number of errors: 0
