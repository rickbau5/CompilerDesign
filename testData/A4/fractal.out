Func input returns type int [type int] [line: -1]
Sibling: 0  Func output returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type int [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type bool [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [type char] [line: -1]
Sibling: 4  Func outputc returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type void [type void] [line: -1]
Sibling: 5  Func outnl returns type void [type void] [line: -1]
Sibling: 6  Var TOP of type int [type int] [line: 24]
Sibling: 7  Var LEFT of type int [type int] [line: 25]
Sibling: 8  Var HEIGHT of type int [type int] [line: 26]
Sibling: 9  Var WIDTH of type int [type int] [line: 27]
Sibling: 10  Var XStep of type int [type int] [line: 28]
Sibling: 11  Var YStep of type int [type int] [line: 29]
Sibling: 12  Var XMax of type int [type int] [line: 30]
Sibling: 13  Var YMax of type int [type int] [line: 30]
Sibling: 14  Var iter of type int [type int] [line: 31]
Sibling: 15  Func Mandelbrot returns type void [type void] [line: 34]
!   Child: 0  Param JuliaVals is array of type int [type int] [line: 34]
!   Child: 1  Compound [type void] [line: 35]
!   !   Child: 1  While [type void] [line: 36]
!   !   !   Child: 0  Op: < [type bool] [line: 36]
!   !   !   !   Child: 0  Id: TOP [type int] [line: 36]
!   !   !   !   Child: 1  Id: YMax [type int] [line: 36]
!   !   !   Child: 1  Compound [type void] [line: 37]
!   !   !   !   Child: 1  Assign: = [type int] [line: 38]
!   !   !   !   !   Child: 0  Id: LEFT [type int] [line: 38]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 38]
!   !   !   !   !   !   Child: 0  Const: 512 [type int] [line: 38]
!   !   !   !   Sibling: 0  While [type void] [line: 39]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 39]
!   !   !   !   !   !   Child: 0  Id: LEFT [type int] [line: 39]
!   !   !   !   !   !   Child: 1  Id: XMax [type int] [line: 39]
!   !   !   !   !   Child: 1  Compound [type void] [line: 40]
!   !   !   !   !   !   Child: 0  Var Len of type int [type int] [line: 41]
!   !   !   !   !   !   Sibling: 0  Var Bi of type int [type int] [line: 42]
!   !   !   !   !   !   Sibling: 1  Var A of type int [type int] [line: 42]
!   !   !   !   !   !   Sibling: 2  Var NextA of type int [type int] [line: 42]
!   !   !   !   !   !   Sibling: 3  Var NextBi of type int [type int] [line: 42]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 43]
!   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 43]
!   !   !   !   !   !   !   Child: 1  Id: LEFT [type int] [line: 43]
!   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 44]
!   !   !   !   !   !   !   Child: 0  Id: Bi [type int] [line: 44]
!   !   !   !   !   !   !   Child: 1  Id: TOP [type int] [line: 44]
!   !   !   !   !   !   Sibling: 1  Assign: = [type int] [line: 45]
!   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 45]
!   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 45]
!   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 45]
!   !   !   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 45]
!   !   !   !   !   !   !   !   !   Child: 1  Id: A [type int] [line: 45]
!   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 45]
!   !   !   !   !   !   Sibling: 2  Assign: = [type int] [line: 46]
!   !   !   !   !   !   !   Child: 0  Id: NextBi [type int] [line: 46]
!   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 46]
!   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 46]
!   !   !   !   !   !   !   !   !   Child: 0  Id: Bi [type int] [line: 46]
!   !   !   !   !   !   !   !   !   Child: 1  Id: Bi [type int] [line: 46]
!   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 46]
!   !   !   !   !   !   Sibling: 3  Assign: = [type int] [line: 47]
!   !   !   !   !   !   !   Child: 0  Id: Len [type int] [line: 47]
!   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 47]
!   !   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 47]
!   !   !   !   !   !   !   !   Child: 1  Id: NextBi [type int] [line: 47]
!   !   !   !   !   !   Sibling: 4  Assign: = [type int] [line: 48]
!   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 48]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 48]
!   !   !   !   !   !   Sibling: 5  While [type void] [line: 49]
!   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 49]
!   !   !   !   !   !   !   !   Child: 0  Op: <= [type bool] [line: 49]
!   !   !   !   !   !   !   !   !   Child: 0  Id: Len [type int] [line: 49]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 1024 [type int] [line: 49]
!   !   !   !   !   !   !   !   Child: 1  Op: < [type bool] [line: 49]
!   !   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 49]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 11 [type int] [line: 49]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 50]
!   !   !   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 51]
!   !   !   !   !   !   !   !   !   Child: 0  Id: Bi [type int] [line: 51]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 51]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: / [type int] [line: 51]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 51]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 51]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Op: * [type int] [line: 51]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 51]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: Bi [type int] [line: 51]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 51]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: TOP [type int] [line: 51]
!   !   !   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 52]
!   !   !   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 52]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 52]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: - [type int] [line: 52]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 52]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: NextBi [type int] [line: 52]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: LEFT [type int] [line: 52]
!   !   !   !   !   !   !   !   Sibling: 1  Assign: = [type int] [line: 53]
!   !   !   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 53]
!   !   !   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 53]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 53]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 53]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: A [type int] [line: 53]
!   !   !   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 53]
!   !   !   !   !   !   !   !   Sibling: 2  Assign: = [type int] [line: 54]
!   !   !   !   !   !   !   !   !   Child: 0  Id: NextBi [type int] [line: 54]
!   !   !   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 54]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 54]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: Bi [type int] [line: 54]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: Bi [type int] [line: 54]
!   !   !   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 54]
!   !   !   !   !   !   !   !   Sibling: 3  Assign: = [type int] [line: 55]
!   !   !   !   !   !   !   !   !   Child: 0  Id: Len [type int] [line: 55]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 55]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 55]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: NextBi [type int] [line: 55]
!   !   !   !   !   !   !   !   Sibling: 4  Assign: ++ [type int] [line: 56]
!   !   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 56]
!   !   !   !   !   !   Sibling: 6  If [type void] [line: 58]
!   !   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 58]
!   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 58]
!   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 58]
!   !   !   !   !   !   !   Child: 1  Call: output [type void] [line: 59]
!   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 59]
!   !   !   !   !   !   !   Child: 2  Call: outputb [type void] [line: 61]
!   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 61]
!   !   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 61]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 11 [type int] [line: 61]
!   !   !   !   !   !   Sibling: 7  If [type void] [line: 62]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 62]
!   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 62]
!   !   !   !   !   !   !   !   Child: 1  Const: 11 [type int] [line: 62]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 63]
!   !   !   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 64]
!   !   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 64]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: JuliaVals [type int] [line: 64]
!   !   !   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 64]
!   !   !   !   !   !   !   !   !   Child: 1  Id: LEFT [type int] [line: 64]
!   !   !   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 65]
!   !   !   !   !   !   !   !   !   Child: 0  Op: [ [type int] [line: 65]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: JuliaVals [type int] [line: 65]
!   !   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 65]
!   !   !   !   !   !   !   !   !   Child: 1  Id: TOP [type int] [line: 65]
!   !   !   !   !   !   Sibling: 8  Assign: += [type int] [line: 67]
!   !   !   !   !   !   !   Child: 0  Id: LEFT [type int] [line: 67]
!   !   !   !   !   !   !   Child: 1  Id: XStep [type int] [line: 67]
!   !   !   !   Sibling: 1  Call: outnl [type void] [line: 69]
!   !   !   !   Sibling: 2  Assign: += [type int] [line: 70]
!   !   !   !   !   Child: 0  Id: TOP [type int] [line: 70]
!   !   !   !   !   Child: 1  Id: YStep [type int] [line: 70]
Sibling: 16  Func Julia returns type void [type void] [line: 74]
!   Child: 0  Param CA of type int [type int] [line: 74]
!   Sibling: 0  Param CBi of type int [type int] [line: 74]
!   Child: 1  Compound [type void] [line: 75]
!   !   Child: 1  While [type void] [line: 76]
!   !   !   Child: 0  Op: < [type bool] [line: 76]
!   !   !   !   Child: 0  Id: TOP [type int] [line: 76]
!   !   !   !   Child: 1  Id: YMax [type int] [line: 76]
!   !   !   Child: 1  Compound [type void] [line: 77]
!   !   !   !   Child: 1  Assign: = [type int] [line: 78]
!   !   !   !   !   Child: 0  Id: LEFT [type int] [line: 78]
!   !   !   !   !   Child: 1  Op: - [type int] [line: 78]
!   !   !   !   !   !   Child: 0  Const: 512 [type int] [line: 78]
!   !   !   !   Sibling: 0  While [type void] [line: 79]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 79]
!   !   !   !   !   !   Child: 0  Id: LEFT [type int] [line: 79]
!   !   !   !   !   !   Child: 1  Id: XMax [type int] [line: 79]
!   !   !   !   !   Child: 1  Compound [type void] [line: 80]
!   !   !   !   !   !   Child: 0  Var Len of type int [type int] [line: 81]
!   !   !   !   !   !   Sibling: 0  Var Bi of type int [type int] [line: 82]
!   !   !   !   !   !   Sibling: 1  Var A of type int [type int] [line: 82]
!   !   !   !   !   !   Sibling: 2  Var NextA of type int [type int] [line: 82]
!   !   !   !   !   !   Sibling: 3  Var NextBi of type int [type int] [line: 82]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 83]
!   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 83]
!   !   !   !   !   !   !   Child: 1  Id: LEFT [type int] [line: 83]
!   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 84]
!   !   !   !   !   !   !   Child: 0  Id: Bi [type int] [line: 84]
!   !   !   !   !   !   !   Child: 1  Id: TOP [type int] [line: 84]
!   !   !   !   !   !   Sibling: 1  Assign: = [type int] [line: 85]
!   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 85]
!   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 85]
!   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 85]
!   !   !   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 85]
!   !   !   !   !   !   !   !   !   Child: 1  Id: A [type int] [line: 85]
!   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 85]
!   !   !   !   !   !   Sibling: 2  Assign: = [type int] [line: 86]
!   !   !   !   !   !   !   Child: 0  Id: NextBi [type int] [line: 86]
!   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 86]
!   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 86]
!   !   !   !   !   !   !   !   !   Child: 0  Id: Bi [type int] [line: 86]
!   !   !   !   !   !   !   !   !   Child: 1  Id: Bi [type int] [line: 86]
!   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 86]
!   !   !   !   !   !   Sibling: 3  Assign: = [type int] [line: 87]
!   !   !   !   !   !   !   Child: 0  Id: Len [type int] [line: 87]
!   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 87]
!   !   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 87]
!   !   !   !   !   !   !   !   Child: 1  Id: NextBi [type int] [line: 87]
!   !   !   !   !   !   Sibling: 4  Assign: = [type int] [line: 88]
!   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 88]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 88]
!   !   !   !   !   !   Sibling: 5  While [type void] [line: 89]
!   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 89]
!   !   !   !   !   !   !   !   Child: 0  Op: <= [type bool] [line: 89]
!   !   !   !   !   !   !   !   !   Child: 0  Id: Len [type int] [line: 89]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 1024 [type int] [line: 89]
!   !   !   !   !   !   !   !   Child: 1  Op: < [type bool] [line: 89]
!   !   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 89]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 11 [type int] [line: 89]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 90]
!   !   !   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 91]
!   !   !   !   !   !   !   !   !   Child: 0  Id: Bi [type int] [line: 91]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 91]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: / [type int] [line: 91]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 91]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Const: 2 [type int] [line: 91]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Op: * [type int] [line: 91]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 91]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: Bi [type int] [line: 91]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 91]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: CBi [type int] [line: 91]
!   !   !   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 92]
!   !   !   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 92]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 92]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: - [type int] [line: 92]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 92]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: NextBi [type int] [line: 92]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: CA [type int] [line: 92]
!   !   !   !   !   !   !   !   Sibling: 1  Assign: = [type int] [line: 93]
!   !   !   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 93]
!   !   !   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 93]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 93]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: A [type int] [line: 93]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: A [type int] [line: 93]
!   !   !   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 93]
!   !   !   !   !   !   !   !   Sibling: 2  Assign: = [type int] [line: 94]
!   !   !   !   !   !   !   !   !   Child: 0  Id: NextBi [type int] [line: 94]
!   !   !   !   !   !   !   !   !   Child: 1  Op: / [type int] [line: 94]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: * [type int] [line: 94]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: Bi [type int] [line: 94]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: Bi [type int] [line: 94]
!   !   !   !   !   !   !   !   !   !   Child: 1  Const: 256 [type int] [line: 94]
!   !   !   !   !   !   !   !   Sibling: 3  Assign: = [type int] [line: 95]
!   !   !   !   !   !   !   !   !   Child: 0  Id: Len [type int] [line: 95]
!   !   !   !   !   !   !   !   !   Child: 1  Op: + [type int] [line: 95]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: NextA [type int] [line: 95]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: NextBi [type int] [line: 95]
!   !   !   !   !   !   !   !   Sibling: 4  Assign: ++ [type int] [line: 96]
!   !   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 96]
!   !   !   !   !   !   Sibling: 6  If [type void] [line: 98]
!   !   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 98]
!   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 98]
!   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 98]
!   !   !   !   !   !   !   Child: 1  Call: output [type void] [line: 99]
!   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 99]
!   !   !   !   !   !   !   Child: 2  Call: outputb [type void] [line: 101]
!   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 101]
!   !   !   !   !   !   !   !   !   Child: 0  Id: iter [type int] [line: 101]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 11 [type int] [line: 101]
!   !   !   !   !   !   Sibling: 7  Assign: += [type int] [line: 102]
!   !   !   !   !   !   !   Child: 0  Id: LEFT [type int] [line: 102]
!   !   !   !   !   !   !   Child: 1  Id: XStep [type int] [line: 102]
!   !   !   !   Sibling: 1  Call: outnl [type void] [line: 104]
!   !   !   !   Sibling: 2  Assign: += [type int] [line: 105]
!   !   !   !   !   Child: 0  Id: TOP [type int] [line: 105]
!   !   !   !   !   Child: 1  Id: YStep [type int] [line: 105]
Sibling: 17  Func main returns type void [type void] [line: 109]
!   Child: 1  Compound [type void] [line: 110]
!   !   Child: 0  Var JuliaVals is array of type int [type int] [line: 111]
!   !   Child: 1  Assign: = [type int] [line: 112]
!   !   !   Child: 0  Id: TOP [type int] [line: 112]
!   !   !   Child: 1  Op: - [type int] [line: 112]
!   !   !   !   Child: 0  Const: 320 [type int] [line: 112]
!   !   Sibling: 0  Assign: = [type int] [line: 113]
!   !   !   Child: 0  Id: LEFT [type int] [line: 113]
!   !   !   Child: 1  Op: - [type int] [line: 113]
!   !   !   !   Child: 0  Const: 512 [type int] [line: 113]
!   !   Sibling: 1  Assign: = [type int] [line: 114]
!   !   !   Child: 0  Id: HEIGHT [type int] [line: 114]
!   !   !   Child: 1  Const: 640 [type int] [line: 114]
!   !   Sibling: 2  Assign: = [type int] [line: 115]
!   !   !   Child: 0  Id: WIDTH [type int] [line: 115]
!   !   !   Child: 1  Const: 716 [type int] [line: 115]
!   !   Sibling: 3  Assign: = [type int] [line: 116]
!   !   !   Child: 0  Id: XStep [type int] [line: 116]
!   !   !   Child: 1  Op: / [type int] [line: 116]
!   !   !   !   Child: 0  Id: WIDTH [type int] [line: 116]
!   !   !   !   Child: 1  Const: 40 [type int] [line: 116]
!   !   Sibling: 4  Assign: = [type int] [line: 117]
!   !   !   Child: 0  Id: YStep [type int] [line: 117]
!   !   !   Child: 1  Op: / [type int] [line: 117]
!   !   !   !   Child: 0  Id: HEIGHT [type int] [line: 117]
!   !   !   !   Child: 1  Const: 36 [type int] [line: 117]
!   !   Sibling: 5  Assign: = [type int] [line: 118]
!   !   !   Child: 0  Id: XMax [type int] [line: 118]
!   !   !   Child: 1  Op: + [type int] [line: 118]
!   !   !   !   Child: 0  Id: LEFT [type int] [line: 118]
!   !   !   !   Child: 1  Id: WIDTH [type int] [line: 118]
!   !   Sibling: 6  Assign: = [type int] [line: 119]
!   !   !   Child: 0  Id: YMax [type int] [line: 119]
!   !   !   Child: 1  Op: + [type int] [line: 119]
!   !   !   !   Child: 0  Id: TOP [type int] [line: 119]
!   !   !   !   Child: 1  Id: HEIGHT [type int] [line: 119]
!   !   Sibling: 7  Call: Mandelbrot [type void] [line: 120]
!   !   !   Child: 0  Id: JuliaVals [type int] [line: 120]
!   !   Sibling: 8  Call: outnl [type void] [line: 122]
!   !   Sibling: 9  Assign: = [type int] [line: 124]
!   !   !   Child: 0  Id: TOP [type int] [line: 124]
!   !   !   Child: 1  Op: - [type int] [line: 124]
!   !   !   !   Child: 0  Const: 320 [type int] [line: 124]
!   !   Sibling: 10  Assign: = [type int] [line: 125]
!   !   !   Child: 0  Id: LEFT [type int] [line: 125]
!   !   !   Child: 1  Op: - [type int] [line: 125]
!   !   !   !   Child: 0  Const: 512 [type int] [line: 125]
!   !   Sibling: 11  Assign: = [type int] [line: 126]
!   !   !   Child: 0  Id: HEIGHT [type int] [line: 126]
!   !   !   Child: 1  Const: 640 [type int] [line: 126]
!   !   Sibling: 12  Assign: = [type int] [line: 127]
!   !   !   Child: 0  Id: WIDTH [type int] [line: 127]
!   !   !   Child: 1  Const: 716 [type int] [line: 127]
!   !   Sibling: 13  Assign: = [type int] [line: 128]
!   !   !   Child: 0  Id: XStep [type int] [line: 128]
!   !   !   Child: 1  Op: / [type int] [line: 128]
!   !   !   !   Child: 0  Id: WIDTH [type int] [line: 128]
!   !   !   !   Child: 1  Const: 40 [type int] [line: 128]
!   !   Sibling: 14  Assign: = [type int] [line: 129]
!   !   !   Child: 0  Id: YStep [type int] [line: 129]
!   !   !   Child: 1  Op: / [type int] [line: 129]
!   !   !   !   Child: 0  Id: HEIGHT [type int] [line: 129]
!   !   !   !   Child: 1  Const: 36 [type int] [line: 129]
!   !   Sibling: 15  Assign: = [type int] [line: 130]
!   !   !   Child: 0  Id: XMax [type int] [line: 130]
!   !   !   Child: 1  Op: + [type int] [line: 130]
!   !   !   !   Child: 0  Id: LEFT [type int] [line: 130]
!   !   !   !   Child: 1  Id: WIDTH [type int] [line: 130]
!   !   Sibling: 16  Assign: = [type int] [line: 131]
!   !   !   Child: 0  Id: YMax [type int] [line: 131]
!   !   !   Child: 1  Op: + [type int] [line: 131]
!   !   !   !   Child: 0  Id: TOP [type int] [line: 131]
!   !   !   !   Child: 1  Id: HEIGHT [type int] [line: 131]
!   !   Sibling: 17  Call: Julia [type void] [line: 132]
!   !   !   Child: 0  Op: [ [type int] [line: 132]
!   !   !   !   Child: 0  Id: JuliaVals [type int] [line: 132]
!   !   !   !   Child: 1  Const: 0 [type int] [line: 132]
!   !   !   Sibling: 0  Op: [ [type int] [line: 132]
!   !   !   !   Child: 0  Id: JuliaVals [type int] [line: 132]
!   !   !   !   Child: 1  Const: 1 [type int] [line: 132]
Number of warnings: 0
Number of errors: 0
