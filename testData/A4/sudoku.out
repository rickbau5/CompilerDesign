Func input returns type int [type int] [line: -1]
Sibling: 0  Func output returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type int [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type bool [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [type char] [line: -1]
Sibling: 4  Func outputc returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type void [type void] [line: -1]
Sibling: 5  Func outnl returns type void [type void] [line: -1]
Sibling: 6  Var board is array of type int [type int] [line: 21]
Sibling: 7  Var locked is array of type bool [type bool] [line: 22]
Sibling: 8  Func initBoard returns type void [type void] [line: 25]
!   Child: 1  Compound [type void] [line: 26]
!   !   Child: 0  Var i of type int [type int] [line: 27]
!   !   Child: 1  Assign: = [type int] [line: 28]
!   !   !   Child: 0  Id: i [type int] [line: 28]
!   !   !   Child: 1  Const: 0 [type int] [line: 28]
!   !   Sibling: 0  While [type void] [line: 29]
!   !   !   Child: 0  Op: < [type bool] [line: 29]
!   !   !   !   Child: 0  Id: i [type int] [line: 29]
!   !   !   !   Child: 1  Const: 81 [type int] [line: 29]
!   !   !   Child: 1  Compound [type void] [line: 29]
!   !   !   !   Child: 1  Assign: = [type int] [line: 30]
!   !   !   !   !   Child: 0  Op: [ [type int] [line: 30]
!   !   !   !   !   !   Child: 0  Id: board [type int] [line: 30]
!   !   !   !   !   !   Child: 1  Id: i [type int] [line: 30]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 30]
!   !   !   !   Sibling: 0  Assign: = [type bool] [line: 31]
!   !   !   !   !   Child: 0  Op: [ [type bool] [line: 31]
!   !   !   !   !   !   Child: 0  Id: locked [type bool] [line: 31]
!   !   !   !   !   !   Child: 1  Id: i [type int] [line: 31]
!   !   !   !   !   Child: 1  Const: false [type bool] [line: 31]
!   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 32]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 32]
Sibling: 9  Func setValue returns type void [type void] [line: 37]
!   Child: 0  Param row of type int [type int] [line: 37]
!   Sibling: 0  Param col of type int [type int] [line: 37]
!   Sibling: 1  Param value of type int [type int] [line: 37]
!   Child: 1  Compound [type void] [line: 38]
!   !   Child: 1  Assign: = [type int] [line: 39]
!   !   !   Child: 0  Op: [ [type int] [line: 39]
!   !   !   !   Child: 0  Id: board [type int] [line: 39]
!   !   !   !   Child: 1  Op: + [type int] [line: 39]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 39]
!   !   !   !   !   !   Child: 0  Id: row [type int] [line: 39]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 39]
!   !   !   !   !   Child: 1  Id: col [type int] [line: 39]
!   !   !   Child: 1  Id: value [type int] [line: 39]
Sibling: 10  Func getValue returns type int [type int] [line: 43]
!   Child: 0  Param row of type int [type int] [line: 43]
!   Sibling: 0  Param col of type int [type int] [line: 43]
!   Child: 1  Compound [type void] [line: 44]
!   !   Child: 1  Return [type void] [line: 45]
!   !   !   Child: 0  Op: [ [type int] [line: 45]
!   !   !   !   Child: 0  Id: board [type int] [line: 45]
!   !   !   !   Child: 1  Op: + [type int] [line: 45]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 45]
!   !   !   !   !   !   Child: 0  Id: row [type int] [line: 45]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 45]
!   !   !   !   !   Child: 1  Id: col [type int] [line: 45]
Sibling: 11  Func setLocked returns type void [type void] [line: 49]
!   Child: 0  Param row of type int [type int] [line: 49]
!   Sibling: 0  Param col of type int [type int] [line: 49]
!   Sibling: 1  Param value of type bool [type bool] [line: 49]
!   Child: 1  Compound [type void] [line: 50]
!   !   Child: 1  Assign: = [type bool] [line: 51]
!   !   !   Child: 0  Op: [ [type bool] [line: 51]
!   !   !   !   Child: 0  Id: locked [type bool] [line: 51]
!   !   !   !   Child: 1  Op: + [type int] [line: 51]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 51]
!   !   !   !   !   !   Child: 0  Id: row [type int] [line: 51]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 51]
!   !   !   !   !   Child: 1  Id: col [type int] [line: 51]
!   !   !   Child: 1  Id: value [type bool] [line: 51]
Sibling: 12  Func getLocked returns type bool [type bool] [line: 55]
!   Child: 0  Param row of type int [type int] [line: 55]
!   Sibling: 0  Param col of type int [type int] [line: 55]
!   Child: 1  Compound [type void] [line: 56]
!   !   Child: 1  Return [type void] [line: 57]
!   !   !   Child: 0  Op: [ [type bool] [line: 57]
!   !   !   !   Child: 0  Id: locked [type bool] [line: 57]
!   !   !   !   Child: 1  Op: + [type int] [line: 57]
!   !   !   !   !   Child: 0  Op: * [type int] [line: 57]
!   !   !   !   !   !   Child: 0  Id: row [type int] [line: 57]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 57]
!   !   !   !   !   Child: 1  Id: col [type int] [line: 57]
Sibling: 13  Func isOkAt returns type bool [type bool] [line: 61]
!   Child: 0  Param row of type int [type int] [line: 61]
!   Sibling: 0  Param col of type int [type int] [line: 61]
!   Sibling: 1  Param value of type int [type int] [line: 61]
!   Child: 1  Compound [type void] [line: 62]
!   !   Child: 0  Var i of type int [type int] [line: 63]
!   !   Sibling: 0  Var j of type int [type int] [line: 63]
!   !   Sibling: 1  Var boxRowStart of type int [type int] [line: 63]
!   !   Sibling: 2  Var boxColStart of type int [type int] [line: 63]
!   !   Child: 1  Assign: = [type int] [line: 66]
!   !   !   Child: 0  Id: i [type int] [line: 66]
!   !   !   Child: 1  Const: 0 [type int] [line: 66]
!   !   Sibling: 0  While [type void] [line: 67]
!   !   !   Child: 0  Op: < [type bool] [line: 67]
!   !   !   !   Child: 0  Id: i [type int] [line: 67]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 67]
!   !   !   Child: 1  Compound [type void] [line: 67]
!   !   !   !   Child: 1  If [type void] [line: 68]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 68]
!   !   !   !   !   !   Child: 0  Call: getValue [type int] [line: 68]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 68]
!   !   !   !   !   !   !   Sibling: 0  Id: col [type int] [line: 68]
!   !   !   !   !   !   Child: 1  Id: value [type int] [line: 68]
!   !   !   !   !   Child: 1  Return [type void] [line: 68]
!   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 68]
!   !   !   !   Sibling: 0  If [type void] [line: 69]
!   !   !   !   !   Child: 0  Op: == [type bool] [line: 69]
!   !   !   !   !   !   Child: 0  Call: getValue [type int] [line: 69]
!   !   !   !   !   !   !   Child: 0  Id: row [type int] [line: 69]
!   !   !   !   !   !   !   Sibling: 0  Id: i [type int] [line: 69]
!   !   !   !   !   !   Child: 1  Id: value [type int] [line: 69]
!   !   !   !   !   Child: 1  Return [type void] [line: 69]
!   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 69]
!   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 70]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 70]
!   !   Sibling: 1  Assign: = [type int] [line: 74]
!   !   !   Child: 0  Id: boxRowStart [type int] [line: 74]
!   !   !   Child: 1  Op: * [type int] [line: 74]
!   !   !   !   Child: 0  Op: / [type int] [line: 74]
!   !   !   !   !   Child: 0  Id: row [type int] [line: 74]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 74]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 74]
!   !   Sibling: 2  Assign: = [type int] [line: 75]
!   !   !   Child: 0  Id: boxColStart [type int] [line: 75]
!   !   !   Child: 1  Op: * [type int] [line: 75]
!   !   !   !   Child: 0  Op: / [type int] [line: 75]
!   !   !   !   !   Child: 0  Id: col [type int] [line: 75]
!   !   !   !   !   Child: 1  Const: 3 [type int] [line: 75]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 75]
!   !   Sibling: 3  Assign: = [type int] [line: 76]
!   !   !   Child: 0  Id: i [type int] [line: 76]
!   !   !   Child: 1  Const: 0 [type int] [line: 76]
!   !   Sibling: 4  While [type void] [line: 77]
!   !   !   Child: 0  Op: < [type bool] [line: 77]
!   !   !   !   Child: 0  Id: i [type int] [line: 77]
!   !   !   !   Child: 1  Const: 3 [type int] [line: 77]
!   !   !   Child: 1  Compound [type void] [line: 77]
!   !   !   !   Child: 1  Assign: = [type int] [line: 78]
!   !   !   !   !   Child: 0  Id: j [type int] [line: 78]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 78]
!   !   !   !   Sibling: 0  While [type void] [line: 79]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 79]
!   !   !   !   !   !   Child: 0  Id: j [type int] [line: 79]
!   !   !   !   !   !   Child: 1  Const: 3 [type int] [line: 79]
!   !   !   !   !   Child: 1  Compound [type void] [line: 79]
!   !   !   !   !   !   Child: 1  If [type void] [line: 80]
!   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 80]
!   !   !   !   !   !   !   !   Child: 0  Call: getValue [type int] [line: 80]
!   !   !   !   !   !   !   !   !   Child: 0  Op: + [type int] [line: 80]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: boxRowStart [type int] [line: 80]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: i [type int] [line: 80]
!   !   !   !   !   !   !   !   !   Sibling: 0  Op: + [type int] [line: 80]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: boxColStart [type int] [line: 80]
!   !   !   !   !   !   !   !   !   !   Child: 1  Id: j [type int] [line: 80]
!   !   !   !   !   !   !   !   Child: 1  Id: value [type int] [line: 80]
!   !   !   !   !   !   !   Child: 1  Return [type void] [line: 80]
!   !   !   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 80]
!   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 81]
!   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 81]
!   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 83]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 83]
!   !   Sibling: 5  Return [type void] [line: 86]
!   !   !   Child: 0  Const: true [type bool] [line: 86]
Sibling: 14  Func search returns type bool [type bool] [line: 90]
!   Child: 0  Param i of type int [type int] [line: 90]
!   Sibling: 0  Param j of type int [type int] [line: 90]
!   Child: 1  Compound [type void] [line: 91]
!   !   Child: 1  If [type void] [line: 92]
!   !   !   Child: 0  Call: getLocked [type bool] [line: 92]
!   !   !   !   Child: 0  Id: i [type int] [line: 92]
!   !   !   !   Sibling: 0  Id: j [type int] [line: 92]
!   !   !   Child: 1  Compound [type void] [line: 93]
!   !   !   !   Child: 1  If [type void] [line: 94]
!   !   !   !   !   Child: 0  Op: and [type bool] [line: 94]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 94]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 94]
!   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 94]
!   !   !   !   !   !   Child: 1  Op: == [type bool] [line: 94]
!   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 94]
!   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 94]
!   !   !   !   !   Child: 1  Return [type void] [line: 94]
!   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 94]
!   !   !   !   !   Child: 2  If [type void] [line: 95]
!   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 95]
!   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 95]
!   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 95]
!   !   !   !   !   !   Child: 1  Return [type void] [line: 95]
!   !   !   !   !   !   !   Child: 0  Call: search [type bool] [line: 95]
!   !   !   !   !   !   !   !   Child: 0  Op: + [type int] [line: 95]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 95]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 95]
!   !   !   !   !   !   !   !   Sibling: 0  Const: 0 [type int] [line: 95]
!   !   !   !   !   !   Child: 2  Return [type void] [line: 96]
!   !   !   !   !   !   !   Child: 0  Call: search [type bool] [line: 96]
!   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 96]
!   !   !   !   !   !   !   !   Sibling: 0  Op: + [type int] [line: 96]
!   !   !   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 96]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 96]
!   !   !   Child: 2  Compound [type void] [line: 99]
!   !   !   !   Child: 0  Var n of type int [type int] [line: 100]
!   !   !   !   Sibling: 0  Var foundOne of type bool [type bool] [line: 101]
!   !   !   !   Child: 1  Assign: = [type int] [line: 102]
!   !   !   !   !   Child: 0  Id: n [type int] [line: 102]
!   !   !   !   !   Child: 1  Const: 1 [type int] [line: 102]
!   !   !   !   Sibling: 0  While [type void] [line: 103]
!   !   !   !   !   Child: 0  Op: <= [type bool] [line: 103]
!   !   !   !   !   !   Child: 0  Id: n [type int] [line: 103]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 103]
!   !   !   !   !   Child: 1  Compound [type void] [line: 103]
!   !   !   !   !   !   Child: 1  If [type void] [line: 104]
!   !   !   !   !   !   !   Child: 0  Call: isOkAt [type bool] [line: 104]
!   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 104]
!   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 104]
!   !   !   !   !   !   !   !   Sibling: 1  Id: n [type int] [line: 104]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 104]
!   !   !   !   !   !   !   !   Child: 1  Call: setValue [type void] [line: 105]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 105]
!   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 105]
!   !   !   !   !   !   !   !   !   Sibling: 1  Id: n [type int] [line: 105]
!   !   !   !   !   !   !   !   Sibling: 0  If [type void] [line: 106]
!   !   !   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 106]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 106]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 106]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 106]
!   !   !   !   !   !   !   !   !   !   Child: 1  Op: == [type bool] [line: 106]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 106]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 106]
!   !   !   !   !   !   !   !   !   Child: 1  Return [type void] [line: 106]
!   !   !   !   !   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 106]
!   !   !   !   !   !   !   !   !   Child: 2  If [type void] [line: 107]
!   !   !   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 8 [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [type bool] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Call: search [type bool] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: + [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Const: 0 [type int] [line: 107]
!   !   !   !   !   !   !   !   !   !   Child: 2  Assign: = [type bool] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [type bool] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Call: search [type bool] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Op: + [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 108]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 108]
!   !   !   !   !   !   !   !   Sibling: 1  If [type void] [line: 109]
!   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [type bool] [line: 109]
!   !   !   !   !   !   !   !   !   Child: 1  Return [type void] [line: 109]
!   !   !   !   !   !   !   !   !   !   Child: 0  Const: true [type bool] [line: 109]
!   !   !   !   !   !   !   !   !   Child: 2  Call: setValue [type void] [line: 110]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 110]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 110]
!   !   !   !   !   !   !   !   !   !   Sibling: 1  Const: 0 [type int] [line: 110]
!   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 112]
!   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 112]
!   !   Sibling: 0  Return [type void] [line: 115]
!   !   !   Child: 0  Const: false [type bool] [line: 115]
Sibling: 15  Func searchTrivial returns type void [type void] [line: 119]
!   Child: 1  Compound [type void] [line: 120]
!   !   Child: 0  Var i of type int [type int] [line: 121]
!   !   Sibling: 0  Var j of type int [type int] [line: 121]
!   !   Sibling: 1  Var test of type int [type int] [line: 121]
!   !   Sibling: 2  Var value of type int [type int] [line: 121]
!   !   Sibling: 3  Var changed of type bool [type bool] [line: 122]
!   !   Sibling: 4  Var foundOne of type bool [type bool] [line: 122]
!   !   Child: 1  Assign: = [type bool] [line: 124]
!   !   !   Child: 0  Id: changed [type bool] [line: 124]
!   !   !   Child: 1  Const: true [type bool] [line: 124]
!   !   Sibling: 0  While [type void] [line: 125]
!   !   !   Child: 0  Id: changed [type bool] [line: 125]
!   !   !   Child: 1  Compound [type void] [line: 125]
!   !   !   !   Child: 1  Assign: = [type bool] [line: 126]
!   !   !   !   !   Child: 0  Id: changed [type bool] [line: 126]
!   !   !   !   !   Child: 1  Const: false [type bool] [line: 126]
!   !   !   !   Sibling: 0  Assign: = [type int] [line: 127]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 127]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 127]
!   !   !   !   Sibling: 1  While [type void] [line: 128]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 128]
!   !   !   !   !   !   Child: 0  Id: i [type int] [line: 128]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 128]
!   !   !   !   !   Child: 1  Compound [type void] [line: 128]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 129]
!   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 129]
!   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 129]
!   !   !   !   !   !   Sibling: 0  While [type void] [line: 130]
!   !   !   !   !   !   !   Child: 0  Op: < [type bool] [line: 130]
!   !   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 130]
!   !   !   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 130]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 130]
!   !   !   !   !   !   !   !   Child: 1  If [type void] [line: 131]
!   !   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 131]
!   !   !   !   !   !   !   !   !   !   Child: 0  Call: getLocked [type bool] [line: 131]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 131]
!   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 131]
!   !   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 131]
!   !   !   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 131]
!   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 132]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: test [type int] [line: 132]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 1 [type int] [line: 132]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Assign: = [type bool] [line: 133]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [type bool] [line: 133]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 133]
!   !   !   !   !   !   !   !   !   !   Sibling: 1  While [type void] [line: 134]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Op: <= [type bool] [line: 134]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: test [type int] [line: 134]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 134]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 134]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  If [type void] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Call: isOkAt [type bool] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 1  Id: test [type int] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 135]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  If [type void] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [type bool] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 136]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 137]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [type bool] [line: 137]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 137]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Break [type void] [line: 138]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 2  Compound [type void] [line: 140]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Assign: = [type bool] [line: 141]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [type bool] [line: 141]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 141]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Assign: = [type int] [line: 142]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: value [type int] [line: 142]
!   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Id: test [type int] [line: 142]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 145]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: test [type int] [line: 145]
!   !   !   !   !   !   !   !   !   !   Sibling: 2  If [type void] [line: 147]
!   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: foundOne [type bool] [line: 147]
!   !   !   !   !   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 147]
!   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Call: setValue [type void] [line: 148]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 148]
!   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 148]
!   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 1  Id: value [type int] [line: 148]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Call: setLocked [type void] [line: 149]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 149]
!   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 149]
!   !   !   !   !   !   !   !   !   !   !   !   !   Sibling: 1  Const: true [type bool] [line: 149]
!   !   !   !   !   !   !   !   !   !   !   !   Sibling: 1  Assign: = [type bool] [line: 150]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 0  Id: changed [type bool] [line: 150]
!   !   !   !   !   !   !   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 150]
!   !   !   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 153]
!   !   !   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 153]
!   !   !   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 155]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 155]
Sibling: 16  Func solve returns type bool [type bool] [line: 161]
!   Child: 1  Compound [type void] [line: 162]
!   !   Child: 0  Var i of type int [type int] [line: 163]
!   !   Sibling: 0  Var j of type int [type int] [line: 163]
!   !   Sibling: 1  Var n of type int [type int] [line: 163]
!   !   Child: 1  Assign: = [type int] [line: 164]
!   !   !   Child: 0  Id: i [type int] [line: 164]
!   !   !   Child: 1  Const: 0 [type int] [line: 164]
!   !   Sibling: 0  While [type void] [line: 167]
!   !   !   Child: 0  Op: < [type bool] [line: 167]
!   !   !   !   Child: 0  Id: i [type int] [line: 167]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 167]
!   !   !   Child: 1  Compound [type void] [line: 167]
!   !   !   !   Child: 1  Assign: = [type int] [line: 168]
!   !   !   !   !   Child: 0  Id: j [type int] [line: 168]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 168]
!   !   !   !   Sibling: 0  While [type void] [line: 169]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 169]
!   !   !   !   !   !   Child: 0  Id: j [type int] [line: 169]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 169]
!   !   !   !   !   Child: 1  Compound [type void] [line: 169]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 170]
!   !   !   !   !   !   !   Child: 0  Id: n [type int] [line: 170]
!   !   !   !   !   !   !   Child: 1  Call: getValue [type int] [line: 170]
!   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 170]
!   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 170]
!   !   !   !   !   !   Sibling: 0  Call: setValue [type void] [line: 171]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 171]
!   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 171]
!   !   !   !   !   !   !   Sibling: 1  Const: 0 [type int] [line: 171]
!   !   !   !   !   !   Sibling: 1  If [type void] [line: 172]
!   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 172]
!   !   !   !   !   !   !   !   Child: 0  Op: == [type bool] [line: 172]
!   !   !   !   !   !   !   !   !   Child: 0  Call: getLocked [type bool] [line: 172]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 172]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 172]
!   !   !   !   !   !   !   !   !   Child: 1  Const: true [type bool] [line: 172]
!   !   !   !   !   !   !   !   Child: 1  Op: == [type bool] [line: 172]
!   !   !   !   !   !   !   !   !   Child: 0  Call: isOkAt [type bool] [line: 172]
!   !   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 172]
!   !   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 172]
!   !   !   !   !   !   !   !   !   !   Sibling: 1  Id: n [type int] [line: 172]
!   !   !   !   !   !   !   !   !   Child: 1  Const: false [type bool] [line: 172]
!   !   !   !   !   !   !   Child: 1  Return [type void] [line: 173]
!   !   !   !   !   !   !   !   Child: 0  Const: false [type bool] [line: 173]
!   !   !   !   !   !   Sibling: 2  Call: setValue [type void] [line: 174]
!   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 174]
!   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 174]
!   !   !   !   !   !   !   Sibling: 1  Id: n [type int] [line: 174]
!   !   !   !   !   !   Sibling: 3  Assign: ++ [type int] [line: 175]
!   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 175]
!   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 177]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 177]
!   !   Sibling: 1  Call: searchTrivial [type void] [line: 180]
!   !   Sibling: 2  Return [type void] [line: 181]
!   !   !   Child: 0  Call: search [type bool] [line: 181]
!   !   !   !   Child: 0  Const: 0 [type int] [line: 181]
!   !   !   !   Sibling: 0  Const: 0 [type int] [line: 181]
Sibling: 17  Func showBoard returns type void [type void] [line: 185]
!   Child: 1  Compound [type void] [line: 186]
!   !   Child: 0  Var i of type int [type int] [line: 187]
!   !   Sibling: 0  Var j of type int [type int] [line: 187]
!   !   Child: 1  Call: outnl [type void] [line: 188]
!   !   Sibling: 0  Assign: = [type int] [line: 189]
!   !   !   Child: 0  Id: i [type int] [line: 189]
!   !   !   Child: 1  Const: 0 [type int] [line: 189]
!   !   Sibling: 1  While [type void] [line: 190]
!   !   !   Child: 0  Op: < [type bool] [line: 190]
!   !   !   !   Child: 0  Id: i [type int] [line: 190]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 190]
!   !   !   Child: 1  Compound [type void] [line: 190]
!   !   !   !   Child: 1  Assign: = [type int] [line: 191]
!   !   !   !   !   Child: 0  Id: j [type int] [line: 191]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 191]
!   !   !   !   Sibling: 0  While [type void] [line: 192]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 192]
!   !   !   !   !   !   Child: 0  Id: j [type int] [line: 192]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 192]
!   !   !   !   !   Child: 1  Compound [type void] [line: 192]
!   !   !   !   !   !   Child: 1  Call: output [type void] [line: 193]
!   !   !   !   !   !   !   Child: 0  Call: getValue [type int] [line: 193]
!   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 193]
!   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 193]
!   !   !   !   !   !   Sibling: 0  Assign: ++ [type int] [line: 194]
!   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 194]
!   !   !   !   Sibling: 1  Call: outnl [type void] [line: 196]
!   !   !   !   Sibling: 2  Assign: ++ [type int] [line: 197]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 197]
!   !   Sibling: 2  Call: outnl [type void] [line: 199]
Sibling: 18  Func getInput returns type void [type void] [line: 203]
!   Child: 1  Compound [type void] [line: 204]
!   !   Child: 0  Var i of type int [type int] [line: 205]
!   !   Sibling: 0  Var j of type int [type int] [line: 205]
!   !   Sibling: 1  Var inputVal of type int [type int] [line: 205]
!   !   Child: 1  Assign: = [type int] [line: 206]
!   !   !   Child: 0  Id: i [type int] [line: 206]
!   !   !   Child: 1  Const: 0 [type int] [line: 206]
!   !   Sibling: 0  While [type void] [line: 207]
!   !   !   Child: 0  Op: < [type bool] [line: 207]
!   !   !   !   Child: 0  Id: i [type int] [line: 207]
!   !   !   !   Child: 1  Const: 9 [type int] [line: 207]
!   !   !   Child: 1  Compound [type void] [line: 207]
!   !   !   !   Child: 1  Assign: = [type int] [line: 208]
!   !   !   !   !   Child: 0  Id: j [type int] [line: 208]
!   !   !   !   !   Child: 1  Const: 0 [type int] [line: 208]
!   !   !   !   Sibling: 0  While [type void] [line: 209]
!   !   !   !   !   Child: 0  Op: < [type bool] [line: 209]
!   !   !   !   !   !   Child: 0  Id: j [type int] [line: 209]
!   !   !   !   !   !   Child: 1  Const: 9 [type int] [line: 209]
!   !   !   !   !   Child: 1  Compound [type void] [line: 209]
!   !   !   !   !   !   Child: 1  Assign: = [type int] [line: 210]
!   !   !   !   !   !   !   Child: 0  Id: inputVal [type int] [line: 210]
!   !   !   !   !   !   !   Child: 1  Call: input [type int] [line: 210]
!   !   !   !   !   !   Sibling: 0  If [type void] [line: 211]
!   !   !   !   !   !   !   Child: 0  Op: and [type bool] [line: 211]
!   !   !   !   !   !   !   !   Child: 0  Op: > [type bool] [line: 211]
!   !   !   !   !   !   !   !   !   Child: 0  Id: inputVal [type int] [line: 211]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 0 [type int] [line: 211]
!   !   !   !   !   !   !   !   Child: 1  Op: < [type bool] [line: 211]
!   !   !   !   !   !   !   !   !   Child: 0  Id: inputVal [type int] [line: 211]
!   !   !   !   !   !   !   !   !   Child: 1  Const: 10 [type int] [line: 211]
!   !   !   !   !   !   !   Child: 1  Compound [type void] [line: 212]
!   !   !   !   !   !   !   !   Child: 1  Call: setValue [type void] [line: 213]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 213]
!   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 213]
!   !   !   !   !   !   !   !   !   Sibling: 1  Id: inputVal [type int] [line: 213]
!   !   !   !   !   !   !   !   Sibling: 0  Call: setLocked [type void] [line: 214]
!   !   !   !   !   !   !   !   !   Child: 0  Id: i [type int] [line: 214]
!   !   !   !   !   !   !   !   !   Sibling: 0  Id: j [type int] [line: 214]
!   !   !   !   !   !   !   !   !   Sibling: 1  Const: true [type bool] [line: 214]
!   !   !   !   !   !   Sibling: 1  Assign: ++ [type int] [line: 216]
!   !   !   !   !   !   !   Child: 0  Id: j [type int] [line: 216]
!   !   !   !   Sibling: 1  Call: outnl [type void] [line: 218]
!   !   !   !   Sibling: 2  Assign: ++ [type int] [line: 219]
!   !   !   !   !   Child: 0  Id: i [type int] [line: 219]
Sibling: 19  Func main returns type int [type int] [line: 223]
!   Child: 1  Compound [type void] [line: 224]
!   !   Child: 1  Call: initBoard [type void] [line: 225]
!   !   Sibling: 0  Call: getInput [type void] [line: 226]
!   !   Sibling: 1  If [type void] [line: 227]
!   !   !   Child: 0  Call: solve [type bool] [line: 227]
!   !   !   Child: 1  Compound [type void] [line: 227]
!   !   !   !   Child: 1  Call: showBoard [type void] [line: 228]
!   !   !   Child: 2  Compound [type void] [line: 230]
!   !   !   !   Child: 1  Call: outputb [type void] [line: 231]
!   !   !   !   !   Child: 0  Const: false [type bool] [line: 231]
!   !   !   !   Sibling: 0  Call: outnl [type void] [line: 232]
!   !   Sibling: 2  Return [type void] [line: 234]
!   !   !   Child: 0  Const: 0 [type int] [line: 234]
Number of warnings: 0
Number of errors: 0
