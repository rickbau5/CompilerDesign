ERROR(14): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(15): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(16): ‘=‘ requires that either both or neither operands be arrays.
ERROR(18): ‘=‘ requires that either both or neither operands be arrays.
ERROR(19): ‘=‘ requires that either both or neither operands be arrays.
ERROR(20): ‘=‘ requires that either both or neither operands be arrays.
ERROR(21): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(21): ‘=‘ requires that either both or neither operands be arrays.
ERROR(22): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(22): ‘=‘ requires that either both or neither operands be arrays.
ERROR(24): ‘=‘ requires that either both or neither operands be arrays.
ERROR(25): ‘=‘ requires that either both or neither operands be arrays.
ERROR(26): ‘=‘ requires that either both or neither operands be arrays.
ERROR(27): '=' requires operands of the same type but lhs is type int and rhs is type char.
ERROR(27): ‘=‘ requires that either both or neither operands be arrays.
ERROR(28): '=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(28): ‘=‘ requires that either both or neither operands be arrays.
ERROR(30): '==' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(30): ‘==‘ requires that either both or neither operands be arrays.
ERROR(31): '==' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(31): ‘==‘ requires that either both or neither operands be arrays.
ERROR(33): '!=' requires operands of the same type but lhs is type int and rhs is type bool.
ERROR(33): ‘!=‘ requires that either both or neither operands be arrays.
ERROR(34): '!=' requires operands of the same type but lhs is type bool and rhs is type int.
ERROR(34): ‘!=‘ requires that either both or neither operands be arrays.
ERROR(36): The operation '>' does not work with arrays.
ERROR(37): The operation '<' does not work with arrays.
ERROR(38): The operation '>=' does not work with arrays.
ERROR(39): The operation '<=' does not work with arrays.
ERROR(43): The operation '>' does not work with arrays.
ERROR(44): The operation '>' does not work with arrays.
ERROR(46): The operation '?' does not work with arrays.
ERROR(49): The operation '*' only works with arrays.
ERROR(50): Cannot index nonarray 'x'.
ERROR(51): Cannot index nonarray 'x'.
ERROR(51): The operation '*' only works with arrays.
ERROR(53): The operation '*' only works with arrays.
Func input returns type int [type int] [line: -1]
Sibling: 0  Func output returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type int [type int] [line: -1]
Sibling: 1  Func inputb returns type bool [type bool] [line: -1]
Sibling: 2  Func outputb returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type bool [type bool] [line: -1]
Sibling: 3  Func inputc returns type char [type char] [line: -1]
Sibling: 4  Func outputc returns type void [type void] [line: -1]
!   Child: 0  Param *dummy* of type void [type void] [line: -1]
Sibling: 5  Func outnl returns type void [type void] [line: -1]
Sibling: 6  Func main returns type void [type void] [line: 1]
!   Child: 1  Compound [type void] [line: 2]
!   !   Child: 0  Var x of type int [type int] [line: 3]
!   !   Sibling: 0  Var c of type char [type char] [line: 4]
!   !   Sibling: 1  Var b of type bool [type bool] [line: 5]
!   !   Sibling: 2  Var xa is array of type int [type int] [line: 6]
!   !   Sibling: 3  Var ca is array of type char [type char] [line: 7]
!   !   Sibling: 4  Var ba is array of type bool [type bool] [line: 8]
!   !   Sibling: 5  Var y of type int [type int] [line: 9]
!   !   Sibling: 6  Var ya is array of type int [type int] [line: 9]
!   !   Child: 1  Assign: = [type int] [line: 11]
!   !   !   Child: 0  Id: xa [type int] [line: 11]
!   !   !   Child: 1  Id: xa [type int] [line: 11]
!   !   Sibling: 0  Assign: = [type char] [line: 12]
!   !   !   Child: 0  Id: ca [type char] [line: 12]
!   !   !   Child: 1  Id: ca [type char] [line: 12]
!   !   Sibling: 1  Assign: = [type bool] [line: 13]
!   !   !   Child: 0  Id: ba [type bool] [line: 13]
!   !   !   Child: 1  Id: ba [type bool] [line: 13]
!   !   Sibling: 2  Assign: = [type int] [line: 14]
!   !   !   Child: 0  Id: xa [type int] [line: 14]
!   !   !   Child: 1  Id: ca [type char] [line: 14]
!   !   Sibling: 3  Assign: = [type int] [line: 15]
!   !   !   Child: 0  Id: xa [type int] [line: 15]
!   !   !   Child: 1  Id: ba [type bool] [line: 15]
!   !   Sibling: 4  Assign: = [type char] [line: 16]
!   !   !   Child: 0  Id: ca [type char] [line: 16]
!   !   !   Child: 1  Const: 'z' [type char] [line: 16]
!   !   Sibling: 5  Assign: = [type int] [line: 18]
!   !   !   Child: 0  Id: xa [type int] [line: 18]
!   !   !   Child: 1  Id: x [type int] [line: 18]
!   !   Sibling: 6  Assign: = [type char] [line: 19]
!   !   !   Child: 0  Id: ca [type char] [line: 19]
!   !   !   Child: 1  Id: c [type char] [line: 19]
!   !   Sibling: 7  Assign: = [type bool] [line: 20]
!   !   !   Child: 0  Id: ba [type bool] [line: 20]
!   !   !   Child: 1  Id: b [type bool] [line: 20]
!   !   Sibling: 8  Assign: = [type int] [line: 21]
!   !   !   Child: 0  Id: xa [type int] [line: 21]
!   !   !   Child: 1  Id: c [type char] [line: 21]
!   !   Sibling: 9  Assign: = [type int] [line: 22]
!   !   !   Child: 0  Id: xa [type int] [line: 22]
!   !   !   Child: 1  Id: b [type bool] [line: 22]
!   !   Sibling: 10  Assign: = [type int] [line: 24]
!   !   !   Child: 0  Id: x [type int] [line: 24]
!   !   !   Child: 1  Id: xa [type int] [line: 24]
!   !   Sibling: 11  Assign: = [type char] [line: 25]
!   !   !   Child: 0  Id: c [type char] [line: 25]
!   !   !   Child: 1  Id: ca [type char] [line: 25]
!   !   Sibling: 12  Assign: = [type bool] [line: 26]
!   !   !   Child: 0  Id: b [type bool] [line: 26]
!   !   !   Child: 1  Id: ba [type bool] [line: 26]
!   !   Sibling: 13  Assign: = [type int] [line: 27]
!   !   !   Child: 0  Id: x [type int] [line: 27]
!   !   !   Child: 1  Id: ca [type char] [line: 27]
!   !   Sibling: 14  Assign: = [type int] [line: 28]
!   !   !   Child: 0  Id: x [type int] [line: 28]
!   !   !   Child: 1  Id: ba [type bool] [line: 28]
!   !   Sibling: 15  Op: == [type bool] [line: 30]
!   !   !   Child: 0  Id: x [type int] [line: 30]
!   !   !   Child: 1  Id: ba [type bool] [line: 30]
!   !   Sibling: 16  Op: == [type bool] [line: 31]
!   !   !   Child: 0  Id: ba [type bool] [line: 31]
!   !   !   Child: 1  Id: x [type int] [line: 31]
!   !   Sibling: 17  Op: != [type bool] [line: 33]
!   !   !   Child: 0  Id: x [type int] [line: 33]
!   !   !   Child: 1  Id: ba [type bool] [line: 33]
!   !   Sibling: 18  Op: != [type bool] [line: 34]
!   !   !   Child: 0  Id: ba [type bool] [line: 34]
!   !   !   Child: 1  Id: x [type int] [line: 34]
!   !   Sibling: 19  Op: > [type bool] [line: 36]
!   !   !   Child: 0  Id: xa [type int] [line: 36]
!   !   !   Child: 1  Id: xa [type int] [line: 36]
!   !   Sibling: 20  Op: < [type bool] [line: 37]
!   !   !   Child: 0  Id: xa [type int] [line: 37]
!   !   !   Child: 1  Id: xa [type int] [line: 37]
!   !   Sibling: 21  Op: >= [type bool] [line: 38]
!   !   !   Child: 0  Id: xa [type int] [line: 38]
!   !   !   Child: 1  Id: xa [type int] [line: 38]
!   !   Sibling: 22  Op: <= [type bool] [line: 39]
!   !   !   Child: 0  Id: xa [type int] [line: 39]
!   !   !   Child: 1  Id: xa [type int] [line: 39]
!   !   Sibling: 23  Op: == [type bool] [line: 40]
!   !   !   Child: 0  Id: xa [type int] [line: 40]
!   !   !   Child: 1  Id: xa [type int] [line: 40]
!   !   Sibling: 24  Op: != [type bool] [line: 41]
!   !   !   Child: 0  Id: xa [type int] [line: 41]
!   !   !   Child: 1  Id: xa [type int] [line: 41]
!   !   Sibling: 25  Op: > [type bool] [line: 43]
!   !   !   Child: 0  Id: xa [type int] [line: 43]
!   !   !   Child: 1  Id: x [type int] [line: 43]
!   !   Sibling: 26  Op: > [type bool] [line: 44]
!   !   !   Child: 0  Id: x [type int] [line: 44]
!   !   !   Child: 1  Id: xa [type int] [line: 44]
!   !   Sibling: 27  Op: ? [type int] [line: 46]
!   !   !   Child: 0  Id: xa [type int] [line: 46]
!   !   Sibling: 28  Op: * [type int] [line: 47]
!   !   !   Child: 0  Id: xa [type int] [line: 47]
!   !   Sibling: 29  Op: * [type int] [line: 48]
!   !   !   Child: 0  Id: ba [type bool] [line: 48]
!   !   Sibling: 30  Op: * [type int] [line: 49]
!   !   !   Child: 0  Op: * [type int] [line: 49]
!   !   !   !   Child: 0  Id: ba [type bool] [line: 49]
!   !   Sibling: 31  Op: [ [type int] [line: 50]
!   !   !   Child: 0  Id: x [type int] [line: 50]
!   !   !   Child: 1  Const: 2 [type int] [line: 50]
!   !   Sibling: 32  Op: * [type int] [line: 51]
!   !   !   Child: 0  Op: [ [type int] [line: 51]
!   !   !   !   Child: 0  Id: x [type int] [line: 51]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 51]
!   !   Sibling: 33  Op: [ [type int] [line: 52]
!   !   !   Child: 0  Id: xa [type int] [line: 52]
!   !   !   Child: 1  Const: 2 [type int] [line: 52]
!   !   Sibling: 34  Op: * [type int] [line: 53]
!   !   !   Child: 0  Op: [ [type int] [line: 53]
!   !   !   !   Child: 0  Id: xa [type int] [line: 53]
!   !   !   !   Child: 1  Const: 2 [type int] [line: 53]
Number of warnings: 0
Number of errors: 37
